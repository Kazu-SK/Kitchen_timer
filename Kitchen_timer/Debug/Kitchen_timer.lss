
Kitchen_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec9  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dc  00000000  00000000  000022d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00002e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000790  00000000  00000000  0000331e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003aae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_11>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	8b 01       	movw	r16, r22
  6a:	8e 01       	movw	r16, r28
  6c:	91 01       	movw	r18, r2
  6e:	94 01       	movw	r18, r8
  70:	97 01       	movw	r18, r14
  72:	9a 01       	movw	r18, r20
  74:	9d 01       	movw	r18, r26
  76:	a0 01       	movw	r20, r0
  78:	a3 01       	movw	r20, r6
  7a:	a6 01       	movw	r20, r12

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
  9c:	0c 94 6d 04 	jmp	0x8da	; 0x8da <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_12>:
ISR(TIMER1_COMPA_vect){

	TimeDisplay();
}

ISR(TIMER1_COMPB_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	
	if(PORTB == OFF)
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8f 3f       	cpi	r24, 0xFF	; 255
  b4:	11 f4       	brne	.+4      	; 0xba <__vector_12+0x16>
		PORTB = ALL_LIGHT;
  b6:	15 b8       	out	0x05, r1	; 5
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_12+0x1a>
	else
		PORTB = OFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	85 b9       	out	0x05, r24	; 5
	
	PORTD ^= 1 << DDD7;
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 58       	subi	r24, 0x80	; 128
  c2:	8b b9       	out	0x0b, r24	; 11
	TCNT1 = 0; 
  c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <TimeDisplay>:


void TimeDisplay(){
	
	if(remain_time[0] == 0){
  d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	80 81       	ld	r24, Z
  e2:	81 11       	cpse	r24, r1
  e4:	1e c0       	rjmp	.+60     	; 0x122 <TimeDisplay+0x4a>
		remain_time[0] = 9;	
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	80 83       	st	Z, r24
			
		if(remain_time[1] == 0){
  ea:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f2:	81 81       	ldd	r24, Z+1	; 0x01
  f4:	81 11       	cpse	r24, r1
  f6:	12 c0       	rjmp	.+36     	; 0x11c <TimeDisplay+0x44>
			remain_time[1] = 5;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	81 83       	std	Z+1, r24	; 0x01
			
			if (remain_time[2] == 0){
  fc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	82 81       	ldd	r24, Z+2	; 0x02
 106:	81 11       	cpse	r24, r1
 108:	06 c0       	rjmp	.+12     	; 0x116 <TimeDisplay+0x3e>
				remain_time[3]--;
 10a:	83 81       	ldd	r24, Z+3	; 0x03
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	83 83       	std	Z+3, r24	; 0x03
				remain_time[2] = 9;
 110:	89 e0       	ldi	r24, 0x09	; 9
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	08 95       	ret
			}
			else
				remain_time[2]--;	
 116:	81 50       	subi	r24, 0x01	; 1
 118:	82 83       	std	Z+2, r24	; 0x02
 11a:	08 95       	ret
		}
		else
			remain_time[1]--;		
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	81 83       	std	Z+1, r24	; 0x01
 120:	08 95       	ret
	}
	else
		remain_time[0]--;
 122:	81 50       	subi	r24, 0x01	; 1
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <__vector_11>:


uint8_t *remain_time;


ISR(TIMER1_COMPA_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31

	TimeDisplay();
 14a:	0e 94 6c 00 	call	0xd8	; 0xd8 <TimeDisplay>
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <CountDown>:
	else
		remain_time[0]--;
	
}

void CountDown(uint8_t d_num[]){
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24

	remain_time = d_num;
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uint16_t hold_timer = 0;
	uint32_t *p;
	uint8_t reset_signal = 0;


	TCNT1 = 0;	
 182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 186:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1 << OCF1A;
 18a:	86 b3       	in	r24, 0x16	; 22
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	86 bb       	out	0x16, r24	; 22
	SREG |= 0x80;
 190:	8f b7       	in	r24, 0x3f	; 63
 192:	80 68       	ori	r24, 0x80	; 128
 194:	8f bf       	out	0x3f, r24	; 63
	//sei();
	

	while (PIND & START_SWITCH)
 196:	11 c0       	rjmp	.+34     	; 0x1ba <CountDown+0x4a>
	{
		if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0){
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <CountDown+0x44>
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	81 11       	cpse	r24, r1
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <CountDown+0x44>
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	81 11       	cpse	r24, r1
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <CountDown+0x44>
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	81 11       	cpse	r24, r1
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <CountDown+0x44>
			cli();
 1b0:	f8 94       	cli
			break;
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <CountDown+0x4e>
		}
		
		DynamicDrive(d_num);
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
	TIFR1 |= 1 << OCF1A;
	SREG |= 0x80;
	//sei();
	

	while (PIND & START_SWITCH)
 1ba:	4c 99       	sbic	0x09, 4	; 9
 1bc:	ed cf       	rjmp	.-38     	; 0x198 <CountDown+0x28>
		DynamicDrive(d_num);
	}

	for(;;){

		if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0){
 1be:	88 81       	ld	r24, Y
 1c0:	81 11       	cpse	r24, r1
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <CountDown+0x6a>
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	81 11       	cpse	r24, r1
 1c8:	08 c0       	rjmp	.+16     	; 0x1da <CountDown+0x6a>
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	81 11       	cpse	r24, r1
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <CountDown+0x6a>
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	81 11       	cpse	r24, r1
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <CountDown+0x6a>
			cli();
 1d6:	f8 94       	cli
			break;
 1d8:	43 c0       	rjmp	.+134    	; 0x260 <CountDown+0xf0>
		}

		if (PIND & START_SWITCH){
 1da:	4c 9b       	sbis	0x09, 4	; 9
 1dc:	3d c0       	rjmp	.+122    	; 0x258 <CountDown+0xe8>
			
			cli();
 1de:	f8 94       	cli
			hold_timer = TCNT1;
 1e0:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1e4:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
			
			while (PIND & START_SWITCH){
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <CountDown+0x80>
				DynamicDrive(d_num);
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
		if (PIND & START_SWITCH){
			
			cli();
			hold_timer = TCNT1;
			
			while (PIND & START_SWITCH){
 1f0:	4c 99       	sbic	0x09, 4	; 9
 1f2:	fb cf       	rjmp	.-10     	; 0x1ea <CountDown+0x7a>
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <CountDown+0x8c>
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
				DynamicDrive(d_num);
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
			
			while (PIND & START_SWITCH){
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
 1fc:	4c 99       	sbic	0x09, 4	; 9
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <CountDown+0x94>
 200:	4a 9b       	sbis	0x09, 2	; 9
 202:	f9 cf       	rjmp	.-14     	; 0x1f6 <CountDown+0x86>
				DynamicDrive(d_num);
			}
			
			if(PIND & MINUTE_SWITCH){
 204:	4a 9b       	sbis	0x09, 2	; 9
 206:	0c c0       	rjmp	.+24     	; 0x220 <CountDown+0xb0>
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
 208:	18 82       	st	Y, r1
 20a:	19 82       	std	Y+1, r1	; 0x01
 20c:	1a 82       	std	Y+2, r1	; 0x02
 20e:	1b 82       	std	Y+3, r1	; 0x03
				
				while (PIND & MINUTE_SWITCH){
 210:	03 c0       	rjmp	.+6      	; 0x218 <CountDown+0xa8>
					DynamicDrive(d_num);
 212:	ce 01       	movw	r24, r28
 214:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
			if(PIND & MINUTE_SWITCH){
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
				
				while (PIND & MINUTE_SWITCH){
 218:	4a 99       	sbic	0x09, 2	; 9
 21a:	fb cf       	rjmp	.-10     	; 0x212 <CountDown+0xa2>
					DynamicDrive(d_num);
				}				
				
				reset_signal = 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	20 c0       	rjmp	.+64     	; 0x260 <CountDown+0xf0>
				
				break;
			}
			
			TCNT1 = hold_timer;
 220:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 224:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 |= 1 << OCF1A;
 228:	86 b3       	in	r24, 0x16	; 22
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	86 bb       	out	0x16, r24	; 22
			//sei();	
			SREG |= 0x80;
 22e:	8f b7       	in	r24, 0x3f	; 63
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8f bf       	out	0x3f, r24	; 63
			
			while (PIND & START_SWITCH)
 234:	0f c0       	rjmp	.+30     	; 0x254 <CountDown+0xe4>
			{
				DynamicDrive(d_num);
 236:	ce 01       	movw	r24, r28
 238:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
				
				if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0)
 23c:	88 81       	ld	r24, Y
 23e:	81 11       	cpse	r24, r1
 240:	09 c0       	rjmp	.+18     	; 0x254 <CountDown+0xe4>
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	81 11       	cpse	r24, r1
 246:	06 c0       	rjmp	.+12     	; 0x254 <CountDown+0xe4>
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	81 11       	cpse	r24, r1
 24c:	03 c0       	rjmp	.+6      	; 0x254 <CountDown+0xe4>
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	88 23       	and	r24, r24
 252:	11 f0       	breq	.+4      	; 0x258 <CountDown+0xe8>
			TCNT1 = hold_timer;
			TIFR1 |= 1 << OCF1A;
			//sei();	
			SREG |= 0x80;
			
			while (PIND & START_SWITCH)
 254:	4c 99       	sbic	0x09, 4	; 9
 256:	ef cf       	rjmp	.-34     	; 0x236 <CountDown+0xc6>
			}			
		}
		

		
		DynamicDrive(d_num);
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
	}
 25e:	af cf       	rjmp	.-162    	; 0x1be <CountDown+0x4e>

//	TCCR1A = 0b00000000;
//	TCCR1B = 0b00001100;

	PORTB = 0x00;
 260:	15 b8       	out	0x05, r1	; 5

    if(reset_signal == 0){
 262:	81 11       	cpse	r24, r1
 264:	29 c0       	rjmp	.+82     	; 0x2b8 <CountDown+0x148>
		
		TIMSK1 = 0b00000100;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		
		OCR1B = 15624;
 26c:	88 e0       	ldi	r24, 0x08	; 8
 26e:	9d e3       	ldi	r25, 0x3D	; 61
 270:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 274:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

		TCNT1 = 0;
 278:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 27c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIFR1 |= 1 << OCF1A;
 280:	86 b3       	in	r24, 0x16	; 22
 282:	82 60       	ori	r24, 0x02	; 2
 284:	86 bb       	out	0x16, r24	; 22
		SREG |= 0x80;
 286:	8f b7       	in	r24, 0x3f	; 63
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	8f bf       	out	0x3f, r24	; 63
	
		while(PIND & START_SWITCH){
 28c:	02 c0       	rjmp	.+4      	; 0x292 <CountDown+0x122>
			DisplayFlick();
 28e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DisplayFlick>

		TCNT1 = 0;
		TIFR1 |= 1 << OCF1A;
		SREG |= 0x80;
	
		while(PIND & START_SWITCH){
 292:	4c 99       	sbic	0x09, 4	; 9
 294:	fc cf       	rjmp	.-8      	; 0x28e <CountDown+0x11e>
			DisplayFlick();
		}
	
		for(;;){
		
			if(PIND & START_SWITCH){
 296:	4c 9b       	sbis	0x09, 4	; 9
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <CountDown+0x132>
				cli();
 29a:	f8 94       	cli
				PORTD = !(PORTD | 0xFF);
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	1b b8       	out	0x0b, r1	; 11
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <CountDown+0x13e>
				cli();
				PORTD = !(PORTD | 0xFF);
				break;
			}
	
			DisplayFlick();
 2a2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DisplayFlick>
		}
 2a6:	f7 cf       	rjmp	.-18     	; 0x296 <CountDown+0x126>
	
		while(PIND & START_SWITCH){
			DynamicDrive(d_num);
 2a8:	ce 01       	movw	r24, r28
 2aa:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 2ae:	4c 99       	sbic	0x09, 4	; 9
 2b0:	fb cf       	rjmp	.-10     	; 0x2a8 <CountDown+0x138>
			DynamicDrive(d_num);
		}
		
		TIMSK1 = 0b00000010;
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	}
	
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <DisplayFlick>:
}


void DisplayFlick(){
	
	PORTC = DISPLAY_DIG4;
 2c2:	8e e0       	ldi	r24, 0x0E	; 14
 2c4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	8f ec       	ldi	r24, 0xCF	; 207
 2c8:	97 e0       	ldi	r25, 0x07	; 7
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <DisplayFlick+0x8>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <DisplayFlick+0xe>
 2d0:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG3;
 2d2:	8d e0       	ldi	r24, 0x0D	; 13
 2d4:	88 b9       	out	0x08, r24	; 8
 2d6:	8f ec       	ldi	r24, 0xCF	; 207
 2d8:	97 e0       	ldi	r25, 0x07	; 7
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <DisplayFlick+0x18>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <DisplayFlick+0x1e>
 2e0:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG2;
 2e2:	8b e0       	ldi	r24, 0x0B	; 11
 2e4:	88 b9       	out	0x08, r24	; 8
 2e6:	8f ec       	ldi	r24, 0xCF	; 207
 2e8:	97 e0       	ldi	r25, 0x07	; 7
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <DisplayFlick+0x28>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <DisplayFlick+0x2e>
 2f0:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTC = DISPLAY_DIG1;
 2f2:	87 e0       	ldi	r24, 0x07	; 7
 2f4:	88 b9       	out	0x08, r24	; 8
 2f6:	8f ec       	ldi	r24, 0xCF	; 207
 2f8:	97 e0       	ldi	r25, 0x07	; 7
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <DisplayFlick+0x38>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <DisplayFlick+0x3e>
 300:	00 00       	nop
 302:	08 95       	ret

00000304 <DisplaySegment>:
}


void DisplaySegment(uint8_t num){
	
	switch(num){
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	8a 30       	cpi	r24, 0x0A	; 10
 308:	91 05       	cpc	r25, r1
 30a:	18 f5       	brcc	.+70     	; 0x352 <DisplaySegment+0x4e>
 30c:	fc 01       	movw	r30, r24
 30e:	ec 5c       	subi	r30, 0xCC	; 204
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__tablejump2__>
		case 0:
			PORTB = DISPLAY_NUM0;
 316:	80 ec       	ldi	r24, 0xC0	; 192
 318:	85 b9       	out	0x05, r24	; 5
			break;
 31a:	08 95       	ret
		case 1:
			PORTB = DISPLAY_NUM1;
 31c:	89 ef       	ldi	r24, 0xF9	; 249
 31e:	85 b9       	out	0x05, r24	; 5
			break;
 320:	08 95       	ret
		case 2:
			PORTB = DISPLAY_NUM2;
 322:	84 ea       	ldi	r24, 0xA4	; 164
 324:	85 b9       	out	0x05, r24	; 5
			break;
 326:	08 95       	ret
		case 3:
			PORTB = DISPLAY_NUM3;
 328:	80 eb       	ldi	r24, 0xB0	; 176
 32a:	85 b9       	out	0x05, r24	; 5
			break;
 32c:	08 95       	ret
		case 4:
			PORTB = DISPLAY_NUM4;
 32e:	89 e9       	ldi	r24, 0x99	; 153
 330:	85 b9       	out	0x05, r24	; 5
			break;
 332:	08 95       	ret
		case 5:
			PORTB = DISPLAY_NUM5;
 334:	82 e9       	ldi	r24, 0x92	; 146
 336:	85 b9       	out	0x05, r24	; 5
			break;
 338:	08 95       	ret
		case 6:
			PORTB = DISPLAY_NUM6;
 33a:	82 e8       	ldi	r24, 0x82	; 130
 33c:	85 b9       	out	0x05, r24	; 5
			break;
 33e:	08 95       	ret
		case 7:
			PORTB = DISPLAY_NUM7;
 340:	88 ed       	ldi	r24, 0xD8	; 216
 342:	85 b9       	out	0x05, r24	; 5
			break;
 344:	08 95       	ret
		case 8:
			PORTB = DISPLAY_NUM8;
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	85 b9       	out	0x05, r24	; 5
			break;
 34a:	08 95       	ret
		case 9:
			PORTB = DISPLAY_NUM9;
 34c:	80 e9       	ldi	r24, 0x90	; 144
 34e:	85 b9       	out	0x05, r24	; 5
			break;
 350:	08 95       	ret
		default:
			PORTB = DISPLAY_ERROR;
 352:	86 e0       	ldi	r24, 0x06	; 6
 354:	85 b9       	out	0x05, r24	; 5
 356:	08 95       	ret

00000358 <DynamicDrive>:


#include "Display.h"


void DynamicDrive(uint8_t disp[]){
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	ec 01       	movw	r28, r24
	
	PORTB = OFF;
 360:	1f ef       	ldi	r17, 0xFF	; 255
 362:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[0]);
 364:	88 81       	ld	r24, Y
 366:	0e 94 82 01 	call	0x304	; 0x304 <DisplaySegment>
	PORTC = DISPLAY_DIG4;
 36a:	8e e0       	ldi	r24, 0x0E	; 14
 36c:	88 b9       	out	0x08, r24	; 8
 36e:	8f ec       	ldi	r24, 0xCF	; 207
 370:	97 e0       	ldi	r25, 0x07	; 7
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <DynamicDrive+0x1a>
 376:	00 c0       	rjmp	.+0      	; 0x378 <DynamicDrive+0x20>
 378:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 37a:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[1]);
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	0e 94 82 01 	call	0x304	; 0x304 <DisplaySegment>
	PORTC = DISPLAY_DIG3;
 382:	8d e0       	ldi	r24, 0x0D	; 13
 384:	88 b9       	out	0x08, r24	; 8
 386:	8f ec       	ldi	r24, 0xCF	; 207
 388:	97 e0       	ldi	r25, 0x07	; 7
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <DynamicDrive+0x32>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <DynamicDrive+0x38>
 390:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 392:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[2]);
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	0e 94 82 01 	call	0x304	; 0x304 <DisplaySegment>
	PORTB ^= 1 << PORTB7;    //Turn on the DP.
 39a:	85 b1       	in	r24, 0x05	; 5
 39c:	80 58       	subi	r24, 0x80	; 128
 39e:	85 b9       	out	0x05, r24	; 5
	PORTC = DISPLAY_DIG2;
 3a0:	8b e0       	ldi	r24, 0x0B	; 11
 3a2:	88 b9       	out	0x08, r24	; 8
 3a4:	8f ec       	ldi	r24, 0xCF	; 207
 3a6:	97 e0       	ldi	r25, 0x07	; 7
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <DynamicDrive+0x50>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <DynamicDrive+0x56>
 3ae:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 3b0:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[3]);
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	0e 94 82 01 	call	0x304	; 0x304 <DisplaySegment>
	PORTC = DISPLAY_DIG1;
 3b8:	87 e0       	ldi	r24, 0x07	; 7
 3ba:	88 b9       	out	0x08, r24	; 8
 3bc:	8f ec       	ldi	r24, 0xCF	; 207
 3be:	97 e0       	ldi	r25, 0x07	; 7
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <DynamicDrive+0x68>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <DynamicDrive+0x6e>
 3c6:	00 00       	nop
	_delay_ms(LIGHT_TIME);
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	08 95       	ret

000003d0 <main>:
#include "Display.h"
#include "Count.h"


int main(void)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <main+0x6>
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <main+0x8>
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8_t display_num[4] = {0,0,0,0};
 3dc:	19 82       	std	Y+1, r1	; 0x01
 3de:	1a 82       	std	Y+2, r1	; 0x02
 3e0:	1b 82       	std	Y+3, r1	; 0x03
 3e2:	1c 82       	std	Y+4, r1	; 0x04
		
		
	DDRB = 0b11111111;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00101111;
 3e8:	8f e2       	ldi	r24, 0x2F	; 47
 3ea:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10000000;
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	8a b9       	out	0x0a, r24	; 10
	

	TCCR1A = 0b00000000;
 3f0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0b00001100;
 3f4:	8c e0       	ldi	r24, 0x0C	; 12
 3f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIMSK1 = 0b00000010;
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1A = 31249;
 400:	81 e1       	ldi	r24, 0x11	; 17
 402:	9a e7       	ldi	r25, 0x7A	; 122
 404:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 408:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 15624;
 40c:	88 e0       	ldi	r24, 0x08	; 8
 40e:	9d e3       	ldi	r25, 0x3D	; 61
 410:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 414:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	cli();
 418:	f8 94       	cli

	for(;;)
	{
		if(PIND & (1 << PIND2)){
 41a:	4a 9b       	sbis	0x09, 2	; 9
 41c:	0f c0       	rjmp	.+30     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			TCCR1B ^= 1 << WGM12;
 41e:	01 e8       	ldi	r16, 0x81	; 129
 420:	10 e0       	ldi	r17, 0x00	; 0
 422:	f8 01       	movw	r30, r16
 424:	90 81       	ld	r25, Z
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	89 27       	eor	r24, r25
 42a:	80 83       	st	Z, r24
			SetMinutes(display_num);
 42c:	ce 01       	movw	r24, r28
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	0e 94 48 02 	call	0x490	; 0x490 <SetMinutes>
			TCCR1B |= 1 << WGM12;
 434:	f8 01       	movw	r30, r16
 436:	80 81       	ld	r24, Z
 438:	88 60       	ori	r24, 0x08	; 8
 43a:	80 83       	st	Z, r24
		}
		
		if(PIND & (1 << PIND3)){
 43c:	4b 9b       	sbis	0x09, 3	; 9
 43e:	04 c0       	rjmp	.+8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			SetSeconds(display_num);
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	0e 94 b4 02 	call	0x568	; 0x568 <SetSeconds>
		}
		
		if(PIND & (1 << PIND4)){
 448:	4c 9b       	sbis	0x09, 4	; 9
 44a:	04 c0       	rjmp	.+8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			CountDown(display_num);
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	0e 94 b8 00 	call	0x170	; 0x170 <CountDown>
		}
		
		DynamicDrive(display_num);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
	}
 45c:	de cf       	rjmp	.-68     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>

0000045e <MinutesCounter>:
 *  Author: Kazu-SK
 */ 

#include "SetTimer.h"

void MinutesCounter(uint8_t d_num[]){
 45e:	fc 01       	movw	r30, r24
	
	if(d_num[2] != 9)
 460:	92 81       	ldd	r25, Z+2	; 0x02
 462:	99 30       	cpi	r25, 0x09	; 9
 464:	19 f0       	breq	.+6      	; 0x46c <MinutesCounter+0xe>
		d_num[2]++;
 466:	9f 5f       	subi	r25, 0xFF	; 255
 468:	92 83       	std	Z+2, r25	; 0x02
 46a:	08 95       	ret
	else{
		d_num[2] = 0;
 46c:	12 82       	std	Z+2, r1	; 0x02
		
		if(d_num[3] != 9)
 46e:	83 81       	ldd	r24, Z+3	; 0x03
 470:	89 30       	cpi	r24, 0x09	; 9
 472:	19 f0       	breq	.+6      	; 0x47a <MinutesCounter+0x1c>
			d_num[3]++;
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	83 83       	std	Z+3, r24	; 0x03
 478:	08 95       	ret
		else
			d_num[3] = 0;
 47a:	13 82       	std	Z+3, r1	; 0x03
 47c:	08 95       	ret

0000047e <SecondsCounter>:
	}
}

void SecondsCounter(uint8_t d_num[]){
 47e:	fc 01       	movw	r30, r24

	if(d_num[1] != 5)
 480:	91 81       	ldd	r25, Z+1	; 0x01
 482:	95 30       	cpi	r25, 0x05	; 5
 484:	19 f0       	breq	.+6      	; 0x48c <SecondsCounter+0xe>
		d_num[1]++;
 486:	9f 5f       	subi	r25, 0xFF	; 255
 488:	91 83       	std	Z+1, r25	; 0x01
 48a:	08 95       	ret
	else
		d_num[1] = 0;
 48c:	11 82       	std	Z+1, r1	; 0x01
 48e:	08 95       	ret

00000490 <SetMinutes>:
}


void SetMinutes(uint8_t d_num[]){
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ec 01       	movw	r28, r24
	float pulse_count = 0.0;
	float push_time = 0.0;
	


	MinutesCounter(d_num);
 496:	0e 94 2f 02 	call	0x45e	; 0x45e <MinutesCounter>

	TCNT1 = 0;
 49a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 49e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(PIND & MINUTE_SWITCH){
 4a2:	5d c0       	rjmp	.+186    	; 0x55e <SetMinutes+0xce>
		DynamicDrive(d_num);
 4a4:	ce 01       	movw	r24, r28
 4a6:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
		
		pulse_count = TCNT1;
 4aa:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4ae:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 43 03 	call	0x686	; 0x686 <__floatunsisf>
		push_time = pulse_count * M_CYCLE / F;
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	40 e8       	ldi	r20, 0x80	; 128
 4c0:	53 e4       	ldi	r21, 0x43	; 67
 4c2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	34 e2       	ldi	r19, 0x24	; 36
 4ca:	44 ef       	ldi	r20, 0xF4	; 244
 4cc:	5a e4       	ldi	r21, 0x4A	; 74
 4ce:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divsf3>
		
		if(push_time >= LONG_PLESS_TIME){
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	40 e8       	ldi	r20, 0x80	; 128
 4d8:	5f e3       	ldi	r21, 0x3F	; 63
 4da:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__gesf2>
 4de:	88 23       	and	r24, r24
 4e0:	7c f1       	brlt	.+94     	; 0x540 <SetMinutes+0xb0>
			
			TCNT1 = 0;
 4e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 4ea:	26 c0       	rjmp	.+76     	; 0x538 <SetMinutes+0xa8>
				
				pulse_count = TCNT1;
 4ec:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4f0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 43 03 	call	0x686	; 0x686 <__floatunsisf>
				push_time = pulse_count * M_CYCLE / F;
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	40 e8       	ldi	r20, 0x80	; 128
 502:	53 e4       	ldi	r21, 0x43	; 67
 504:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	34 e2       	ldi	r19, 0x24	; 36
 50c:	44 ef       	ldi	r20, 0xF4	; 244
 50e:	5a e4       	ldi	r21, 0x4A	; 74
 510:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divsf3>
				
				if (push_time >= LONG_PLESS_COUNTER)
 514:	2d ec       	ldi	r18, 0xCD	; 205
 516:	3c ec       	ldi	r19, 0xCC	; 204
 518:	4c ec       	ldi	r20, 0xCC	; 204
 51a:	5d e3       	ldi	r21, 0x3D	; 61
 51c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__gesf2>
 520:	88 23       	and	r24, r24
 522:	3c f0       	brlt	.+14     	; 0x532 <SetMinutes+0xa2>
				{
					MinutesCounter(d_num);
 524:	ce 01       	movw	r24, r28
 526:	0e 94 2f 02 	call	0x45e	; 0x45e <MinutesCounter>
					TCNT1 = 0;
 52a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 52e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				}
				
				DynamicDrive(d_num);
 532:	ce 01       	movw	r24, r28
 534:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
		
		if(push_time >= LONG_PLESS_TIME){
			
			TCNT1 = 0;
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 538:	4a 9b       	sbis	0x09, 2	; 9
 53a:	02 c0       	rjmp	.+4      	; 0x540 <SetMinutes+0xb0>
 53c:	4b 9b       	sbis	0x09, 3	; 9
 53e:	d6 cf       	rjmp	.-84     	; 0x4ec <SetMinutes+0x5c>
				
				DynamicDrive(d_num);
			}
		}
		
		if(PIND & SECONDS_SWITCH){
 540:	4b 9b       	sbis	0x09, 3	; 9
 542:	0d c0       	rjmp	.+26     	; 0x55e <SetMinutes+0xce>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 544:	18 82       	st	Y, r1
 546:	19 82       	std	Y+1, r1	; 0x01
 548:	1a 82       	std	Y+2, r1	; 0x02
 54a:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 54c:	03 c0       	rjmp	.+6      	; 0x554 <SetMinutes+0xc4>
				DynamicDrive(d_num);
 54e:	ce 01       	movw	r24, r28
 550:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
		
		if(PIND & SECONDS_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 554:	4b 99       	sbic	0x09, 3	; 9
 556:	fb cf       	rjmp	.-10     	; 0x54e <SetMinutes+0xbe>
 558:	4a 99       	sbic	0x09, 2	; 9
 55a:	f9 cf       	rjmp	.-14     	; 0x54e <SetMinutes+0xbe>
 55c:	02 c0       	rjmp	.+4      	; 0x562 <SetMinutes+0xd2>


	MinutesCounter(d_num);

	TCNT1 = 0;
	while(PIND & MINUTE_SWITCH){
 55e:	4a 99       	sbic	0x09, 2	; 9
 560:	a1 cf       	rjmp	.-190    	; 0x4a4 <SetMinutes+0x14>
			
			break;
		}
	}
	
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <SetSeconds>:

void SetSeconds(uint8_t d_num[]){
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	ec 01       	movw	r28, r24
	
	uint32_t *p;
	
	
	SecondsCounter(d_num);
 56e:	0e 94 3f 02 	call	0x47e	; 0x47e <SecondsCounter>
	
	while(PIND & SECONDS_SWITCH){
 572:	12 c0       	rjmp	.+36     	; 0x598 <SetSeconds+0x30>
		DynamicDrive(d_num);
 574:	ce 01       	movw	r24, r28
 576:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
 57a:	4a 9b       	sbis	0x09, 2	; 9
 57c:	0d c0       	rjmp	.+26     	; 0x598 <SetSeconds+0x30>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 57e:	18 82       	st	Y, r1
 580:	19 82       	std	Y+1, r1	; 0x01
 582:	1a 82       	std	Y+2, r1	; 0x02
 584:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 586:	03 c0       	rjmp	.+6      	; 0x58e <SetSeconds+0x26>
				DynamicDrive(d_num);
 588:	ce 01       	movw	r24, r28
 58a:	0e 94 ac 01 	call	0x358	; 0x358 <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 58e:	4b 99       	sbic	0x09, 3	; 9
 590:	fb cf       	rjmp	.-10     	; 0x588 <SetSeconds+0x20>
 592:	4a 99       	sbic	0x09, 2	; 9
 594:	f9 cf       	rjmp	.-14     	; 0x588 <SetSeconds+0x20>
 596:	02 c0       	rjmp	.+4      	; 0x59c <SetSeconds+0x34>
	uint32_t *p;
	
	
	SecondsCounter(d_num);
	
	while(PIND & SECONDS_SWITCH){
 598:	4b 99       	sbic	0x09, 3	; 9
 59a:	ec cf       	rjmp	.-40     	; 0x574 <SetSeconds+0xc>
			
			break;
		}
	}
	
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <__divsf3>:
 5a2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__divsf3x>
 5a6:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_round>
 5aa:	0e 94 90 03 	call	0x720	; 0x720 <__fp_pscB>
 5ae:	58 f0       	brcs	.+22     	; 0x5c6 <__divsf3+0x24>
 5b0:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscA>
 5b4:	40 f0       	brcs	.+16     	; 0x5c6 <__divsf3+0x24>
 5b6:	29 f4       	brne	.+10     	; 0x5c2 <__divsf3+0x20>
 5b8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ba:	29 f0       	breq	.+10     	; 0x5c6 <__divsf3+0x24>
 5bc:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>
 5c0:	51 11       	cpse	r21, r1
 5c2:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>
 5c6:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_nan>

000005ca <__divsf3x>:
 5ca:	0e 94 a8 03 	call	0x750	; 0x750 <__fp_split3>
 5ce:	68 f3       	brcs	.-38     	; 0x5aa <__divsf3+0x8>

000005d0 <__divsf3_pse>:
 5d0:	99 23       	and	r25, r25
 5d2:	b1 f3       	breq	.-20     	; 0x5c0 <__divsf3+0x1e>
 5d4:	55 23       	and	r21, r21
 5d6:	91 f3       	breq	.-28     	; 0x5bc <__divsf3+0x1a>
 5d8:	95 1b       	sub	r25, r21
 5da:	55 0b       	sbc	r21, r21
 5dc:	bb 27       	eor	r27, r27
 5de:	aa 27       	eor	r26, r26
 5e0:	62 17       	cp	r22, r18
 5e2:	73 07       	cpc	r23, r19
 5e4:	84 07       	cpc	r24, r20
 5e6:	38 f0       	brcs	.+14     	; 0x5f6 <__divsf3_pse+0x26>
 5e8:	9f 5f       	subi	r25, 0xFF	; 255
 5ea:	5f 4f       	sbci	r21, 0xFF	; 255
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	44 1f       	adc	r20, r20
 5f2:	aa 1f       	adc	r26, r26
 5f4:	a9 f3       	breq	.-22     	; 0x5e0 <__divsf3_pse+0x10>
 5f6:	35 d0       	rcall	.+106    	; 0x662 <__divsf3_pse+0x92>
 5f8:	0e 2e       	mov	r0, r30
 5fa:	3a f0       	brmi	.+14     	; 0x60a <__divsf3_pse+0x3a>
 5fc:	e0 e8       	ldi	r30, 0x80	; 128
 5fe:	32 d0       	rcall	.+100    	; 0x664 <__divsf3_pse+0x94>
 600:	91 50       	subi	r25, 0x01	; 1
 602:	50 40       	sbci	r21, 0x00	; 0
 604:	e6 95       	lsr	r30
 606:	00 1c       	adc	r0, r0
 608:	ca f7       	brpl	.-14     	; 0x5fc <__divsf3_pse+0x2c>
 60a:	2b d0       	rcall	.+86     	; 0x662 <__divsf3_pse+0x92>
 60c:	fe 2f       	mov	r31, r30
 60e:	29 d0       	rcall	.+82     	; 0x662 <__divsf3_pse+0x92>
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	bb 1f       	adc	r27, r27
 618:	26 17       	cp	r18, r22
 61a:	37 07       	cpc	r19, r23
 61c:	48 07       	cpc	r20, r24
 61e:	ab 07       	cpc	r26, r27
 620:	b0 e8       	ldi	r27, 0x80	; 128
 622:	09 f0       	breq	.+2      	; 0x626 <__divsf3_pse+0x56>
 624:	bb 0b       	sbc	r27, r27
 626:	80 2d       	mov	r24, r0
 628:	bf 01       	movw	r22, r30
 62a:	ff 27       	eor	r31, r31
 62c:	93 58       	subi	r25, 0x83	; 131
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	3a f0       	brmi	.+14     	; 0x640 <__divsf3_pse+0x70>
 632:	9e 3f       	cpi	r25, 0xFE	; 254
 634:	51 05       	cpc	r21, r1
 636:	78 f0       	brcs	.+30     	; 0x656 <__divsf3_pse+0x86>
 638:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>
 63c:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>
 640:	5f 3f       	cpi	r21, 0xFF	; 255
 642:	e4 f3       	brlt	.-8      	; 0x63c <__divsf3_pse+0x6c>
 644:	98 3e       	cpi	r25, 0xE8	; 232
 646:	d4 f3       	brlt	.-12     	; 0x63c <__divsf3_pse+0x6c>
 648:	86 95       	lsr	r24
 64a:	77 95       	ror	r23
 64c:	67 95       	ror	r22
 64e:	b7 95       	ror	r27
 650:	f7 95       	ror	r31
 652:	9f 5f       	subi	r25, 0xFF	; 255
 654:	c9 f7       	brne	.-14     	; 0x648 <__divsf3_pse+0x78>
 656:	88 0f       	add	r24, r24
 658:	91 1d       	adc	r25, r1
 65a:	96 95       	lsr	r25
 65c:	87 95       	ror	r24
 65e:	97 f9       	bld	r25, 7
 660:	08 95       	ret
 662:	e1 e0       	ldi	r30, 0x01	; 1
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	bb 1f       	adc	r27, r27
 66c:	62 17       	cp	r22, r18
 66e:	73 07       	cpc	r23, r19
 670:	84 07       	cpc	r24, r20
 672:	ba 07       	cpc	r27, r26
 674:	20 f0       	brcs	.+8      	; 0x67e <__divsf3_pse+0xae>
 676:	62 1b       	sub	r22, r18
 678:	73 0b       	sbc	r23, r19
 67a:	84 0b       	sbc	r24, r20
 67c:	ba 0b       	sbc	r27, r26
 67e:	ee 1f       	adc	r30, r30
 680:	88 f7       	brcc	.-30     	; 0x664 <__divsf3_pse+0x94>
 682:	e0 95       	com	r30
 684:	08 95       	ret

00000686 <__floatunsisf>:
 686:	e8 94       	clt
 688:	09 c0       	rjmp	.+18     	; 0x69c <__floatsisf+0x12>

0000068a <__floatsisf>:
 68a:	97 fb       	bst	r25, 7
 68c:	3e f4       	brtc	.+14     	; 0x69c <__floatsisf+0x12>
 68e:	90 95       	com	r25
 690:	80 95       	com	r24
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	99 23       	and	r25, r25
 69e:	a9 f0       	breq	.+42     	; 0x6ca <__floatsisf+0x40>
 6a0:	f9 2f       	mov	r31, r25
 6a2:	96 e9       	ldi	r25, 0x96	; 150
 6a4:	bb 27       	eor	r27, r27
 6a6:	93 95       	inc	r25
 6a8:	f6 95       	lsr	r31
 6aa:	87 95       	ror	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b7 95       	ror	r27
 6b2:	f1 11       	cpse	r31, r1
 6b4:	f8 cf       	rjmp	.-16     	; 0x6a6 <__floatsisf+0x1c>
 6b6:	fa f4       	brpl	.+62     	; 0x6f6 <__floatsisf+0x6c>
 6b8:	bb 0f       	add	r27, r27
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <__floatsisf+0x36>
 6bc:	60 ff       	sbrs	r22, 0
 6be:	1b c0       	rjmp	.+54     	; 0x6f6 <__floatsisf+0x6c>
 6c0:	6f 5f       	subi	r22, 0xFF	; 255
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	16 c0       	rjmp	.+44     	; 0x6f6 <__floatsisf+0x6c>
 6ca:	88 23       	and	r24, r24
 6cc:	11 f0       	breq	.+4      	; 0x6d2 <__floatsisf+0x48>
 6ce:	96 e9       	ldi	r25, 0x96	; 150
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <__floatsisf+0x6a>
 6d2:	77 23       	and	r23, r23
 6d4:	21 f0       	breq	.+8      	; 0x6de <__floatsisf+0x54>
 6d6:	9e e8       	ldi	r25, 0x8E	; 142
 6d8:	87 2f       	mov	r24, r23
 6da:	76 2f       	mov	r23, r22
 6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <__floatsisf+0x5e>
 6de:	66 23       	and	r22, r22
 6e0:	71 f0       	breq	.+28     	; 0x6fe <__floatsisf+0x74>
 6e2:	96 e8       	ldi	r25, 0x86	; 134
 6e4:	86 2f       	mov	r24, r22
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	2a f0       	brmi	.+10     	; 0x6f6 <__floatsisf+0x6c>
 6ec:	9a 95       	dec	r25
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	da f7       	brpl	.-10     	; 0x6ec <__floatsisf+0x62>
 6f6:	88 0f       	add	r24, r24
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret

00000700 <__fp_inf>:
 700:	97 f9       	bld	r25, 7
 702:	9f 67       	ori	r25, 0x7F	; 127
 704:	80 e8       	ldi	r24, 0x80	; 128
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	08 95       	ret

0000070c <__fp_nan>:
 70c:	9f ef       	ldi	r25, 0xFF	; 255
 70e:	80 ec       	ldi	r24, 0xC0	; 192
 710:	08 95       	ret

00000712 <__fp_pscA>:
 712:	00 24       	eor	r0, r0
 714:	0a 94       	dec	r0
 716:	16 16       	cp	r1, r22
 718:	17 06       	cpc	r1, r23
 71a:	18 06       	cpc	r1, r24
 71c:	09 06       	cpc	r0, r25
 71e:	08 95       	ret

00000720 <__fp_pscB>:
 720:	00 24       	eor	r0, r0
 722:	0a 94       	dec	r0
 724:	12 16       	cp	r1, r18
 726:	13 06       	cpc	r1, r19
 728:	14 06       	cpc	r1, r20
 72a:	05 06       	cpc	r0, r21
 72c:	08 95       	ret

0000072e <__fp_round>:
 72e:	09 2e       	mov	r0, r25
 730:	03 94       	inc	r0
 732:	00 0c       	add	r0, r0
 734:	11 f4       	brne	.+4      	; 0x73a <__fp_round+0xc>
 736:	88 23       	and	r24, r24
 738:	52 f0       	brmi	.+20     	; 0x74e <__fp_round+0x20>
 73a:	bb 0f       	add	r27, r27
 73c:	40 f4       	brcc	.+16     	; 0x74e <__fp_round+0x20>
 73e:	bf 2b       	or	r27, r31
 740:	11 f4       	brne	.+4      	; 0x746 <__fp_round+0x18>
 742:	60 ff       	sbrs	r22, 0
 744:	04 c0       	rjmp	.+8      	; 0x74e <__fp_round+0x20>
 746:	6f 5f       	subi	r22, 0xFF	; 255
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	08 95       	ret

00000750 <__fp_split3>:
 750:	57 fd       	sbrc	r21, 7
 752:	90 58       	subi	r25, 0x80	; 128
 754:	44 0f       	add	r20, r20
 756:	55 1f       	adc	r21, r21
 758:	59 f0       	breq	.+22     	; 0x770 <__fp_splitA+0x10>
 75a:	5f 3f       	cpi	r21, 0xFF	; 255
 75c:	71 f0       	breq	.+28     	; 0x77a <__fp_splitA+0x1a>
 75e:	47 95       	ror	r20

00000760 <__fp_splitA>:
 760:	88 0f       	add	r24, r24
 762:	97 fb       	bst	r25, 7
 764:	99 1f       	adc	r25, r25
 766:	61 f0       	breq	.+24     	; 0x780 <__fp_splitA+0x20>
 768:	9f 3f       	cpi	r25, 0xFF	; 255
 76a:	79 f0       	breq	.+30     	; 0x78a <__fp_splitA+0x2a>
 76c:	87 95       	ror	r24
 76e:	08 95       	ret
 770:	12 16       	cp	r1, r18
 772:	13 06       	cpc	r1, r19
 774:	14 06       	cpc	r1, r20
 776:	55 1f       	adc	r21, r21
 778:	f2 cf       	rjmp	.-28     	; 0x75e <__fp_split3+0xe>
 77a:	46 95       	lsr	r20
 77c:	f1 df       	rcall	.-30     	; 0x760 <__fp_splitA>
 77e:	08 c0       	rjmp	.+16     	; 0x790 <__fp_splitA+0x30>
 780:	16 16       	cp	r1, r22
 782:	17 06       	cpc	r1, r23
 784:	18 06       	cpc	r1, r24
 786:	99 1f       	adc	r25, r25
 788:	f1 cf       	rjmp	.-30     	; 0x76c <__fp_splitA+0xc>
 78a:	86 95       	lsr	r24
 78c:	71 05       	cpc	r23, r1
 78e:	61 05       	cpc	r22, r1
 790:	08 94       	sec
 792:	08 95       	ret

00000794 <__fp_zero>:
 794:	e8 94       	clt

00000796 <__fp_szero>:
 796:	bb 27       	eor	r27, r27
 798:	66 27       	eor	r22, r22
 79a:	77 27       	eor	r23, r23
 79c:	cb 01       	movw	r24, r22
 79e:	97 f9       	bld	r25, 7
 7a0:	08 95       	ret

000007a2 <__gesf2>:
 7a2:	0e 94 43 04 	call	0x886	; 0x886 <__fp_cmp>
 7a6:	08 f4       	brcc	.+2      	; 0x7aa <__gesf2+0x8>
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
 7aa:	08 95       	ret

000007ac <__mulsf3>:
 7ac:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__mulsf3x>
 7b0:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_round>
 7b4:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscA>
 7b8:	38 f0       	brcs	.+14     	; 0x7c8 <__mulsf3+0x1c>
 7ba:	0e 94 90 03 	call	0x720	; 0x720 <__fp_pscB>
 7be:	20 f0       	brcs	.+8      	; 0x7c8 <__mulsf3+0x1c>
 7c0:	95 23       	and	r25, r21
 7c2:	11 f0       	breq	.+4      	; 0x7c8 <__mulsf3+0x1c>
 7c4:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>
 7c8:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_nan>
 7cc:	11 24       	eor	r1, r1
 7ce:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>

000007d2 <__mulsf3x>:
 7d2:	0e 94 a8 03 	call	0x750	; 0x750 <__fp_split3>
 7d6:	70 f3       	brcs	.-36     	; 0x7b4 <__mulsf3+0x8>

000007d8 <__mulsf3_pse>:
 7d8:	95 9f       	mul	r25, r21
 7da:	c1 f3       	breq	.-16     	; 0x7cc <__mulsf3+0x20>
 7dc:	95 0f       	add	r25, r21
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	55 1f       	adc	r21, r21
 7e2:	62 9f       	mul	r22, r18
 7e4:	f0 01       	movw	r30, r0
 7e6:	72 9f       	mul	r23, r18
 7e8:	bb 27       	eor	r27, r27
 7ea:	f0 0d       	add	r31, r0
 7ec:	b1 1d       	adc	r27, r1
 7ee:	63 9f       	mul	r22, r19
 7f0:	aa 27       	eor	r26, r26
 7f2:	f0 0d       	add	r31, r0
 7f4:	b1 1d       	adc	r27, r1
 7f6:	aa 1f       	adc	r26, r26
 7f8:	64 9f       	mul	r22, r20
 7fa:	66 27       	eor	r22, r22
 7fc:	b0 0d       	add	r27, r0
 7fe:	a1 1d       	adc	r26, r1
 800:	66 1f       	adc	r22, r22
 802:	82 9f       	mul	r24, r18
 804:	22 27       	eor	r18, r18
 806:	b0 0d       	add	r27, r0
 808:	a1 1d       	adc	r26, r1
 80a:	62 1f       	adc	r22, r18
 80c:	73 9f       	mul	r23, r19
 80e:	b0 0d       	add	r27, r0
 810:	a1 1d       	adc	r26, r1
 812:	62 1f       	adc	r22, r18
 814:	83 9f       	mul	r24, r19
 816:	a0 0d       	add	r26, r0
 818:	61 1d       	adc	r22, r1
 81a:	22 1f       	adc	r18, r18
 81c:	74 9f       	mul	r23, r20
 81e:	33 27       	eor	r19, r19
 820:	a0 0d       	add	r26, r0
 822:	61 1d       	adc	r22, r1
 824:	23 1f       	adc	r18, r19
 826:	84 9f       	mul	r24, r20
 828:	60 0d       	add	r22, r0
 82a:	21 1d       	adc	r18, r1
 82c:	82 2f       	mov	r24, r18
 82e:	76 2f       	mov	r23, r22
 830:	6a 2f       	mov	r22, r26
 832:	11 24       	eor	r1, r1
 834:	9f 57       	subi	r25, 0x7F	; 127
 836:	50 40       	sbci	r21, 0x00	; 0
 838:	9a f0       	brmi	.+38     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 83a:	f1 f0       	breq	.+60     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 83c:	88 23       	and	r24, r24
 83e:	4a f0       	brmi	.+18     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 840:	ee 0f       	add	r30, r30
 842:	ff 1f       	adc	r31, r31
 844:	bb 1f       	adc	r27, r27
 846:	66 1f       	adc	r22, r22
 848:	77 1f       	adc	r23, r23
 84a:	88 1f       	adc	r24, r24
 84c:	91 50       	subi	r25, 0x01	; 1
 84e:	50 40       	sbci	r21, 0x00	; 0
 850:	a9 f7       	brne	.-22     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 852:	9e 3f       	cpi	r25, 0xFE	; 254
 854:	51 05       	cpc	r21, r1
 856:	80 f0       	brcs	.+32     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 858:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>
 85c:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	e4 f3       	brlt	.-8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 864:	98 3e       	cpi	r25, 0xE8	; 232
 866:	d4 f3       	brlt	.-12     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 868:	86 95       	lsr	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b7 95       	ror	r27
 870:	f7 95       	ror	r31
 872:	e7 95       	ror	r30
 874:	9f 5f       	subi	r25, 0xFF	; 255
 876:	c1 f7       	brne	.-16     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 878:	fe 2b       	or	r31, r30
 87a:	88 0f       	add	r24, r24
 87c:	91 1d       	adc	r25, r1
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <__fp_cmp>:
 886:	99 0f       	add	r25, r25
 888:	00 08       	sbc	r0, r0
 88a:	55 0f       	add	r21, r21
 88c:	aa 0b       	sbc	r26, r26
 88e:	e0 e8       	ldi	r30, 0x80	; 128
 890:	fe ef       	ldi	r31, 0xFE	; 254
 892:	16 16       	cp	r1, r22
 894:	17 06       	cpc	r1, r23
 896:	e8 07       	cpc	r30, r24
 898:	f9 07       	cpc	r31, r25
 89a:	c0 f0       	brcs	.+48     	; 0x8cc <__fp_cmp+0x46>
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	e4 07       	cpc	r30, r20
 8a2:	f5 07       	cpc	r31, r21
 8a4:	98 f0       	brcs	.+38     	; 0x8cc <__fp_cmp+0x46>
 8a6:	62 1b       	sub	r22, r18
 8a8:	73 0b       	sbc	r23, r19
 8aa:	84 0b       	sbc	r24, r20
 8ac:	95 0b       	sbc	r25, r21
 8ae:	39 f4       	brne	.+14     	; 0x8be <__fp_cmp+0x38>
 8b0:	0a 26       	eor	r0, r26
 8b2:	61 f0       	breq	.+24     	; 0x8cc <__fp_cmp+0x46>
 8b4:	23 2b       	or	r18, r19
 8b6:	24 2b       	or	r18, r20
 8b8:	25 2b       	or	r18, r21
 8ba:	21 f4       	brne	.+8      	; 0x8c4 <__fp_cmp+0x3e>
 8bc:	08 95       	ret
 8be:	0a 26       	eor	r0, r26
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <__fp_cmp+0x3e>
 8c2:	a1 40       	sbci	r26, 0x01	; 1
 8c4:	a6 95       	lsr	r26
 8c6:	8f ef       	ldi	r24, 0xFF	; 255
 8c8:	81 1d       	adc	r24, r1
 8ca:	81 1d       	adc	r24, r1
 8cc:	08 95       	ret

000008ce <__tablejump2__>:
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	05 90       	lpm	r0, Z+
 8d4:	f4 91       	lpm	r31, Z
 8d6:	e0 2d       	mov	r30, r0
 8d8:	09 94       	ijmp

000008da <_exit>:
 8da:	f8 94       	cli

000008dc <__stop_program>:
 8dc:	ff cf       	rjmp	.-2      	; 0x8dc <__stop_program>
