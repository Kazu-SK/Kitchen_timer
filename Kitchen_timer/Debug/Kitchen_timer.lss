
Kitchen_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000095a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fae  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d8  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a06  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079d  00000000  00000000  00003565  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003d02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_11>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	92 01       	movw	r18, r4
  6a:	95 01       	movw	r18, r10
  6c:	98 01       	movw	r18, r16
  6e:	9b 01       	movw	r18, r22
  70:	9e 01       	movw	r18, r28
  72:	a1 01       	movw	r20, r2
  74:	a4 01       	movw	r20, r8
  76:	a7 01       	movw	r20, r14
  78:	aa 01       	movw	r20, r20
  7a:	ad 01       	movw	r20, r26

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
  9c:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_12>:
ISR(TIMER1_COMPA_vect){

	TimeDisplay();
}

ISR(TIMER1_COMPB_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25

	if(PORTD == OFF){
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	29 f4       	brne	.+10     	; 0xc2 <__vector_12+0x1e>
		PORTD = ALL_LIGHT;
  b8:	1b b8       	out	0x0b, r1	; 11
		PORTB |= 1 << DDB0;
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	85 b9       	out	0x05, r24	; 5
  c0:	06 c0       	rjmp	.+12     	; 0xce <__vector_12+0x2a>
	}
	else{
		PORTD = OFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8b b9       	out	0x0b, r24	; 11
		PORTB ^= 1 << DDB0;
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 27       	eor	r24, r25
  cc:	85 b9       	out	0x05, r24	; 5
	}
	 
	TCNT1 = 0; 
  ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <TimeDisplay>:


void TimeDisplay(){
	
	if(remain_time[SECONDS_DIG1] == 0){
  e4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	80 81       	ld	r24, Z
  ee:	81 11       	cpse	r24, r1
  f0:	1e c0       	rjmp	.+60     	; 0x12e <TimeDisplay+0x4a>
		remain_time[SECONDS_DIG1] = 9;	
  f2:	89 e0       	ldi	r24, 0x09	; 9
  f4:	80 83       	st	Z, r24
			
		if(remain_time[SECONDS_DIG2] == 0){
  f6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	81 11       	cpse	r24, r1
 102:	12 c0       	rjmp	.+36     	; 0x128 <TimeDisplay+0x44>
			remain_time[SECONDS_DIG2] = 5;
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	81 83       	std	Z+1, r24	; 0x01
			
			if (remain_time[MINUTE_DIG1] == 0){
 108:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	82 81       	ldd	r24, Z+2	; 0x02
 112:	81 11       	cpse	r24, r1
 114:	06 c0       	rjmp	.+12     	; 0x122 <TimeDisplay+0x3e>
				remain_time[MINUTE_DIG2]--;
 116:	83 81       	ldd	r24, Z+3	; 0x03
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	83 83       	std	Z+3, r24	; 0x03
				remain_time[MINUTE_DIG1] = 9;
 11c:	89 e0       	ldi	r24, 0x09	; 9
 11e:	82 83       	std	Z+2, r24	; 0x02
 120:	08 95       	ret
			}
			else
				remain_time[MINUTE_DIG1]--;	
 122:	81 50       	subi	r24, 0x01	; 1
 124:	82 83       	std	Z+2, r24	; 0x02
 126:	08 95       	ret
		}
		else
			remain_time[SECONDS_DIG2]--;		
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	81 83       	std	Z+1, r24	; 0x01
 12c:	08 95       	ret
	}
	else
		remain_time[SECONDS_DIG1]--;
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <__vector_11>:


uint8_t *remain_time;


ISR(TIMER1_COMPA_vect){
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31

	TimeDisplay();
 156:	0e 94 72 00 	call	0xe4	; 0xe4 <TimeDisplay>
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <CountDown>:
	else
		remain_time[SECONDS_DIG1]--;
	
}

void CountDown(uint8_t d_num[]){
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24

	remain_time = d_num;
 186:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uint16_t hold_timer = 0;
	uint32_t *p;
	uint8_t reset_signal = RESET_OFF;


	TCNT1 = 0;	
 18e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 192:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1 << OCF1A;
 196:	86 b3       	in	r24, 0x16	; 22
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	86 bb       	out	0x16, r24	; 22
	SREG |= INTERRUPT_START;
 19c:	8f b7       	in	r24, 0x3f	; 63
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	8f bf       	out	0x3f, r24	; 63
	//sei();
	

	while (PINB & START_SWITCH)
 1a2:	11 c0       	rjmp	.+34     	; 0x1c6 <CountDown+0x4a>
	{
		if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0){
 1a4:	88 81       	ld	r24, Y
 1a6:	81 11       	cpse	r24, r1
 1a8:	0b c0       	rjmp	.+22     	; 0x1c0 <CountDown+0x44>
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	81 11       	cpse	r24, r1
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <CountDown+0x44>
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	81 11       	cpse	r24, r1
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <CountDown+0x44>
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	81 11       	cpse	r24, r1
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <CountDown+0x44>
			cli();
 1bc:	f8 94       	cli
			break;
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <CountDown+0x4e>
		}
		
		DynamicDrive(d_num);
 1c0:	ce 01       	movw	r24, r28
 1c2:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
	TIFR1 |= 1 << OCF1A;
	SREG |= INTERRUPT_START;
	//sei();
	

	while (PINB & START_SWITCH)
 1c6:	1c 99       	sbic	0x03, 4	; 3
 1c8:	ed cf       	rjmp	.-38     	; 0x1a4 <CountDown+0x28>
		DynamicDrive(d_num);
	}

	for(;;){

		if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0){
 1ca:	88 81       	ld	r24, Y
 1cc:	81 11       	cpse	r24, r1
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <CountDown+0x6a>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	81 11       	cpse	r24, r1
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <CountDown+0x6a>
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	81 11       	cpse	r24, r1
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <CountDown+0x6a>
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	81 11       	cpse	r24, r1
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <CountDown+0x6a>
			cli();
 1e2:	f8 94       	cli
			break;
 1e4:	43 c0       	rjmp	.+134    	; 0x26c <CountDown+0xf0>
		}

		if (PINB & START_SWITCH){
 1e6:	1c 9b       	sbis	0x03, 4	; 3
 1e8:	3d c0       	rjmp	.+122    	; 0x264 <CountDown+0xe8>
			
			cli();
 1ea:	f8 94       	cli
			hold_timer = TCNT1;
 1ec:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1f0:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
			
			while (PINB & START_SWITCH){
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <CountDown+0x80>
				DynamicDrive(d_num);
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
		if (PINB & START_SWITCH){
			
			cli();
			hold_timer = TCNT1;
			
			while (PINB & START_SWITCH){
 1fc:	1c 99       	sbic	0x03, 4	; 3
 1fe:	fb cf       	rjmp	.-10     	; 0x1f6 <CountDown+0x7a>
 200:	03 c0       	rjmp	.+6      	; 0x208 <CountDown+0x8c>
				DynamicDrive(d_num);
			}
			
			while(!(PINB & START_SWITCH) && !(PINB & MINUTE_SWITCH)){
				DynamicDrive(d_num);
 202:	ce 01       	movw	r24, r28
 204:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
			
			while (PINB & START_SWITCH){
				DynamicDrive(d_num);
			}
			
			while(!(PINB & START_SWITCH) && !(PINB & MINUTE_SWITCH)){
 208:	1c 99       	sbic	0x03, 4	; 3
 20a:	02 c0       	rjmp	.+4      	; 0x210 <CountDown+0x94>
 20c:	1a 9b       	sbis	0x03, 2	; 3
 20e:	f9 cf       	rjmp	.-14     	; 0x202 <CountDown+0x86>
				DynamicDrive(d_num);
			}
			
			if(PINB & MINUTE_SWITCH){
 210:	1a 9b       	sbis	0x03, 2	; 3
 212:	0c c0       	rjmp	.+24     	; 0x22c <CountDown+0xb0>
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
 214:	18 82       	st	Y, r1
 216:	19 82       	std	Y+1, r1	; 0x01
 218:	1a 82       	std	Y+2, r1	; 0x02
 21a:	1b 82       	std	Y+3, r1	; 0x03
				
				while (PINB & MINUTE_SWITCH){
 21c:	03 c0       	rjmp	.+6      	; 0x224 <CountDown+0xa8>
					DynamicDrive(d_num);
 21e:	ce 01       	movw	r24, r28
 220:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
			if(PINB & MINUTE_SWITCH){
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
				
				while (PINB & MINUTE_SWITCH){
 224:	1a 99       	sbic	0x03, 2	; 3
 226:	fb cf       	rjmp	.-10     	; 0x21e <CountDown+0xa2>
					DynamicDrive(d_num);
				}				
				
				reset_signal = RESET_ON;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	20 c0       	rjmp	.+64     	; 0x26c <CountDown+0xf0>
				
				break;
			}
			
			TCNT1 = hold_timer;
 22c:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 230:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 |= 1 << OCF1A;
 234:	86 b3       	in	r24, 0x16	; 22
 236:	82 60       	ori	r24, 0x02	; 2
 238:	86 bb       	out	0x16, r24	; 22
			//sei();	
			SREG |= INTERRUPT_START;
 23a:	8f b7       	in	r24, 0x3f	; 63
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	8f bf       	out	0x3f, r24	; 63
			
			while (PINB & START_SWITCH)
 240:	0f c0       	rjmp	.+30     	; 0x260 <CountDown+0xe4>
			{
				DynamicDrive(d_num);
 242:	ce 01       	movw	r24, r28
 244:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
				
				if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0)
 248:	88 81       	ld	r24, Y
 24a:	81 11       	cpse	r24, r1
 24c:	09 c0       	rjmp	.+18     	; 0x260 <CountDown+0xe4>
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	81 11       	cpse	r24, r1
 252:	06 c0       	rjmp	.+12     	; 0x260 <CountDown+0xe4>
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	81 11       	cpse	r24, r1
 258:	03 c0       	rjmp	.+6      	; 0x260 <CountDown+0xe4>
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	88 23       	and	r24, r24
 25e:	11 f0       	breq	.+4      	; 0x264 <CountDown+0xe8>
			TCNT1 = hold_timer;
			TIFR1 |= 1 << OCF1A;
			//sei();	
			SREG |= INTERRUPT_START;
			
			while (PINB & START_SWITCH)
 260:	1c 99       	sbic	0x03, 4	; 3
 262:	ef cf       	rjmp	.-34     	; 0x242 <CountDown+0xc6>
				if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0)
					break;
			}			
		}
		
		DynamicDrive(d_num);
 264:	ce 01       	movw	r24, r28
 266:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
	}
 26a:	af cf       	rjmp	.-162    	; 0x1ca <CountDown+0x4e>



	if(reset_signal == RESET_OFF){
 26c:	81 11       	cpse	r24, r1
 26e:	2b c0       	rjmp	.+86     	; 0x2c6 <CountDown+0x14a>
		
		TIMSK1 = B_INTERRUPT_ENABLE;
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		
		TCNT1 = 0;
 276:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 27a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIFR1 |= 1 << OCF1A;
 27e:	86 b3       	in	r24, 0x16	; 22
 280:	82 60       	ori	r24, 0x02	; 2
 282:	86 bb       	out	0x16, r24	; 22
		SREG |= INTERRUPT_START;
 284:	8f b7       	in	r24, 0x3f	; 63
 286:	80 68       	ori	r24, 0x80	; 128
 288:	8f bf       	out	0x3f, r24	; 63
		
		PORTD = ALL_LIGHT;
 28a:	1b b8       	out	0x0b, r1	; 11
		PORTB |= 1 << DDB0;
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	85 b9       	out	0x05, r24	; 5
	
		while(PINB & START_SWITCH){
 292:	02 c0       	rjmp	.+4      	; 0x298 <CountDown+0x11c>
			DisplayFlick();
 294:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DisplayFlick>
		SREG |= INTERRUPT_START;
		
		PORTD = ALL_LIGHT;
		PORTB |= 1 << DDB0;
	
		while(PINB & START_SWITCH){
 298:	1c 99       	sbic	0x03, 4	; 3
 29a:	fc cf       	rjmp	.-8      	; 0x294 <CountDown+0x118>
			DisplayFlick();
		}
	
		for(;;){
		
			if(PINB & START_SWITCH){
 29c:	1c 9b       	sbis	0x03, 4	; 3
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <CountDown+0x134>
				cli();
 2a0:	f8 94       	cli
				if(PORTB & 1 << DDB0)
 2a2:	28 9b       	sbis	0x05, 0	; 5
 2a4:	0b c0       	rjmp	.+22     	; 0x2bc <CountDown+0x140>
					PORTB ^= 1 << DDB0;
 2a6:	95 b1       	in	r25, 0x05	; 5
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	89 27       	eor	r24, r25
 2ac:	85 b9       	out	0x05, r24	; 5
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <CountDown+0x140>
				
				break;
			}
	
			DisplayFlick();
 2b0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DisplayFlick>
		}
 2b4:	f3 cf       	rjmp	.-26     	; 0x29c <CountDown+0x120>
	
		while(PINB & START_SWITCH){
			DynamicDrive(d_num);
 2b6:	ce 01       	movw	r24, r28
 2b8:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
			}
	
			DisplayFlick();
		}
	
		while(PINB & START_SWITCH){
 2bc:	1c 99       	sbic	0x03, 4	; 3
 2be:	fb cf       	rjmp	.-10     	; 0x2b6 <CountDown+0x13a>
			DynamicDrive(d_num);
		}
		
		TIMSK1 = A_INTERRUPT_ENABLE;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	}
	
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <DisplayFlick>:
}


void DisplayFlick(){
	
	PORTC = DISPLAY_DIG4;
 2d0:	8e e0       	ldi	r24, 0x0E	; 14
 2d2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	8f ec       	ldi	r24, 0xCF	; 207
 2d6:	97 e0       	ldi	r25, 0x07	; 7
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <DisplayFlick+0x8>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <DisplayFlick+0xe>
 2de:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG3;
 2e0:	8d e0       	ldi	r24, 0x0D	; 13
 2e2:	88 b9       	out	0x08, r24	; 8
 2e4:	8f ec       	ldi	r24, 0xCF	; 207
 2e6:	97 e0       	ldi	r25, 0x07	; 7
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <DisplayFlick+0x18>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <DisplayFlick+0x1e>
 2ee:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG2;
 2f0:	8b e0       	ldi	r24, 0x0B	; 11
 2f2:	88 b9       	out	0x08, r24	; 8
 2f4:	8f ec       	ldi	r24, 0xCF	; 207
 2f6:	97 e0       	ldi	r25, 0x07	; 7
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <DisplayFlick+0x28>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <DisplayFlick+0x2e>
 2fe:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTC = DISPLAY_DIG1;
 300:	87 e0       	ldi	r24, 0x07	; 7
 302:	88 b9       	out	0x08, r24	; 8
 304:	8f ec       	ldi	r24, 0xCF	; 207
 306:	97 e0       	ldi	r25, 0x07	; 7
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <DisplayFlick+0x38>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <DisplayFlick+0x3e>
 30e:	00 00       	nop
 310:	08 95       	ret

00000312 <DisplaySegment>:
}


void DisplaySegment(uint8_t num){
	
	switch(num){
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	8a 30       	cpi	r24, 0x0A	; 10
 316:	91 05       	cpc	r25, r1
 318:	18 f5       	brcc	.+70     	; 0x360 <DisplaySegment+0x4e>
 31a:	fc 01       	movw	r30, r24
 31c:	ec 5c       	subi	r30, 0xCC	; 204
 31e:	ff 4f       	sbci	r31, 0xFF	; 255
 320:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__tablejump2__>
		case DISPLAY_NUM0:
			PORTD = SEGMENT_NUM0;
 324:	80 ec       	ldi	r24, 0xC0	; 192
 326:	8b b9       	out	0x0b, r24	; 11
			break;
 328:	08 95       	ret
		case DISPLAY_NUM1:
			PORTD = SEGMENT_NUM1;
 32a:	89 ef       	ldi	r24, 0xF9	; 249
 32c:	8b b9       	out	0x0b, r24	; 11
			break;
 32e:	08 95       	ret
		case DISPLAY_NUM2:
			PORTD = SEGMENT_NUM2;
 330:	84 ea       	ldi	r24, 0xA4	; 164
 332:	8b b9       	out	0x0b, r24	; 11
			break;
 334:	08 95       	ret
		case DISPLAY_NUM3:
			PORTD = SEGMENT_NUM3;
 336:	80 eb       	ldi	r24, 0xB0	; 176
 338:	8b b9       	out	0x0b, r24	; 11
			break;
 33a:	08 95       	ret
		case DISPLAY_NUM4:
			PORTD = SEGMENT_NUM4;
 33c:	89 e9       	ldi	r24, 0x99	; 153
 33e:	8b b9       	out	0x0b, r24	; 11
			break;
 340:	08 95       	ret
		case DISPLAY_NUM5:
			PORTD = SEGMENT_NUM5;
 342:	82 e9       	ldi	r24, 0x92	; 146
 344:	8b b9       	out	0x0b, r24	; 11
			break;
 346:	08 95       	ret
		case DISPLAY_NUM6:
			PORTD = SEGMENT_NUM6;
 348:	82 e8       	ldi	r24, 0x82	; 130
 34a:	8b b9       	out	0x0b, r24	; 11
			break;
 34c:	08 95       	ret
		case DISPLAY_NUM7:
			PORTD = SEGMENT_NUM7;
 34e:	88 ed       	ldi	r24, 0xD8	; 216
 350:	8b b9       	out	0x0b, r24	; 11
			break;
 352:	08 95       	ret
		case DISPLAY_NUM8:
			PORTD = SEGMENT_NUM8;
 354:	80 e8       	ldi	r24, 0x80	; 128
 356:	8b b9       	out	0x0b, r24	; 11
			break;
 358:	08 95       	ret
		case DISPLAY_NUM9:
			PORTD = SEGMENT_NUM9;
 35a:	80 e9       	ldi	r24, 0x90	; 144
 35c:	8b b9       	out	0x0b, r24	; 11
			break;
 35e:	08 95       	ret
		default:
			PORTD = SEGMENT_ERROR;
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	8b b9       	out	0x0b, r24	; 11
 364:	08 95       	ret

00000366 <DynamicDrive>:


#include "Display.h"


void DynamicDrive(uint8_t disp[]){
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	ec 01       	movw	r28, r24
	
	PORTD = OFF;
 36e:	1f ef       	ldi	r17, 0xFF	; 255
 370:	1b b9       	out	0x0b, r17	; 11
	DisplaySegment(disp[SECONDS_DIG1]);
 372:	88 81       	ld	r24, Y
 374:	0e 94 89 01 	call	0x312	; 0x312 <DisplaySegment>
	PORTC = DISPLAY_DIG4;
 378:	8e e0       	ldi	r24, 0x0E	; 14
 37a:	88 b9       	out	0x08, r24	; 8
 37c:	8f ec       	ldi	r24, 0xCF	; 207
 37e:	97 e0       	ldi	r25, 0x07	; 7
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <DynamicDrive+0x1a>
 384:	00 c0       	rjmp	.+0      	; 0x386 <DynamicDrive+0x20>
 386:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTD = OFF;
 388:	1b b9       	out	0x0b, r17	; 11
	DisplaySegment(disp[SECONDS_DIG2]);
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	0e 94 89 01 	call	0x312	; 0x312 <DisplaySegment>
	PORTC = DISPLAY_DIG3;
 390:	8d e0       	ldi	r24, 0x0D	; 13
 392:	88 b9       	out	0x08, r24	; 8
 394:	8f ec       	ldi	r24, 0xCF	; 207
 396:	97 e0       	ldi	r25, 0x07	; 7
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <DynamicDrive+0x32>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <DynamicDrive+0x38>
 39e:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTD = OFF;
 3a0:	1b b9       	out	0x0b, r17	; 11
	DisplaySegment(disp[MINUTE_DIG1]);
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <DisplaySegment>
	PORTD ^= 1 << PORTD7;    //Turn on the DP.
 3a8:	8b b1       	in	r24, 0x0b	; 11
 3aa:	80 58       	subi	r24, 0x80	; 128
 3ac:	8b b9       	out	0x0b, r24	; 11
	PORTC = DISPLAY_DIG2;
 3ae:	8b e0       	ldi	r24, 0x0B	; 11
 3b0:	88 b9       	out	0x08, r24	; 8
 3b2:	8f ec       	ldi	r24, 0xCF	; 207
 3b4:	97 e0       	ldi	r25, 0x07	; 7
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <DynamicDrive+0x50>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <DynamicDrive+0x56>
 3bc:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTD = OFF;
 3be:	1b b9       	out	0x0b, r17	; 11
	DisplaySegment(disp[MINUTE_DIG2]);
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	0e 94 89 01 	call	0x312	; 0x312 <DisplaySegment>
	PORTC = DISPLAY_DIG1;
 3c6:	87 e0       	ldi	r24, 0x07	; 7
 3c8:	88 b9       	out	0x08, r24	; 8
 3ca:	8f ec       	ldi	r24, 0xCF	; 207
 3cc:	97 e0       	ldi	r25, 0x07	; 7
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <DynamicDrive+0x68>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <DynamicDrive+0x6e>
 3d4:	00 00       	nop
	_delay_ms(LIGHT_TIME);
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	08 95       	ret

000003de <main>:
#include "Display.h"
#include "Count.h"


int main(void)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <main+0x6>
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <main+0x8>
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8_t display_num[4] = {0,0,0,0};
 3ea:	19 82       	std	Y+1, r1	; 0x01
 3ec:	1a 82       	std	Y+2, r1	; 0x02
 3ee:	1b 82       	std	Y+3, r1	; 0x03
 3f0:	1c 82       	std	Y+4, r1	; 0x04
		

	DDRB = 0b00000001;	
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00101111;	
 3f6:	8f e2       	ldi	r24, 0x2F	; 47
 3f8:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11111111;
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	8a b9       	out	0x0a, r24	; 10
	

	TCCR1A = 0b00000000;
 3fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = CTC_OPERATION;
 402:	8c e0       	ldi	r24, 0x0C	; 12
 404:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIMSK1 = A_INTERRUPT_ENABLE;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	OCR1A = A_INTERRUPT_TIME;
 40e:	81 e1       	ldi	r24, 0x11	; 17
 410:	9a e7       	ldi	r25, 0x7A	; 122
 412:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 416:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = B_INTERRUPT_TIME;
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	9d e3       	ldi	r25, 0x3D	; 61
 41e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 422:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	cli();
 426:	f8 94       	cli

	for(;;)
	{
		if(PINB & (1 << PINB2)){
 428:	1a 9b       	sbis	0x03, 2	; 3
 42a:	0c c0       	rjmp	.+24     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			TCCR1B = STANDARD_OPERATION;
 42c:	01 e8       	ldi	r16, 0x81	; 129
 42e:	10 e0       	ldi	r17, 0x00	; 0
 430:	84 e0       	ldi	r24, 0x04	; 4
 432:	f8 01       	movw	r30, r16
 434:	80 83       	st	Z, r24
			SetMinutes(display_num);
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	0e 94 4c 02 	call	0x498	; 0x498 <SetMinutes>
			TCCR1B = CTC_OPERATION;
 43e:	8c e0       	ldi	r24, 0x0C	; 12
 440:	f8 01       	movw	r30, r16
 442:	80 83       	st	Z, r24
		}
		
		if(PINB & (1 << PINB3)){
 444:	1b 9b       	sbis	0x03, 3	; 3
 446:	04 c0       	rjmp	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			SetSeconds(display_num);
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	0e 94 b8 02 	call	0x570	; 0x570 <SetSeconds>
		}
		
		if(PINB & (1 << PINB4)){
 450:	1c 9b       	sbis	0x03, 4	; 3
 452:	04 c0       	rjmp	.+8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			CountDown(display_num);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 be 00 	call	0x17c	; 0x17c <CountDown>
		}
		
		DynamicDrive(display_num);
 45c:	ce 01       	movw	r24, r28
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
	}
 464:	e1 cf       	rjmp	.-62     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>

00000466 <MinutesCounter>:
 *  Author: Kazu-SK
 */ 

#include "SetTimer.h"

void MinutesCounter(uint8_t d_num[]){
 466:	fc 01       	movw	r30, r24
	
	if(d_num[MINUTE_DIG1] != 9)
 468:	92 81       	ldd	r25, Z+2	; 0x02
 46a:	99 30       	cpi	r25, 0x09	; 9
 46c:	19 f0       	breq	.+6      	; 0x474 <MinutesCounter+0xe>
		d_num[MINUTE_DIG1]++;
 46e:	9f 5f       	subi	r25, 0xFF	; 255
 470:	92 83       	std	Z+2, r25	; 0x02
 472:	08 95       	ret
	else{
		d_num[MINUTE_DIG1] = 0;
 474:	12 82       	std	Z+2, r1	; 0x02
		
		if(d_num[MINUTE_DIG2] != 9)
 476:	83 81       	ldd	r24, Z+3	; 0x03
 478:	89 30       	cpi	r24, 0x09	; 9
 47a:	19 f0       	breq	.+6      	; 0x482 <MinutesCounter+0x1c>
			d_num[MINUTE_DIG2]++;
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	83 83       	std	Z+3, r24	; 0x03
 480:	08 95       	ret
		else
			d_num[MINUTE_DIG2] = 0;
 482:	13 82       	std	Z+3, r1	; 0x03
 484:	08 95       	ret

00000486 <SecondsCounter>:
	}
}

void SecondsCounter(uint8_t d_num[]){
 486:	fc 01       	movw	r30, r24

	if(d_num[SECONDS_DIG2] != 5)
 488:	91 81       	ldd	r25, Z+1	; 0x01
 48a:	95 30       	cpi	r25, 0x05	; 5
 48c:	19 f0       	breq	.+6      	; 0x494 <SecondsCounter+0xe>
		d_num[SECONDS_DIG2]++;
 48e:	9f 5f       	subi	r25, 0xFF	; 255
 490:	91 83       	std	Z+1, r25	; 0x01
 492:	08 95       	ret
	else
		d_num[SECONDS_DIG2] = 0;
 494:	11 82       	std	Z+1, r1	; 0x01
 496:	08 95       	ret

00000498 <SetMinutes>:
}


void SetMinutes(uint8_t d_num[]){
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
	uint32_t *p;
	float pulse_count = 0.0;
	float push_time = 0.0;
	

	MinutesCounter(d_num);
 49e:	0e 94 33 02 	call	0x466	; 0x466 <MinutesCounter>

	TCNT1 = 0;
 4a2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(PINB & MINUTE_SWITCH){
 4aa:	5d c0       	rjmp	.+186    	; 0x566 <SetMinutes+0xce>
		DynamicDrive(d_num);
 4ac:	ce 01       	movw	r24, r28
 4ae:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
		
		pulse_count = TCNT1;
 4b2:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4b6:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 47 03 	call	0x68e	; 0x68e <__floatunsisf>
		push_time = pulse_count * M_CYCLE / F;
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 e8       	ldi	r20, 0x80	; 128
 4c8:	53 e4       	ldi	r21, 0x43	; 67
 4ca:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__mulsf3>
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	34 e2       	ldi	r19, 0x24	; 36
 4d2:	44 ef       	ldi	r20, 0xF4	; 244
 4d4:	5a e4       	ldi	r21, 0x4A	; 74
 4d6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__divsf3>
		
		if(push_time >= LONG_PLESS_TIME){
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e8       	ldi	r20, 0x80	; 128
 4e0:	5f e3       	ldi	r21, 0x3F	; 63
 4e2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__gesf2>
 4e6:	88 23       	and	r24, r24
 4e8:	7c f1       	brlt	.+94     	; 0x548 <SetMinutes+0xb0>
			
			TCNT1 = 0;
 4ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			while(PINB & MINUTE_SWITCH && !(PINB & SECONDS_SWITCH)){
 4f2:	26 c0       	rjmp	.+76     	; 0x540 <SetMinutes+0xa8>
				
				pulse_count = TCNT1;
 4f4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4f8:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 47 03 	call	0x68e	; 0x68e <__floatunsisf>
				push_time = pulse_count * M_CYCLE / F;
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e8       	ldi	r20, 0x80	; 128
 50a:	53 e4       	ldi	r21, 0x43	; 67
 50c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__mulsf3>
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	34 e2       	ldi	r19, 0x24	; 36
 514:	44 ef       	ldi	r20, 0xF4	; 244
 516:	5a e4       	ldi	r21, 0x4A	; 74
 518:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__divsf3>
				
				if (push_time >= LONG_PLESS_COUNTER)
 51c:	2d ec       	ldi	r18, 0xCD	; 205
 51e:	3c ec       	ldi	r19, 0xCC	; 204
 520:	4c ec       	ldi	r20, 0xCC	; 204
 522:	5d e3       	ldi	r21, 0x3D	; 61
 524:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__gesf2>
 528:	88 23       	and	r24, r24
 52a:	3c f0       	brlt	.+14     	; 0x53a <SetMinutes+0xa2>
				{
					MinutesCounter(d_num);
 52c:	ce 01       	movw	r24, r28
 52e:	0e 94 33 02 	call	0x466	; 0x466 <MinutesCounter>
					TCNT1 = 0;
 532:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 536:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				}
				
				DynamicDrive(d_num);
 53a:	ce 01       	movw	r24, r28
 53c:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
		
		if(push_time >= LONG_PLESS_TIME){
			
			TCNT1 = 0;
			
			while(PINB & MINUTE_SWITCH && !(PINB & SECONDS_SWITCH)){
 540:	1a 9b       	sbis	0x03, 2	; 3
 542:	02 c0       	rjmp	.+4      	; 0x548 <SetMinutes+0xb0>
 544:	1b 9b       	sbis	0x03, 3	; 3
 546:	d6 cf       	rjmp	.-84     	; 0x4f4 <SetMinutes+0x5c>
				
				DynamicDrive(d_num);
			}
		}
		
		if(PINB & SECONDS_SWITCH){
 548:	1b 9b       	sbis	0x03, 3	; 3
 54a:	0d c0       	rjmp	.+26     	; 0x566 <SetMinutes+0xce>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 54c:	18 82       	st	Y, r1
 54e:	19 82       	std	Y+1, r1	; 0x01
 550:	1a 82       	std	Y+2, r1	; 0x02
 552:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PINB & SECONDS_SWITCH || PINB & MINUTE_SWITCH){
 554:	03 c0       	rjmp	.+6      	; 0x55c <SetMinutes+0xc4>
				DynamicDrive(d_num);
 556:	ce 01       	movw	r24, r28
 558:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
		
		if(PINB & SECONDS_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PINB & SECONDS_SWITCH || PINB & MINUTE_SWITCH){
 55c:	1b 99       	sbic	0x03, 3	; 3
 55e:	fb cf       	rjmp	.-10     	; 0x556 <SetMinutes+0xbe>
 560:	1a 99       	sbic	0x03, 2	; 3
 562:	f9 cf       	rjmp	.-14     	; 0x556 <SetMinutes+0xbe>
 564:	02 c0       	rjmp	.+4      	; 0x56a <SetMinutes+0xd2>
	

	MinutesCounter(d_num);

	TCNT1 = 0;
	while(PINB & MINUTE_SWITCH){
 566:	1a 99       	sbic	0x03, 2	; 3
 568:	a1 cf       	rjmp	.-190    	; 0x4ac <SetMinutes+0x14>
			
			break;
		}
	}
	
}
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <SetSeconds>:

void SetSeconds(uint8_t d_num[]){
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	ec 01       	movw	r28, r24
	
	uint32_t *p;
	
	
	SecondsCounter(d_num);
 576:	0e 94 43 02 	call	0x486	; 0x486 <SecondsCounter>
	
	while(PINB & SECONDS_SWITCH){
 57a:	12 c0       	rjmp	.+36     	; 0x5a0 <SetSeconds+0x30>
		DynamicDrive(d_num);
 57c:	ce 01       	movw	r24, r28
 57e:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
		
		if(PINB & MINUTE_SWITCH){
 582:	1a 9b       	sbis	0x03, 2	; 3
 584:	0d c0       	rjmp	.+26     	; 0x5a0 <SetSeconds+0x30>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 586:	18 82       	st	Y, r1
 588:	19 82       	std	Y+1, r1	; 0x01
 58a:	1a 82       	std	Y+2, r1	; 0x02
 58c:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PINB & SECONDS_SWITCH || PINB & MINUTE_SWITCH){
 58e:	03 c0       	rjmp	.+6      	; 0x596 <SetSeconds+0x26>
				DynamicDrive(d_num);
 590:	ce 01       	movw	r24, r28
 592:	0e 94 b3 01 	call	0x366	; 0x366 <DynamicDrive>
		
		if(PINB & MINUTE_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PINB & SECONDS_SWITCH || PINB & MINUTE_SWITCH){
 596:	1b 99       	sbic	0x03, 3	; 3
 598:	fb cf       	rjmp	.-10     	; 0x590 <SetSeconds+0x20>
 59a:	1a 99       	sbic	0x03, 2	; 3
 59c:	f9 cf       	rjmp	.-14     	; 0x590 <SetSeconds+0x20>
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <SetSeconds+0x34>
	uint32_t *p;
	
	
	SecondsCounter(d_num);
	
	while(PINB & SECONDS_SWITCH){
 5a0:	1b 99       	sbic	0x03, 3	; 3
 5a2:	ec cf       	rjmp	.-40     	; 0x57c <SetSeconds+0xc>
			
			break;
		}
	}
	
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <__divsf3>:
 5aa:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__divsf3x>
 5ae:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_round>
 5b2:	0e 94 94 03 	call	0x728	; 0x728 <__fp_pscB>
 5b6:	58 f0       	brcs	.+22     	; 0x5ce <__divsf3+0x24>
 5b8:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_pscA>
 5bc:	40 f0       	brcs	.+16     	; 0x5ce <__divsf3+0x24>
 5be:	29 f4       	brne	.+10     	; 0x5ca <__divsf3+0x20>
 5c0:	5f 3f       	cpi	r21, 0xFF	; 255
 5c2:	29 f0       	breq	.+10     	; 0x5ce <__divsf3+0x24>
 5c4:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_inf>
 5c8:	51 11       	cpse	r21, r1
 5ca:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_szero>
 5ce:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_nan>

000005d2 <__divsf3x>:
 5d2:	0e 94 ac 03 	call	0x758	; 0x758 <__fp_split3>
 5d6:	68 f3       	brcs	.-38     	; 0x5b2 <__divsf3+0x8>

000005d8 <__divsf3_pse>:
 5d8:	99 23       	and	r25, r25
 5da:	b1 f3       	breq	.-20     	; 0x5c8 <__divsf3+0x1e>
 5dc:	55 23       	and	r21, r21
 5de:	91 f3       	breq	.-28     	; 0x5c4 <__divsf3+0x1a>
 5e0:	95 1b       	sub	r25, r21
 5e2:	55 0b       	sbc	r21, r21
 5e4:	bb 27       	eor	r27, r27
 5e6:	aa 27       	eor	r26, r26
 5e8:	62 17       	cp	r22, r18
 5ea:	73 07       	cpc	r23, r19
 5ec:	84 07       	cpc	r24, r20
 5ee:	38 f0       	brcs	.+14     	; 0x5fe <__divsf3_pse+0x26>
 5f0:	9f 5f       	subi	r25, 0xFF	; 255
 5f2:	5f 4f       	sbci	r21, 0xFF	; 255
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	44 1f       	adc	r20, r20
 5fa:	aa 1f       	adc	r26, r26
 5fc:	a9 f3       	breq	.-22     	; 0x5e8 <__divsf3_pse+0x10>
 5fe:	35 d0       	rcall	.+106    	; 0x66a <__divsf3_pse+0x92>
 600:	0e 2e       	mov	r0, r30
 602:	3a f0       	brmi	.+14     	; 0x612 <__divsf3_pse+0x3a>
 604:	e0 e8       	ldi	r30, 0x80	; 128
 606:	32 d0       	rcall	.+100    	; 0x66c <__divsf3_pse+0x94>
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	e6 95       	lsr	r30
 60e:	00 1c       	adc	r0, r0
 610:	ca f7       	brpl	.-14     	; 0x604 <__divsf3_pse+0x2c>
 612:	2b d0       	rcall	.+86     	; 0x66a <__divsf3_pse+0x92>
 614:	fe 2f       	mov	r31, r30
 616:	29 d0       	rcall	.+82     	; 0x66a <__divsf3_pse+0x92>
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	bb 1f       	adc	r27, r27
 620:	26 17       	cp	r18, r22
 622:	37 07       	cpc	r19, r23
 624:	48 07       	cpc	r20, r24
 626:	ab 07       	cpc	r26, r27
 628:	b0 e8       	ldi	r27, 0x80	; 128
 62a:	09 f0       	breq	.+2      	; 0x62e <__divsf3_pse+0x56>
 62c:	bb 0b       	sbc	r27, r27
 62e:	80 2d       	mov	r24, r0
 630:	bf 01       	movw	r22, r30
 632:	ff 27       	eor	r31, r31
 634:	93 58       	subi	r25, 0x83	; 131
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	3a f0       	brmi	.+14     	; 0x648 <__divsf3_pse+0x70>
 63a:	9e 3f       	cpi	r25, 0xFE	; 254
 63c:	51 05       	cpc	r21, r1
 63e:	78 f0       	brcs	.+30     	; 0x65e <__divsf3_pse+0x86>
 640:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_inf>
 644:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_szero>
 648:	5f 3f       	cpi	r21, 0xFF	; 255
 64a:	e4 f3       	brlt	.-8      	; 0x644 <__divsf3_pse+0x6c>
 64c:	98 3e       	cpi	r25, 0xE8	; 232
 64e:	d4 f3       	brlt	.-12     	; 0x644 <__divsf3_pse+0x6c>
 650:	86 95       	lsr	r24
 652:	77 95       	ror	r23
 654:	67 95       	ror	r22
 656:	b7 95       	ror	r27
 658:	f7 95       	ror	r31
 65a:	9f 5f       	subi	r25, 0xFF	; 255
 65c:	c9 f7       	brne	.-14     	; 0x650 <__divsf3_pse+0x78>
 65e:	88 0f       	add	r24, r24
 660:	91 1d       	adc	r25, r1
 662:	96 95       	lsr	r25
 664:	87 95       	ror	r24
 666:	97 f9       	bld	r25, 7
 668:	08 95       	ret
 66a:	e1 e0       	ldi	r30, 0x01	; 1
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	bb 1f       	adc	r27, r27
 674:	62 17       	cp	r22, r18
 676:	73 07       	cpc	r23, r19
 678:	84 07       	cpc	r24, r20
 67a:	ba 07       	cpc	r27, r26
 67c:	20 f0       	brcs	.+8      	; 0x686 <__divsf3_pse+0xae>
 67e:	62 1b       	sub	r22, r18
 680:	73 0b       	sbc	r23, r19
 682:	84 0b       	sbc	r24, r20
 684:	ba 0b       	sbc	r27, r26
 686:	ee 1f       	adc	r30, r30
 688:	88 f7       	brcc	.-30     	; 0x66c <__divsf3_pse+0x94>
 68a:	e0 95       	com	r30
 68c:	08 95       	ret

0000068e <__floatunsisf>:
 68e:	e8 94       	clt
 690:	09 c0       	rjmp	.+18     	; 0x6a4 <__floatsisf+0x12>

00000692 <__floatsisf>:
 692:	97 fb       	bst	r25, 7
 694:	3e f4       	brtc	.+14     	; 0x6a4 <__floatsisf+0x12>
 696:	90 95       	com	r25
 698:	80 95       	com	r24
 69a:	70 95       	com	r23
 69c:	61 95       	neg	r22
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	99 23       	and	r25, r25
 6a6:	a9 f0       	breq	.+42     	; 0x6d2 <__floatsisf+0x40>
 6a8:	f9 2f       	mov	r31, r25
 6aa:	96 e9       	ldi	r25, 0x96	; 150
 6ac:	bb 27       	eor	r27, r27
 6ae:	93 95       	inc	r25
 6b0:	f6 95       	lsr	r31
 6b2:	87 95       	ror	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b7 95       	ror	r27
 6ba:	f1 11       	cpse	r31, r1
 6bc:	f8 cf       	rjmp	.-16     	; 0x6ae <__floatsisf+0x1c>
 6be:	fa f4       	brpl	.+62     	; 0x6fe <__floatsisf+0x6c>
 6c0:	bb 0f       	add	r27, r27
 6c2:	11 f4       	brne	.+4      	; 0x6c8 <__floatsisf+0x36>
 6c4:	60 ff       	sbrs	r22, 0
 6c6:	1b c0       	rjmp	.+54     	; 0x6fe <__floatsisf+0x6c>
 6c8:	6f 5f       	subi	r22, 0xFF	; 255
 6ca:	7f 4f       	sbci	r23, 0xFF	; 255
 6cc:	8f 4f       	sbci	r24, 0xFF	; 255
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	16 c0       	rjmp	.+44     	; 0x6fe <__floatsisf+0x6c>
 6d2:	88 23       	and	r24, r24
 6d4:	11 f0       	breq	.+4      	; 0x6da <__floatsisf+0x48>
 6d6:	96 e9       	ldi	r25, 0x96	; 150
 6d8:	11 c0       	rjmp	.+34     	; 0x6fc <__floatsisf+0x6a>
 6da:	77 23       	and	r23, r23
 6dc:	21 f0       	breq	.+8      	; 0x6e6 <__floatsisf+0x54>
 6de:	9e e8       	ldi	r25, 0x8E	; 142
 6e0:	87 2f       	mov	r24, r23
 6e2:	76 2f       	mov	r23, r22
 6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <__floatsisf+0x5e>
 6e6:	66 23       	and	r22, r22
 6e8:	71 f0       	breq	.+28     	; 0x706 <__floatsisf+0x74>
 6ea:	96 e8       	ldi	r25, 0x86	; 134
 6ec:	86 2f       	mov	r24, r22
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	2a f0       	brmi	.+10     	; 0x6fe <__floatsisf+0x6c>
 6f4:	9a 95       	dec	r25
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	da f7       	brpl	.-10     	; 0x6f4 <__floatsisf+0x62>
 6fe:	88 0f       	add	r24, r24
 700:	96 95       	lsr	r25
 702:	87 95       	ror	r24
 704:	97 f9       	bld	r25, 7
 706:	08 95       	ret

00000708 <__fp_inf>:
 708:	97 f9       	bld	r25, 7
 70a:	9f 67       	ori	r25, 0x7F	; 127
 70c:	80 e8       	ldi	r24, 0x80	; 128
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	08 95       	ret

00000714 <__fp_nan>:
 714:	9f ef       	ldi	r25, 0xFF	; 255
 716:	80 ec       	ldi	r24, 0xC0	; 192
 718:	08 95       	ret

0000071a <__fp_pscA>:
 71a:	00 24       	eor	r0, r0
 71c:	0a 94       	dec	r0
 71e:	16 16       	cp	r1, r22
 720:	17 06       	cpc	r1, r23
 722:	18 06       	cpc	r1, r24
 724:	09 06       	cpc	r0, r25
 726:	08 95       	ret

00000728 <__fp_pscB>:
 728:	00 24       	eor	r0, r0
 72a:	0a 94       	dec	r0
 72c:	12 16       	cp	r1, r18
 72e:	13 06       	cpc	r1, r19
 730:	14 06       	cpc	r1, r20
 732:	05 06       	cpc	r0, r21
 734:	08 95       	ret

00000736 <__fp_round>:
 736:	09 2e       	mov	r0, r25
 738:	03 94       	inc	r0
 73a:	00 0c       	add	r0, r0
 73c:	11 f4       	brne	.+4      	; 0x742 <__fp_round+0xc>
 73e:	88 23       	and	r24, r24
 740:	52 f0       	brmi	.+20     	; 0x756 <__fp_round+0x20>
 742:	bb 0f       	add	r27, r27
 744:	40 f4       	brcc	.+16     	; 0x756 <__fp_round+0x20>
 746:	bf 2b       	or	r27, r31
 748:	11 f4       	brne	.+4      	; 0x74e <__fp_round+0x18>
 74a:	60 ff       	sbrs	r22, 0
 74c:	04 c0       	rjmp	.+8      	; 0x756 <__fp_round+0x20>
 74e:	6f 5f       	subi	r22, 0xFF	; 255
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	08 95       	ret

00000758 <__fp_split3>:
 758:	57 fd       	sbrc	r21, 7
 75a:	90 58       	subi	r25, 0x80	; 128
 75c:	44 0f       	add	r20, r20
 75e:	55 1f       	adc	r21, r21
 760:	59 f0       	breq	.+22     	; 0x778 <__fp_splitA+0x10>
 762:	5f 3f       	cpi	r21, 0xFF	; 255
 764:	71 f0       	breq	.+28     	; 0x782 <__fp_splitA+0x1a>
 766:	47 95       	ror	r20

00000768 <__fp_splitA>:
 768:	88 0f       	add	r24, r24
 76a:	97 fb       	bst	r25, 7
 76c:	99 1f       	adc	r25, r25
 76e:	61 f0       	breq	.+24     	; 0x788 <__fp_splitA+0x20>
 770:	9f 3f       	cpi	r25, 0xFF	; 255
 772:	79 f0       	breq	.+30     	; 0x792 <__fp_splitA+0x2a>
 774:	87 95       	ror	r24
 776:	08 95       	ret
 778:	12 16       	cp	r1, r18
 77a:	13 06       	cpc	r1, r19
 77c:	14 06       	cpc	r1, r20
 77e:	55 1f       	adc	r21, r21
 780:	f2 cf       	rjmp	.-28     	; 0x766 <__fp_split3+0xe>
 782:	46 95       	lsr	r20
 784:	f1 df       	rcall	.-30     	; 0x768 <__fp_splitA>
 786:	08 c0       	rjmp	.+16     	; 0x798 <__fp_splitA+0x30>
 788:	16 16       	cp	r1, r22
 78a:	17 06       	cpc	r1, r23
 78c:	18 06       	cpc	r1, r24
 78e:	99 1f       	adc	r25, r25
 790:	f1 cf       	rjmp	.-30     	; 0x774 <__fp_splitA+0xc>
 792:	86 95       	lsr	r24
 794:	71 05       	cpc	r23, r1
 796:	61 05       	cpc	r22, r1
 798:	08 94       	sec
 79a:	08 95       	ret

0000079c <__fp_zero>:
 79c:	e8 94       	clt

0000079e <__fp_szero>:
 79e:	bb 27       	eor	r27, r27
 7a0:	66 27       	eor	r22, r22
 7a2:	77 27       	eor	r23, r23
 7a4:	cb 01       	movw	r24, r22
 7a6:	97 f9       	bld	r25, 7
 7a8:	08 95       	ret

000007aa <__gesf2>:
 7aa:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_cmp>
 7ae:	08 f4       	brcc	.+2      	; 0x7b2 <__gesf2+0x8>
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__mulsf3>:
 7b4:	0e 94 ed 03 	call	0x7da	; 0x7da <__mulsf3x>
 7b8:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_round>
 7bc:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_pscA>
 7c0:	38 f0       	brcs	.+14     	; 0x7d0 <__mulsf3+0x1c>
 7c2:	0e 94 94 03 	call	0x728	; 0x728 <__fp_pscB>
 7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__mulsf3+0x1c>
 7c8:	95 23       	and	r25, r21
 7ca:	11 f0       	breq	.+4      	; 0x7d0 <__mulsf3+0x1c>
 7cc:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_inf>
 7d0:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_nan>
 7d4:	11 24       	eor	r1, r1
 7d6:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_szero>

000007da <__mulsf3x>:
 7da:	0e 94 ac 03 	call	0x758	; 0x758 <__fp_split3>
 7de:	70 f3       	brcs	.-36     	; 0x7bc <__mulsf3+0x8>

000007e0 <__mulsf3_pse>:
 7e0:	95 9f       	mul	r25, r21
 7e2:	c1 f3       	breq	.-16     	; 0x7d4 <__mulsf3+0x20>
 7e4:	95 0f       	add	r25, r21
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	55 1f       	adc	r21, r21
 7ea:	62 9f       	mul	r22, r18
 7ec:	f0 01       	movw	r30, r0
 7ee:	72 9f       	mul	r23, r18
 7f0:	bb 27       	eor	r27, r27
 7f2:	f0 0d       	add	r31, r0
 7f4:	b1 1d       	adc	r27, r1
 7f6:	63 9f       	mul	r22, r19
 7f8:	aa 27       	eor	r26, r26
 7fa:	f0 0d       	add	r31, r0
 7fc:	b1 1d       	adc	r27, r1
 7fe:	aa 1f       	adc	r26, r26
 800:	64 9f       	mul	r22, r20
 802:	66 27       	eor	r22, r22
 804:	b0 0d       	add	r27, r0
 806:	a1 1d       	adc	r26, r1
 808:	66 1f       	adc	r22, r22
 80a:	82 9f       	mul	r24, r18
 80c:	22 27       	eor	r18, r18
 80e:	b0 0d       	add	r27, r0
 810:	a1 1d       	adc	r26, r1
 812:	62 1f       	adc	r22, r18
 814:	73 9f       	mul	r23, r19
 816:	b0 0d       	add	r27, r0
 818:	a1 1d       	adc	r26, r1
 81a:	62 1f       	adc	r22, r18
 81c:	83 9f       	mul	r24, r19
 81e:	a0 0d       	add	r26, r0
 820:	61 1d       	adc	r22, r1
 822:	22 1f       	adc	r18, r18
 824:	74 9f       	mul	r23, r20
 826:	33 27       	eor	r19, r19
 828:	a0 0d       	add	r26, r0
 82a:	61 1d       	adc	r22, r1
 82c:	23 1f       	adc	r18, r19
 82e:	84 9f       	mul	r24, r20
 830:	60 0d       	add	r22, r0
 832:	21 1d       	adc	r18, r1
 834:	82 2f       	mov	r24, r18
 836:	76 2f       	mov	r23, r22
 838:	6a 2f       	mov	r22, r26
 83a:	11 24       	eor	r1, r1
 83c:	9f 57       	subi	r25, 0x7F	; 127
 83e:	50 40       	sbci	r21, 0x00	; 0
 840:	9a f0       	brmi	.+38     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 842:	f1 f0       	breq	.+60     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 844:	88 23       	and	r24, r24
 846:	4a f0       	brmi	.+18     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 848:	ee 0f       	add	r30, r30
 84a:	ff 1f       	adc	r31, r31
 84c:	bb 1f       	adc	r27, r27
 84e:	66 1f       	adc	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	91 50       	subi	r25, 0x01	; 1
 856:	50 40       	sbci	r21, 0x00	; 0
 858:	a9 f7       	brne	.-22     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 85a:	9e 3f       	cpi	r25, 0xFE	; 254
 85c:	51 05       	cpc	r21, r1
 85e:	80 f0       	brcs	.+32     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 860:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_inf>
 864:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_szero>
 868:	5f 3f       	cpi	r21, 0xFF	; 255
 86a:	e4 f3       	brlt	.-8      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 86c:	98 3e       	cpi	r25, 0xE8	; 232
 86e:	d4 f3       	brlt	.-12     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 870:	86 95       	lsr	r24
 872:	77 95       	ror	r23
 874:	67 95       	ror	r22
 876:	b7 95       	ror	r27
 878:	f7 95       	ror	r31
 87a:	e7 95       	ror	r30
 87c:	9f 5f       	subi	r25, 0xFF	; 255
 87e:	c1 f7       	brne	.-16     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 880:	fe 2b       	or	r31, r30
 882:	88 0f       	add	r24, r24
 884:	91 1d       	adc	r25, r1
 886:	96 95       	lsr	r25
 888:	87 95       	ror	r24
 88a:	97 f9       	bld	r25, 7
 88c:	08 95       	ret

0000088e <__fp_cmp>:
 88e:	99 0f       	add	r25, r25
 890:	00 08       	sbc	r0, r0
 892:	55 0f       	add	r21, r21
 894:	aa 0b       	sbc	r26, r26
 896:	e0 e8       	ldi	r30, 0x80	; 128
 898:	fe ef       	ldi	r31, 0xFE	; 254
 89a:	16 16       	cp	r1, r22
 89c:	17 06       	cpc	r1, r23
 89e:	e8 07       	cpc	r30, r24
 8a0:	f9 07       	cpc	r31, r25
 8a2:	c0 f0       	brcs	.+48     	; 0x8d4 <__fp_cmp+0x46>
 8a4:	12 16       	cp	r1, r18
 8a6:	13 06       	cpc	r1, r19
 8a8:	e4 07       	cpc	r30, r20
 8aa:	f5 07       	cpc	r31, r21
 8ac:	98 f0       	brcs	.+38     	; 0x8d4 <__fp_cmp+0x46>
 8ae:	62 1b       	sub	r22, r18
 8b0:	73 0b       	sbc	r23, r19
 8b2:	84 0b       	sbc	r24, r20
 8b4:	95 0b       	sbc	r25, r21
 8b6:	39 f4       	brne	.+14     	; 0x8c6 <__fp_cmp+0x38>
 8b8:	0a 26       	eor	r0, r26
 8ba:	61 f0       	breq	.+24     	; 0x8d4 <__fp_cmp+0x46>
 8bc:	23 2b       	or	r18, r19
 8be:	24 2b       	or	r18, r20
 8c0:	25 2b       	or	r18, r21
 8c2:	21 f4       	brne	.+8      	; 0x8cc <__fp_cmp+0x3e>
 8c4:	08 95       	ret
 8c6:	0a 26       	eor	r0, r26
 8c8:	09 f4       	brne	.+2      	; 0x8cc <__fp_cmp+0x3e>
 8ca:	a1 40       	sbci	r26, 0x01	; 1
 8cc:	a6 95       	lsr	r26
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	81 1d       	adc	r24, r1
 8d2:	81 1d       	adc	r24, r1
 8d4:	08 95       	ret

000008d6 <__tablejump2__>:
 8d6:	ee 0f       	add	r30, r30
 8d8:	ff 1f       	adc	r31, r31
 8da:	05 90       	lpm	r0, Z+
 8dc:	f4 91       	lpm	r31, Z
 8de:	e0 2d       	mov	r30, r0
 8e0:	09 94       	ijmp

000008e2 <_exit>:
 8e2:	f8 94       	cli

000008e4 <__stop_program>:
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <__stop_program>
