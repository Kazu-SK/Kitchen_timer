
Kitchen_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000094e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000094e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec9  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  00001949  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d6  00000000  00000000  000022d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000790  00000000  00000000  00003316  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003aa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_11>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	89 01       	movw	r16, r18
  6a:	8c 01       	movw	r16, r24
  6c:	8f 01       	movw	r16, r30
  6e:	92 01       	movw	r18, r4
  70:	95 01       	movw	r18, r10
  72:	98 01       	movw	r18, r16
  74:	9b 01       	movw	r18, r22
  76:	9e 01       	movw	r18, r28
  78:	a1 01       	movw	r20, r2
  7a:	a4 01       	movw	r20, r8

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  9c:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_12>:
ISR(TIMER1_COMPA_vect){

	TimeDisplay();
}

ISR(TIMER1_COMPB_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	
	if(PORTB == OFF)
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8f 3f       	cpi	r24, 0xFF	; 255
  b4:	11 f4       	brne	.+4      	; 0xba <__vector_12+0x16>
		PORTB = ALL_LIGHT;
  b6:	15 b8       	out	0x05, r1	; 5
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_12+0x1a>
	else
		PORTB = OFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	85 b9       	out	0x05, r24	; 5
	
	PORTD ^= 1 << DDD7;
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 58       	subi	r24, 0x80	; 128
  c2:	8b b9       	out	0x0b, r24	; 11
	TCNT1 = 0; 
  c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <TimeDisplay>:


void TimeDisplay(){
	
	if(remain_time[0] == 0){
  d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	80 81       	ld	r24, Z
  e2:	81 11       	cpse	r24, r1
  e4:	1e c0       	rjmp	.+60     	; 0x122 <TimeDisplay+0x4a>
		remain_time[0] = 9;	
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	80 83       	st	Z, r24
			
		if(remain_time[1] == 0){
  ea:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f2:	81 81       	ldd	r24, Z+1	; 0x01
  f4:	81 11       	cpse	r24, r1
  f6:	12 c0       	rjmp	.+36     	; 0x11c <TimeDisplay+0x44>
			remain_time[1] = 5;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	81 83       	std	Z+1, r24	; 0x01
			
			if (remain_time[2] == 0){
  fc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	82 81       	ldd	r24, Z+2	; 0x02
 106:	81 11       	cpse	r24, r1
 108:	06 c0       	rjmp	.+12     	; 0x116 <TimeDisplay+0x3e>
				remain_time[3]--;
 10a:	83 81       	ldd	r24, Z+3	; 0x03
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	83 83       	std	Z+3, r24	; 0x03
				remain_time[2] = 9;
 110:	89 e0       	ldi	r24, 0x09	; 9
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	08 95       	ret
			}
			else
				remain_time[2]--;	
 116:	81 50       	subi	r24, 0x01	; 1
 118:	82 83       	std	Z+2, r24	; 0x02
 11a:	08 95       	ret
		}
		else
			remain_time[1]--;		
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	81 83       	std	Z+1, r24	; 0x01
 120:	08 95       	ret
	}
	else
		remain_time[0]--;
 122:	81 50       	subi	r24, 0x01	; 1
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <__vector_11>:


uint8_t *remain_time;


ISR(TIMER1_COMPA_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31

	TimeDisplay();
 14a:	0e 94 6c 00 	call	0xd8	; 0xd8 <TimeDisplay>
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <CountDown>:
	else
		remain_time[0]--;
	
}

void CountDown(uint8_t d_num[]){
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24

	remain_time = d_num;
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uint16_t hold_timer = 0;
	uint32_t *p;
	uint8_t reset_signal = 0;


	TCNT1 = 0;	
 182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 186:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1 << OCF1A;
 18a:	86 b3       	in	r24, 0x16	; 22
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	86 bb       	out	0x16, r24	; 22
	SREG |= 0x80;
 190:	8f b7       	in	r24, 0x3f	; 63
 192:	80 68       	ori	r24, 0x80	; 128
 194:	8f bf       	out	0x3f, r24	; 63
	//sei();
	

	while (PIND & START_SWITCH)
 196:	11 c0       	rjmp	.+34     	; 0x1ba <CountDown+0x4a>
	{
		if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0){
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <CountDown+0x44>
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	81 11       	cpse	r24, r1
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <CountDown+0x44>
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	81 11       	cpse	r24, r1
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <CountDown+0x44>
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	81 11       	cpse	r24, r1
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <CountDown+0x44>
			cli();
 1b0:	f8 94       	cli
			break;
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <CountDown+0x4e>
		}
		
		DynamicDrive(d_num);
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
	TIFR1 |= 1 << OCF1A;
	SREG |= 0x80;
	//sei();
	

	while (PIND & START_SWITCH)
 1ba:	4c 99       	sbic	0x09, 4	; 9
 1bc:	ed cf       	rjmp	.-38     	; 0x198 <CountDown+0x28>
		DynamicDrive(d_num);
	}

	for(;;){

		if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0){
 1be:	88 81       	ld	r24, Y
 1c0:	81 11       	cpse	r24, r1
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <CountDown+0x6a>
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	81 11       	cpse	r24, r1
 1c8:	08 c0       	rjmp	.+16     	; 0x1da <CountDown+0x6a>
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	81 11       	cpse	r24, r1
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <CountDown+0x6a>
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	81 11       	cpse	r24, r1
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <CountDown+0x6a>
			cli();
 1d6:	f8 94       	cli
			break;
 1d8:	43 c0       	rjmp	.+134    	; 0x260 <CountDown+0xf0>
		}

		if (PIND & START_SWITCH){
 1da:	4c 9b       	sbis	0x09, 4	; 9
 1dc:	3d c0       	rjmp	.+122    	; 0x258 <CountDown+0xe8>
			
			cli();
 1de:	f8 94       	cli
			hold_timer = TCNT1;
 1e0:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1e4:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
			
			while (PIND & START_SWITCH){
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <CountDown+0x80>
				DynamicDrive(d_num);
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
		if (PIND & START_SWITCH){
			
			cli();
			hold_timer = TCNT1;
			
			while (PIND & START_SWITCH){
 1f0:	4c 99       	sbic	0x09, 4	; 9
 1f2:	fb cf       	rjmp	.-10     	; 0x1ea <CountDown+0x7a>
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <CountDown+0x8c>
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
				DynamicDrive(d_num);
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
			
			while (PIND & START_SWITCH){
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
 1fc:	4c 99       	sbic	0x09, 4	; 9
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <CountDown+0x94>
 200:	4a 9b       	sbis	0x09, 2	; 9
 202:	f9 cf       	rjmp	.-14     	; 0x1f6 <CountDown+0x86>
				DynamicDrive(d_num);
			}
			
			if(PIND & MINUTE_SWITCH){
 204:	4a 9b       	sbis	0x09, 2	; 9
 206:	0c c0       	rjmp	.+24     	; 0x220 <CountDown+0xb0>
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
 208:	18 82       	st	Y, r1
 20a:	19 82       	std	Y+1, r1	; 0x01
 20c:	1a 82       	std	Y+2, r1	; 0x02
 20e:	1b 82       	std	Y+3, r1	; 0x03
				
				while (PIND & MINUTE_SWITCH){
 210:	03 c0       	rjmp	.+6      	; 0x218 <CountDown+0xa8>
					DynamicDrive(d_num);
 212:	ce 01       	movw	r24, r28
 214:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
			if(PIND & MINUTE_SWITCH){
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
				
				while (PIND & MINUTE_SWITCH){
 218:	4a 99       	sbic	0x09, 2	; 9
 21a:	fb cf       	rjmp	.-10     	; 0x212 <CountDown+0xa2>
					DynamicDrive(d_num);
				}				
				
				reset_signal = 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	20 c0       	rjmp	.+64     	; 0x260 <CountDown+0xf0>
				
				break;
			}
			
			TCNT1 = hold_timer;
 220:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 224:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 |= 1 << OCF1A;
 228:	86 b3       	in	r24, 0x16	; 22
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	86 bb       	out	0x16, r24	; 22
			//sei();	
			SREG |= 0x80;
 22e:	8f b7       	in	r24, 0x3f	; 63
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8f bf       	out	0x3f, r24	; 63
			
			while (PIND & START_SWITCH)
 234:	0f c0       	rjmp	.+30     	; 0x254 <CountDown+0xe4>
			{
				DynamicDrive(d_num);
 236:	ce 01       	movw	r24, r28
 238:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
				
				if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0)
 23c:	88 81       	ld	r24, Y
 23e:	81 11       	cpse	r24, r1
 240:	09 c0       	rjmp	.+18     	; 0x254 <CountDown+0xe4>
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	81 11       	cpse	r24, r1
 246:	06 c0       	rjmp	.+12     	; 0x254 <CountDown+0xe4>
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	81 11       	cpse	r24, r1
 24c:	03 c0       	rjmp	.+6      	; 0x254 <CountDown+0xe4>
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	88 23       	and	r24, r24
 252:	11 f0       	breq	.+4      	; 0x258 <CountDown+0xe8>
			TCNT1 = hold_timer;
			TIFR1 |= 1 << OCF1A;
			//sei();	
			SREG |= 0x80;
			
			while (PIND & START_SWITCH)
 254:	4c 99       	sbic	0x09, 4	; 9
 256:	ef cf       	rjmp	.-34     	; 0x236 <CountDown+0xc6>
			}			
		}
		

		
		DynamicDrive(d_num);
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
	}
 25e:	af cf       	rjmp	.-162    	; 0x1be <CountDown+0x4e>

//	TCCR1A = 0b00000000;
//	TCCR1B = 0b00001100;

	PORTB = 0x00;
 260:	15 b8       	out	0x05, r1	; 5

    if(reset_signal == 0){
 262:	81 11       	cpse	r24, r1
 264:	27 c0       	rjmp	.+78     	; 0x2b4 <CountDown+0x144>
		
		TIMSK1 = 0b00000100;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		
		OCR1B = 15624;
 26c:	88 e0       	ldi	r24, 0x08	; 8
 26e:	9d e3       	ldi	r25, 0x3D	; 61
 270:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 274:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

		TCNT1 = 0;
 278:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 27c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIFR1 |= 1 << OCF1A;
 280:	86 b3       	in	r24, 0x16	; 22
 282:	82 60       	ori	r24, 0x02	; 2
 284:	86 bb       	out	0x16, r24	; 22
		SREG |= 0x80;
 286:	8f b7       	in	r24, 0x3f	; 63
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	8f bf       	out	0x3f, r24	; 63
	
		while(PIND & START_SWITCH){
 28c:	02 c0       	rjmp	.+4      	; 0x292 <CountDown+0x122>
			DisplayFlick();
 28e:	0e 94 5f 01 	call	0x2be	; 0x2be <DisplayFlick>

		TCNT1 = 0;
		TIFR1 |= 1 << OCF1A;
		SREG |= 0x80;
	
		while(PIND & START_SWITCH){
 292:	4c 99       	sbic	0x09, 4	; 9
 294:	fc cf       	rjmp	.-8      	; 0x28e <CountDown+0x11e>
			DisplayFlick();
		}
	
		for(;;){
		
			if(PIND & START_SWITCH){
 296:	4c 9b       	sbis	0x09, 4	; 9
 298:	02 c0       	rjmp	.+4      	; 0x29e <CountDown+0x12e>
				cli();
 29a:	f8 94       	cli
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <CountDown+0x13a>
			if(PIND & START_SWITCH){
				cli();
				break;
			}
	
			DisplayFlick();
 29e:	0e 94 5f 01 	call	0x2be	; 0x2be <DisplayFlick>
		}
 2a2:	f9 cf       	rjmp	.-14     	; 0x296 <CountDown+0x126>
	
		while(PIND & START_SWITCH){
			DynamicDrive(d_num);
 2a4:	ce 01       	movw	r24, r28
 2a6:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 2aa:	4c 99       	sbic	0x09, 4	; 9
 2ac:	fb cf       	rjmp	.-10     	; 0x2a4 <CountDown+0x134>
			DynamicDrive(d_num);
		}
		
		TIMSK1 = 0b00000010;
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	}
	
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <DisplayFlick>:
}


void DisplayFlick(){
	
	PORTC = DISPLAY_DIG4;
 2be:	8e e0       	ldi	r24, 0x0E	; 14
 2c0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	8f ec       	ldi	r24, 0xCF	; 207
 2c4:	97 e0       	ldi	r25, 0x07	; 7
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <DisplayFlick+0x8>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <DisplayFlick+0xe>
 2cc:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG3;
 2ce:	8d e0       	ldi	r24, 0x0D	; 13
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	8f e9       	ldi	r24, 0x9F	; 159
 2d4:	9f e0       	ldi	r25, 0x0F	; 15
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <DisplayFlick+0x18>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <DisplayFlick+0x1e>
 2dc:	00 00       	nop
	_delay_ms(2);

	PORTC = DISPLAY_DIG2;
 2de:	8b e0       	ldi	r24, 0x0B	; 11
 2e0:	88 b9       	out	0x08, r24	; 8
 2e2:	8f ec       	ldi	r24, 0xCF	; 207
 2e4:	97 e0       	ldi	r25, 0x07	; 7
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <DisplayFlick+0x28>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <DisplayFlick+0x2e>
 2ec:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTC = DISPLAY_DIG1;
 2ee:	87 e0       	ldi	r24, 0x07	; 7
 2f0:	88 b9       	out	0x08, r24	; 8
 2f2:	8f ec       	ldi	r24, 0xCF	; 207
 2f4:	97 e0       	ldi	r25, 0x07	; 7
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <DisplayFlick+0x38>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <DisplayFlick+0x3e>
 2fc:	00 00       	nop
 2fe:	08 95       	ret

00000300 <DisplaySegment>:
}


void DisplaySegment(uint8_t num){
	
	switch(num){
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	8a 30       	cpi	r24, 0x0A	; 10
 304:	91 05       	cpc	r25, r1
 306:	18 f5       	brcc	.+70     	; 0x34e <DisplaySegment+0x4e>
 308:	fc 01       	movw	r30, r24
 30a:	ec 5c       	subi	r30, 0xCC	; 204
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__tablejump2__>
		case 0:
			PORTB = DISPLAY_NUM0;
 312:	80 ec       	ldi	r24, 0xC0	; 192
 314:	85 b9       	out	0x05, r24	; 5
			break;
 316:	08 95       	ret
		case 1:
			PORTB = DISPLAY_NUM1;
 318:	89 ef       	ldi	r24, 0xF9	; 249
 31a:	85 b9       	out	0x05, r24	; 5
			break;
 31c:	08 95       	ret
		case 2:
			PORTB = DISPLAY_NUM2;
 31e:	84 ea       	ldi	r24, 0xA4	; 164
 320:	85 b9       	out	0x05, r24	; 5
			break;
 322:	08 95       	ret
		case 3:
			PORTB = DISPLAY_NUM3;
 324:	80 eb       	ldi	r24, 0xB0	; 176
 326:	85 b9       	out	0x05, r24	; 5
			break;
 328:	08 95       	ret
		case 4:
			PORTB = DISPLAY_NUM4;
 32a:	89 e9       	ldi	r24, 0x99	; 153
 32c:	85 b9       	out	0x05, r24	; 5
			break;
 32e:	08 95       	ret
		case 5:
			PORTB = DISPLAY_NUM5;
 330:	82 e9       	ldi	r24, 0x92	; 146
 332:	85 b9       	out	0x05, r24	; 5
			break;
 334:	08 95       	ret
		case 6:
			PORTB = DISPLAY_NUM6;
 336:	82 e8       	ldi	r24, 0x82	; 130
 338:	85 b9       	out	0x05, r24	; 5
			break;
 33a:	08 95       	ret
		case 7:
			PORTB = DISPLAY_NUM7;
 33c:	88 ed       	ldi	r24, 0xD8	; 216
 33e:	85 b9       	out	0x05, r24	; 5
			break;
 340:	08 95       	ret
		case 8:
			PORTB = DISPLAY_NUM8;
 342:	80 e8       	ldi	r24, 0x80	; 128
 344:	85 b9       	out	0x05, r24	; 5
			break;
 346:	08 95       	ret
		case 9:
			PORTB = DISPLAY_NUM9;
 348:	80 e9       	ldi	r24, 0x90	; 144
 34a:	85 b9       	out	0x05, r24	; 5
			break;
 34c:	08 95       	ret
		default:
			PORTB = DISPLAY_ERROR;
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	85 b9       	out	0x05, r24	; 5
 352:	08 95       	ret

00000354 <DynamicDrive>:


#include "Display.h"


void DynamicDrive(uint8_t disp[]){
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
	
	PORTB = OFF;
 35c:	1f ef       	ldi	r17, 0xFF	; 255
 35e:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[0]);
 360:	88 81       	ld	r24, Y
 362:	0e 94 80 01 	call	0x300	; 0x300 <DisplaySegment>
	PORTC = DISPLAY_DIG4;
 366:	8e e0       	ldi	r24, 0x0E	; 14
 368:	88 b9       	out	0x08, r24	; 8
 36a:	8f ec       	ldi	r24, 0xCF	; 207
 36c:	97 e0       	ldi	r25, 0x07	; 7
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <DynamicDrive+0x1a>
 372:	00 c0       	rjmp	.+0      	; 0x374 <DynamicDrive+0x20>
 374:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 376:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[1]);
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	0e 94 80 01 	call	0x300	; 0x300 <DisplaySegment>
	PORTC = DISPLAY_DIG3;
 37e:	8d e0       	ldi	r24, 0x0D	; 13
 380:	88 b9       	out	0x08, r24	; 8
 382:	8f ec       	ldi	r24, 0xCF	; 207
 384:	97 e0       	ldi	r25, 0x07	; 7
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <DynamicDrive+0x32>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <DynamicDrive+0x38>
 38c:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 38e:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[2]);
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	0e 94 80 01 	call	0x300	; 0x300 <DisplaySegment>
	PORTB ^= 1 << PORTB7;    //Turn on the DP.
 396:	85 b1       	in	r24, 0x05	; 5
 398:	80 58       	subi	r24, 0x80	; 128
 39a:	85 b9       	out	0x05, r24	; 5
	PORTC = DISPLAY_DIG2;
 39c:	8b e0       	ldi	r24, 0x0B	; 11
 39e:	88 b9       	out	0x08, r24	; 8
 3a0:	8f ec       	ldi	r24, 0xCF	; 207
 3a2:	97 e0       	ldi	r25, 0x07	; 7
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <DynamicDrive+0x50>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <DynamicDrive+0x56>
 3aa:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 3ac:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[3]);
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	0e 94 80 01 	call	0x300	; 0x300 <DisplaySegment>
	PORTC = DISPLAY_DIG1;
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	88 b9       	out	0x08, r24	; 8
 3b8:	8f ec       	ldi	r24, 0xCF	; 207
 3ba:	97 e0       	ldi	r25, 0x07	; 7
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <DynamicDrive+0x68>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <DynamicDrive+0x6e>
 3c2:	00 00       	nop
	_delay_ms(LIGHT_TIME);
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	08 95       	ret

000003cc <main>:
#include "Display.h"
#include "Count.h"


int main(void)
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <main+0x6>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <main+0x8>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8_t display_num[4] = {0,0,0,0};
 3d8:	19 82       	std	Y+1, r1	; 0x01
 3da:	1a 82       	std	Y+2, r1	; 0x02
 3dc:	1b 82       	std	Y+3, r1	; 0x03
 3de:	1c 82       	std	Y+4, r1	; 0x04
		
		
	DDRB = 0b11111111;
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00101111;
 3e4:	8f e2       	ldi	r24, 0x2F	; 47
 3e6:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10000000;
 3e8:	80 e8       	ldi	r24, 0x80	; 128
 3ea:	8a b9       	out	0x0a, r24	; 10
	

	TCCR1A = 0b00000000;
 3ec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0b00001100;
 3f0:	8c e0       	ldi	r24, 0x0C	; 12
 3f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIMSK1 = 0b00000010;
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1A = 31249;
 3fc:	81 e1       	ldi	r24, 0x11	; 17
 3fe:	9a e7       	ldi	r25, 0x7A	; 122
 400:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 404:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 15624;
 408:	88 e0       	ldi	r24, 0x08	; 8
 40a:	9d e3       	ldi	r25, 0x3D	; 61
 40c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 410:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	cli();
 414:	f8 94       	cli

	for(;;)
	{
		if(PIND & (1 << PIND2)){
 416:	4a 9b       	sbis	0x09, 2	; 9
 418:	0f c0       	rjmp	.+30     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			TCCR1B ^= 1 << WGM12;
 41a:	01 e8       	ldi	r16, 0x81	; 129
 41c:	10 e0       	ldi	r17, 0x00	; 0
 41e:	f8 01       	movw	r30, r16
 420:	90 81       	ld	r25, Z
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	89 27       	eor	r24, r25
 426:	80 83       	st	Z, r24
			SetMinutes(display_num);
 428:	ce 01       	movw	r24, r28
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	0e 94 46 02 	call	0x48c	; 0x48c <SetMinutes>
			TCCR1B |= 1 << WGM12;
 430:	f8 01       	movw	r30, r16
 432:	80 81       	ld	r24, Z
 434:	88 60       	ori	r24, 0x08	; 8
 436:	80 83       	st	Z, r24
		}
		
		if(PIND & (1 << PIND3)){
 438:	4b 9b       	sbis	0x09, 3	; 9
 43a:	04 c0       	rjmp	.+8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			SetSeconds(display_num);
 43c:	ce 01       	movw	r24, r28
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	0e 94 b2 02 	call	0x564	; 0x564 <SetSeconds>
		}
		
		if(PIND & (1 << PIND4)){
 444:	4c 9b       	sbis	0x09, 4	; 9
 446:	04 c0       	rjmp	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			CountDown(display_num);
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	0e 94 b8 00 	call	0x170	; 0x170 <CountDown>
		}
		
		DynamicDrive(display_num);
 450:	ce 01       	movw	r24, r28
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
	}
 458:	de cf       	rjmp	.-68     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>

0000045a <MinutesCounter>:
 *  Author: Kazu-SK
 */ 

#include "SetTimer.h"

void MinutesCounter(uint8_t d_num[]){
 45a:	fc 01       	movw	r30, r24
	
	if(d_num[2] != 9)
 45c:	92 81       	ldd	r25, Z+2	; 0x02
 45e:	99 30       	cpi	r25, 0x09	; 9
 460:	19 f0       	breq	.+6      	; 0x468 <MinutesCounter+0xe>
		d_num[2]++;
 462:	9f 5f       	subi	r25, 0xFF	; 255
 464:	92 83       	std	Z+2, r25	; 0x02
 466:	08 95       	ret
	else{
		d_num[2] = 0;
 468:	12 82       	std	Z+2, r1	; 0x02
		
		if(d_num[3] != 9)
 46a:	83 81       	ldd	r24, Z+3	; 0x03
 46c:	89 30       	cpi	r24, 0x09	; 9
 46e:	19 f0       	breq	.+6      	; 0x476 <MinutesCounter+0x1c>
			d_num[3]++;
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	83 83       	std	Z+3, r24	; 0x03
 474:	08 95       	ret
		else
			d_num[3] = 0;
 476:	13 82       	std	Z+3, r1	; 0x03
 478:	08 95       	ret

0000047a <SecondsCounter>:
	}
}

void SecondsCounter(uint8_t d_num[]){
 47a:	fc 01       	movw	r30, r24

	if(d_num[1] != 5)
 47c:	91 81       	ldd	r25, Z+1	; 0x01
 47e:	95 30       	cpi	r25, 0x05	; 5
 480:	19 f0       	breq	.+6      	; 0x488 <SecondsCounter+0xe>
		d_num[1]++;
 482:	9f 5f       	subi	r25, 0xFF	; 255
 484:	91 83       	std	Z+1, r25	; 0x01
 486:	08 95       	ret
	else
		d_num[1] = 0;
 488:	11 82       	std	Z+1, r1	; 0x01
 48a:	08 95       	ret

0000048c <SetMinutes>:
}


void SetMinutes(uint8_t d_num[]){
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	ec 01       	movw	r28, r24
	float pulse_count = 0.0;
	float push_time = 0.0;
	


	MinutesCounter(d_num);
 492:	0e 94 2d 02 	call	0x45a	; 0x45a <MinutesCounter>

	TCNT1 = 0;
 496:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 49a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(PIND & MINUTE_SWITCH){
 49e:	5d c0       	rjmp	.+186    	; 0x55a <SetMinutes+0xce>
		DynamicDrive(d_num);
 4a0:	ce 01       	movw	r24, r28
 4a2:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
		
		pulse_count = TCNT1;
 4a6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4aa:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 41 03 	call	0x682	; 0x682 <__floatunsisf>
		push_time = pulse_count * M_CYCLE / F;
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	40 e8       	ldi	r20, 0x80	; 128
 4bc:	53 e4       	ldi	r21, 0x43	; 67
 4be:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__mulsf3>
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	34 e2       	ldi	r19, 0x24	; 36
 4c6:	44 ef       	ldi	r20, 0xF4	; 244
 4c8:	5a e4       	ldi	r21, 0x4A	; 74
 4ca:	0e 94 cf 02 	call	0x59e	; 0x59e <__divsf3>
		
		if(push_time >= 1){
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e8       	ldi	r20, 0x80	; 128
 4d4:	5f e3       	ldi	r21, 0x3F	; 63
 4d6:	0e 94 cf 03 	call	0x79e	; 0x79e <__gesf2>
 4da:	88 23       	and	r24, r24
 4dc:	7c f1       	brlt	.+94     	; 0x53c <SetMinutes+0xb0>
			
			TCNT1 = 0;
 4de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 4e6:	26 c0       	rjmp	.+76     	; 0x534 <SetMinutes+0xa8>
				
				pulse_count = TCNT1;
 4e8:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4ec:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 41 03 	call	0x682	; 0x682 <__floatunsisf>
				push_time = pulse_count * M_CYCLE / F;
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	40 e8       	ldi	r20, 0x80	; 128
 4fe:	53 e4       	ldi	r21, 0x43	; 67
 500:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__mulsf3>
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	34 e2       	ldi	r19, 0x24	; 36
 508:	44 ef       	ldi	r20, 0xF4	; 244
 50a:	5a e4       	ldi	r21, 0x4A	; 74
 50c:	0e 94 cf 02 	call	0x59e	; 0x59e <__divsf3>
				
				if (push_time >= LONG_PLESS )
 510:	2d ec       	ldi	r18, 0xCD	; 205
 512:	3c ec       	ldi	r19, 0xCC	; 204
 514:	4c ec       	ldi	r20, 0xCC	; 204
 516:	5d e3       	ldi	r21, 0x3D	; 61
 518:	0e 94 cf 03 	call	0x79e	; 0x79e <__gesf2>
 51c:	88 23       	and	r24, r24
 51e:	3c f0       	brlt	.+14     	; 0x52e <SetMinutes+0xa2>
				{
					MinutesCounter(d_num);
 520:	ce 01       	movw	r24, r28
 522:	0e 94 2d 02 	call	0x45a	; 0x45a <MinutesCounter>
					TCNT1 = 0;
 526:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 52a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				}
				
				DynamicDrive(d_num);
 52e:	ce 01       	movw	r24, r28
 530:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
		
		if(push_time >= 1){
			
			TCNT1 = 0;
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 534:	4a 9b       	sbis	0x09, 2	; 9
 536:	02 c0       	rjmp	.+4      	; 0x53c <SetMinutes+0xb0>
 538:	4b 9b       	sbis	0x09, 3	; 9
 53a:	d6 cf       	rjmp	.-84     	; 0x4e8 <SetMinutes+0x5c>
				
				DynamicDrive(d_num);
			}
		}
		
		if(PIND & SECONDS_SWITCH){
 53c:	4b 9b       	sbis	0x09, 3	; 9
 53e:	0d c0       	rjmp	.+26     	; 0x55a <SetMinutes+0xce>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 540:	18 82       	st	Y, r1
 542:	19 82       	std	Y+1, r1	; 0x01
 544:	1a 82       	std	Y+2, r1	; 0x02
 546:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 548:	03 c0       	rjmp	.+6      	; 0x550 <SetMinutes+0xc4>
				DynamicDrive(d_num);
 54a:	ce 01       	movw	r24, r28
 54c:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
		
		if(PIND & SECONDS_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 550:	4b 99       	sbic	0x09, 3	; 9
 552:	fb cf       	rjmp	.-10     	; 0x54a <SetMinutes+0xbe>
 554:	4a 99       	sbic	0x09, 2	; 9
 556:	f9 cf       	rjmp	.-14     	; 0x54a <SetMinutes+0xbe>
 558:	02 c0       	rjmp	.+4      	; 0x55e <SetMinutes+0xd2>


	MinutesCounter(d_num);

	TCNT1 = 0;
	while(PIND & MINUTE_SWITCH){
 55a:	4a 99       	sbic	0x09, 2	; 9
 55c:	a1 cf       	rjmp	.-190    	; 0x4a0 <SetMinutes+0x14>
			
			break;
		}
	}
	
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <SetSeconds>:

void SetSeconds(uint8_t d_num[]){
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	ec 01       	movw	r28, r24
	
	uint32_t *p;
	
	
	SecondsCounter(d_num);
 56a:	0e 94 3d 02 	call	0x47a	; 0x47a <SecondsCounter>
	
	while(PIND & SECONDS_SWITCH){
 56e:	12 c0       	rjmp	.+36     	; 0x594 <SetSeconds+0x30>
		DynamicDrive(d_num);
 570:	ce 01       	movw	r24, r28
 572:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
 576:	4a 9b       	sbis	0x09, 2	; 9
 578:	0d c0       	rjmp	.+26     	; 0x594 <SetSeconds+0x30>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 57a:	18 82       	st	Y, r1
 57c:	19 82       	std	Y+1, r1	; 0x01
 57e:	1a 82       	std	Y+2, r1	; 0x02
 580:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 582:	03 c0       	rjmp	.+6      	; 0x58a <SetSeconds+0x26>
				DynamicDrive(d_num);
 584:	ce 01       	movw	r24, r28
 586:	0e 94 aa 01 	call	0x354	; 0x354 <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 58a:	4b 99       	sbic	0x09, 3	; 9
 58c:	fb cf       	rjmp	.-10     	; 0x584 <SetSeconds+0x20>
 58e:	4a 99       	sbic	0x09, 2	; 9
 590:	f9 cf       	rjmp	.-14     	; 0x584 <SetSeconds+0x20>
 592:	02 c0       	rjmp	.+4      	; 0x598 <SetSeconds+0x34>
	uint32_t *p;
	
	
	SecondsCounter(d_num);
	
	while(PIND & SECONDS_SWITCH){
 594:	4b 99       	sbic	0x09, 3	; 9
 596:	ec cf       	rjmp	.-40     	; 0x570 <SetSeconds+0xc>
			
			break;
		}
	}
	
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <__divsf3>:
 59e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__divsf3x>
 5a2:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_round>
 5a6:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_pscB>
 5aa:	58 f0       	brcs	.+22     	; 0x5c2 <__divsf3+0x24>
 5ac:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_pscA>
 5b0:	40 f0       	brcs	.+16     	; 0x5c2 <__divsf3+0x24>
 5b2:	29 f4       	brne	.+10     	; 0x5be <__divsf3+0x20>
 5b4:	5f 3f       	cpi	r21, 0xFF	; 255
 5b6:	29 f0       	breq	.+10     	; 0x5c2 <__divsf3+0x24>
 5b8:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>
 5bc:	51 11       	cpse	r21, r1
 5be:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_szero>
 5c2:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_nan>

000005c6 <__divsf3x>:
 5c6:	0e 94 a6 03 	call	0x74c	; 0x74c <__fp_split3>
 5ca:	68 f3       	brcs	.-38     	; 0x5a6 <__divsf3+0x8>

000005cc <__divsf3_pse>:
 5cc:	99 23       	and	r25, r25
 5ce:	b1 f3       	breq	.-20     	; 0x5bc <__divsf3+0x1e>
 5d0:	55 23       	and	r21, r21
 5d2:	91 f3       	breq	.-28     	; 0x5b8 <__divsf3+0x1a>
 5d4:	95 1b       	sub	r25, r21
 5d6:	55 0b       	sbc	r21, r21
 5d8:	bb 27       	eor	r27, r27
 5da:	aa 27       	eor	r26, r26
 5dc:	62 17       	cp	r22, r18
 5de:	73 07       	cpc	r23, r19
 5e0:	84 07       	cpc	r24, r20
 5e2:	38 f0       	brcs	.+14     	; 0x5f2 <__divsf3_pse+0x26>
 5e4:	9f 5f       	subi	r25, 0xFF	; 255
 5e6:	5f 4f       	sbci	r21, 0xFF	; 255
 5e8:	22 0f       	add	r18, r18
 5ea:	33 1f       	adc	r19, r19
 5ec:	44 1f       	adc	r20, r20
 5ee:	aa 1f       	adc	r26, r26
 5f0:	a9 f3       	breq	.-22     	; 0x5dc <__divsf3_pse+0x10>
 5f2:	35 d0       	rcall	.+106    	; 0x65e <__divsf3_pse+0x92>
 5f4:	0e 2e       	mov	r0, r30
 5f6:	3a f0       	brmi	.+14     	; 0x606 <__divsf3_pse+0x3a>
 5f8:	e0 e8       	ldi	r30, 0x80	; 128
 5fa:	32 d0       	rcall	.+100    	; 0x660 <__divsf3_pse+0x94>
 5fc:	91 50       	subi	r25, 0x01	; 1
 5fe:	50 40       	sbci	r21, 0x00	; 0
 600:	e6 95       	lsr	r30
 602:	00 1c       	adc	r0, r0
 604:	ca f7       	brpl	.-14     	; 0x5f8 <__divsf3_pse+0x2c>
 606:	2b d0       	rcall	.+86     	; 0x65e <__divsf3_pse+0x92>
 608:	fe 2f       	mov	r31, r30
 60a:	29 d0       	rcall	.+82     	; 0x65e <__divsf3_pse+0x92>
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	88 1f       	adc	r24, r24
 612:	bb 1f       	adc	r27, r27
 614:	26 17       	cp	r18, r22
 616:	37 07       	cpc	r19, r23
 618:	48 07       	cpc	r20, r24
 61a:	ab 07       	cpc	r26, r27
 61c:	b0 e8       	ldi	r27, 0x80	; 128
 61e:	09 f0       	breq	.+2      	; 0x622 <__divsf3_pse+0x56>
 620:	bb 0b       	sbc	r27, r27
 622:	80 2d       	mov	r24, r0
 624:	bf 01       	movw	r22, r30
 626:	ff 27       	eor	r31, r31
 628:	93 58       	subi	r25, 0x83	; 131
 62a:	5f 4f       	sbci	r21, 0xFF	; 255
 62c:	3a f0       	brmi	.+14     	; 0x63c <__divsf3_pse+0x70>
 62e:	9e 3f       	cpi	r25, 0xFE	; 254
 630:	51 05       	cpc	r21, r1
 632:	78 f0       	brcs	.+30     	; 0x652 <__divsf3_pse+0x86>
 634:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>
 638:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_szero>
 63c:	5f 3f       	cpi	r21, 0xFF	; 255
 63e:	e4 f3       	brlt	.-8      	; 0x638 <__divsf3_pse+0x6c>
 640:	98 3e       	cpi	r25, 0xE8	; 232
 642:	d4 f3       	brlt	.-12     	; 0x638 <__divsf3_pse+0x6c>
 644:	86 95       	lsr	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b7 95       	ror	r27
 64c:	f7 95       	ror	r31
 64e:	9f 5f       	subi	r25, 0xFF	; 255
 650:	c9 f7       	brne	.-14     	; 0x644 <__divsf3_pse+0x78>
 652:	88 0f       	add	r24, r24
 654:	91 1d       	adc	r25, r1
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	97 f9       	bld	r25, 7
 65c:	08 95       	ret
 65e:	e1 e0       	ldi	r30, 0x01	; 1
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	bb 1f       	adc	r27, r27
 668:	62 17       	cp	r22, r18
 66a:	73 07       	cpc	r23, r19
 66c:	84 07       	cpc	r24, r20
 66e:	ba 07       	cpc	r27, r26
 670:	20 f0       	brcs	.+8      	; 0x67a <__divsf3_pse+0xae>
 672:	62 1b       	sub	r22, r18
 674:	73 0b       	sbc	r23, r19
 676:	84 0b       	sbc	r24, r20
 678:	ba 0b       	sbc	r27, r26
 67a:	ee 1f       	adc	r30, r30
 67c:	88 f7       	brcc	.-30     	; 0x660 <__divsf3_pse+0x94>
 67e:	e0 95       	com	r30
 680:	08 95       	ret

00000682 <__floatunsisf>:
 682:	e8 94       	clt
 684:	09 c0       	rjmp	.+18     	; 0x698 <__floatsisf+0x12>

00000686 <__floatsisf>:
 686:	97 fb       	bst	r25, 7
 688:	3e f4       	brtc	.+14     	; 0x698 <__floatsisf+0x12>
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	99 23       	and	r25, r25
 69a:	a9 f0       	breq	.+42     	; 0x6c6 <__floatsisf+0x40>
 69c:	f9 2f       	mov	r31, r25
 69e:	96 e9       	ldi	r25, 0x96	; 150
 6a0:	bb 27       	eor	r27, r27
 6a2:	93 95       	inc	r25
 6a4:	f6 95       	lsr	r31
 6a6:	87 95       	ror	r24
 6a8:	77 95       	ror	r23
 6aa:	67 95       	ror	r22
 6ac:	b7 95       	ror	r27
 6ae:	f1 11       	cpse	r31, r1
 6b0:	f8 cf       	rjmp	.-16     	; 0x6a2 <__floatsisf+0x1c>
 6b2:	fa f4       	brpl	.+62     	; 0x6f2 <__floatsisf+0x6c>
 6b4:	bb 0f       	add	r27, r27
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__floatsisf+0x36>
 6b8:	60 ff       	sbrs	r22, 0
 6ba:	1b c0       	rjmp	.+54     	; 0x6f2 <__floatsisf+0x6c>
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <__floatsisf+0x6c>
 6c6:	88 23       	and	r24, r24
 6c8:	11 f0       	breq	.+4      	; 0x6ce <__floatsisf+0x48>
 6ca:	96 e9       	ldi	r25, 0x96	; 150
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <__floatsisf+0x6a>
 6ce:	77 23       	and	r23, r23
 6d0:	21 f0       	breq	.+8      	; 0x6da <__floatsisf+0x54>
 6d2:	9e e8       	ldi	r25, 0x8E	; 142
 6d4:	87 2f       	mov	r24, r23
 6d6:	76 2f       	mov	r23, r22
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <__floatsisf+0x5e>
 6da:	66 23       	and	r22, r22
 6dc:	71 f0       	breq	.+28     	; 0x6fa <__floatsisf+0x74>
 6de:	96 e8       	ldi	r25, 0x86	; 134
 6e0:	86 2f       	mov	r24, r22
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	2a f0       	brmi	.+10     	; 0x6f2 <__floatsisf+0x6c>
 6e8:	9a 95       	dec	r25
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	da f7       	brpl	.-10     	; 0x6e8 <__floatsisf+0x62>
 6f2:	88 0f       	add	r24, r24
 6f4:	96 95       	lsr	r25
 6f6:	87 95       	ror	r24
 6f8:	97 f9       	bld	r25, 7
 6fa:	08 95       	ret

000006fc <__fp_inf>:
 6fc:	97 f9       	bld	r25, 7
 6fe:	9f 67       	ori	r25, 0x7F	; 127
 700:	80 e8       	ldi	r24, 0x80	; 128
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	08 95       	ret

00000708 <__fp_nan>:
 708:	9f ef       	ldi	r25, 0xFF	; 255
 70a:	80 ec       	ldi	r24, 0xC0	; 192
 70c:	08 95       	ret

0000070e <__fp_pscA>:
 70e:	00 24       	eor	r0, r0
 710:	0a 94       	dec	r0
 712:	16 16       	cp	r1, r22
 714:	17 06       	cpc	r1, r23
 716:	18 06       	cpc	r1, r24
 718:	09 06       	cpc	r0, r25
 71a:	08 95       	ret

0000071c <__fp_pscB>:
 71c:	00 24       	eor	r0, r0
 71e:	0a 94       	dec	r0
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	14 06       	cpc	r1, r20
 726:	05 06       	cpc	r0, r21
 728:	08 95       	ret

0000072a <__fp_round>:
 72a:	09 2e       	mov	r0, r25
 72c:	03 94       	inc	r0
 72e:	00 0c       	add	r0, r0
 730:	11 f4       	brne	.+4      	; 0x736 <__fp_round+0xc>
 732:	88 23       	and	r24, r24
 734:	52 f0       	brmi	.+20     	; 0x74a <__fp_round+0x20>
 736:	bb 0f       	add	r27, r27
 738:	40 f4       	brcc	.+16     	; 0x74a <__fp_round+0x20>
 73a:	bf 2b       	or	r27, r31
 73c:	11 f4       	brne	.+4      	; 0x742 <__fp_round+0x18>
 73e:	60 ff       	sbrs	r22, 0
 740:	04 c0       	rjmp	.+8      	; 0x74a <__fp_round+0x20>
 742:	6f 5f       	subi	r22, 0xFF	; 255
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__fp_split3>:
 74c:	57 fd       	sbrc	r21, 7
 74e:	90 58       	subi	r25, 0x80	; 128
 750:	44 0f       	add	r20, r20
 752:	55 1f       	adc	r21, r21
 754:	59 f0       	breq	.+22     	; 0x76c <__fp_splitA+0x10>
 756:	5f 3f       	cpi	r21, 0xFF	; 255
 758:	71 f0       	breq	.+28     	; 0x776 <__fp_splitA+0x1a>
 75a:	47 95       	ror	r20

0000075c <__fp_splitA>:
 75c:	88 0f       	add	r24, r24
 75e:	97 fb       	bst	r25, 7
 760:	99 1f       	adc	r25, r25
 762:	61 f0       	breq	.+24     	; 0x77c <__fp_splitA+0x20>
 764:	9f 3f       	cpi	r25, 0xFF	; 255
 766:	79 f0       	breq	.+30     	; 0x786 <__fp_splitA+0x2a>
 768:	87 95       	ror	r24
 76a:	08 95       	ret
 76c:	12 16       	cp	r1, r18
 76e:	13 06       	cpc	r1, r19
 770:	14 06       	cpc	r1, r20
 772:	55 1f       	adc	r21, r21
 774:	f2 cf       	rjmp	.-28     	; 0x75a <__fp_split3+0xe>
 776:	46 95       	lsr	r20
 778:	f1 df       	rcall	.-30     	; 0x75c <__fp_splitA>
 77a:	08 c0       	rjmp	.+16     	; 0x78c <__fp_splitA+0x30>
 77c:	16 16       	cp	r1, r22
 77e:	17 06       	cpc	r1, r23
 780:	18 06       	cpc	r1, r24
 782:	99 1f       	adc	r25, r25
 784:	f1 cf       	rjmp	.-30     	; 0x768 <__fp_splitA+0xc>
 786:	86 95       	lsr	r24
 788:	71 05       	cpc	r23, r1
 78a:	61 05       	cpc	r22, r1
 78c:	08 94       	sec
 78e:	08 95       	ret

00000790 <__fp_zero>:
 790:	e8 94       	clt

00000792 <__fp_szero>:
 792:	bb 27       	eor	r27, r27
 794:	66 27       	eor	r22, r22
 796:	77 27       	eor	r23, r23
 798:	cb 01       	movw	r24, r22
 79a:	97 f9       	bld	r25, 7
 79c:	08 95       	ret

0000079e <__gesf2>:
 79e:	0e 94 41 04 	call	0x882	; 0x882 <__fp_cmp>
 7a2:	08 f4       	brcc	.+2      	; 0x7a6 <__gesf2+0x8>
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	08 95       	ret

000007a8 <__mulsf3>:
 7a8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__mulsf3x>
 7ac:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_round>
 7b0:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_pscA>
 7b4:	38 f0       	brcs	.+14     	; 0x7c4 <__mulsf3+0x1c>
 7b6:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_pscB>
 7ba:	20 f0       	brcs	.+8      	; 0x7c4 <__mulsf3+0x1c>
 7bc:	95 23       	and	r25, r21
 7be:	11 f0       	breq	.+4      	; 0x7c4 <__mulsf3+0x1c>
 7c0:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>
 7c4:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_nan>
 7c8:	11 24       	eor	r1, r1
 7ca:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_szero>

000007ce <__mulsf3x>:
 7ce:	0e 94 a6 03 	call	0x74c	; 0x74c <__fp_split3>
 7d2:	70 f3       	brcs	.-36     	; 0x7b0 <__mulsf3+0x8>

000007d4 <__mulsf3_pse>:
 7d4:	95 9f       	mul	r25, r21
 7d6:	c1 f3       	breq	.-16     	; 0x7c8 <__mulsf3+0x20>
 7d8:	95 0f       	add	r25, r21
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	55 1f       	adc	r21, r21
 7de:	62 9f       	mul	r22, r18
 7e0:	f0 01       	movw	r30, r0
 7e2:	72 9f       	mul	r23, r18
 7e4:	bb 27       	eor	r27, r27
 7e6:	f0 0d       	add	r31, r0
 7e8:	b1 1d       	adc	r27, r1
 7ea:	63 9f       	mul	r22, r19
 7ec:	aa 27       	eor	r26, r26
 7ee:	f0 0d       	add	r31, r0
 7f0:	b1 1d       	adc	r27, r1
 7f2:	aa 1f       	adc	r26, r26
 7f4:	64 9f       	mul	r22, r20
 7f6:	66 27       	eor	r22, r22
 7f8:	b0 0d       	add	r27, r0
 7fa:	a1 1d       	adc	r26, r1
 7fc:	66 1f       	adc	r22, r22
 7fe:	82 9f       	mul	r24, r18
 800:	22 27       	eor	r18, r18
 802:	b0 0d       	add	r27, r0
 804:	a1 1d       	adc	r26, r1
 806:	62 1f       	adc	r22, r18
 808:	73 9f       	mul	r23, r19
 80a:	b0 0d       	add	r27, r0
 80c:	a1 1d       	adc	r26, r1
 80e:	62 1f       	adc	r22, r18
 810:	83 9f       	mul	r24, r19
 812:	a0 0d       	add	r26, r0
 814:	61 1d       	adc	r22, r1
 816:	22 1f       	adc	r18, r18
 818:	74 9f       	mul	r23, r20
 81a:	33 27       	eor	r19, r19
 81c:	a0 0d       	add	r26, r0
 81e:	61 1d       	adc	r22, r1
 820:	23 1f       	adc	r18, r19
 822:	84 9f       	mul	r24, r20
 824:	60 0d       	add	r22, r0
 826:	21 1d       	adc	r18, r1
 828:	82 2f       	mov	r24, r18
 82a:	76 2f       	mov	r23, r22
 82c:	6a 2f       	mov	r22, r26
 82e:	11 24       	eor	r1, r1
 830:	9f 57       	subi	r25, 0x7F	; 127
 832:	50 40       	sbci	r21, 0x00	; 0
 834:	9a f0       	brmi	.+38     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 836:	f1 f0       	breq	.+60     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 838:	88 23       	and	r24, r24
 83a:	4a f0       	brmi	.+18     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 83c:	ee 0f       	add	r30, r30
 83e:	ff 1f       	adc	r31, r31
 840:	bb 1f       	adc	r27, r27
 842:	66 1f       	adc	r22, r22
 844:	77 1f       	adc	r23, r23
 846:	88 1f       	adc	r24, r24
 848:	91 50       	subi	r25, 0x01	; 1
 84a:	50 40       	sbci	r21, 0x00	; 0
 84c:	a9 f7       	brne	.-22     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 84e:	9e 3f       	cpi	r25, 0xFE	; 254
 850:	51 05       	cpc	r21, r1
 852:	80 f0       	brcs	.+32     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 854:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>
 858:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_szero>
 85c:	5f 3f       	cpi	r21, 0xFF	; 255
 85e:	e4 f3       	brlt	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 860:	98 3e       	cpi	r25, 0xE8	; 232
 862:	d4 f3       	brlt	.-12     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 864:	86 95       	lsr	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b7 95       	ror	r27
 86c:	f7 95       	ror	r31
 86e:	e7 95       	ror	r30
 870:	9f 5f       	subi	r25, 0xFF	; 255
 872:	c1 f7       	brne	.-16     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 874:	fe 2b       	or	r31, r30
 876:	88 0f       	add	r24, r24
 878:	91 1d       	adc	r25, r1
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__fp_cmp>:
 882:	99 0f       	add	r25, r25
 884:	00 08       	sbc	r0, r0
 886:	55 0f       	add	r21, r21
 888:	aa 0b       	sbc	r26, r26
 88a:	e0 e8       	ldi	r30, 0x80	; 128
 88c:	fe ef       	ldi	r31, 0xFE	; 254
 88e:	16 16       	cp	r1, r22
 890:	17 06       	cpc	r1, r23
 892:	e8 07       	cpc	r30, r24
 894:	f9 07       	cpc	r31, r25
 896:	c0 f0       	brcs	.+48     	; 0x8c8 <__fp_cmp+0x46>
 898:	12 16       	cp	r1, r18
 89a:	13 06       	cpc	r1, r19
 89c:	e4 07       	cpc	r30, r20
 89e:	f5 07       	cpc	r31, r21
 8a0:	98 f0       	brcs	.+38     	; 0x8c8 <__fp_cmp+0x46>
 8a2:	62 1b       	sub	r22, r18
 8a4:	73 0b       	sbc	r23, r19
 8a6:	84 0b       	sbc	r24, r20
 8a8:	95 0b       	sbc	r25, r21
 8aa:	39 f4       	brne	.+14     	; 0x8ba <__fp_cmp+0x38>
 8ac:	0a 26       	eor	r0, r26
 8ae:	61 f0       	breq	.+24     	; 0x8c8 <__fp_cmp+0x46>
 8b0:	23 2b       	or	r18, r19
 8b2:	24 2b       	or	r18, r20
 8b4:	25 2b       	or	r18, r21
 8b6:	21 f4       	brne	.+8      	; 0x8c0 <__fp_cmp+0x3e>
 8b8:	08 95       	ret
 8ba:	0a 26       	eor	r0, r26
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <__fp_cmp+0x3e>
 8be:	a1 40       	sbci	r26, 0x01	; 1
 8c0:	a6 95       	lsr	r26
 8c2:	8f ef       	ldi	r24, 0xFF	; 255
 8c4:	81 1d       	adc	r24, r1
 8c6:	81 1d       	adc	r24, r1
 8c8:	08 95       	ret

000008ca <__tablejump2__>:
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	05 90       	lpm	r0, Z+
 8d0:	f4 91       	lpm	r31, Z
 8d2:	e0 2d       	mov	r30, r0
 8d4:	09 94       	ijmp

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>
