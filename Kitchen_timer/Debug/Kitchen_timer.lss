
Kitchen_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000940  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fae  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d8  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fa  00000000  00000000  000023f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000790  00000000  00000000  00003539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003cc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_11>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	85 01       	movw	r16, r10
  6a:	88 01       	movw	r16, r16
  6c:	8b 01       	movw	r16, r22
  6e:	8e 01       	movw	r16, r28
  70:	91 01       	movw	r18, r2
  72:	94 01       	movw	r18, r8
  74:	97 01       	movw	r18, r14
  76:	9a 01       	movw	r18, r20
  78:	9d 01       	movw	r18, r26
  7a:	a0 01       	movw	r20, r0

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <main>
  9c:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_12>:
ISR(TIMER1_COMPA_vect){

	TimeDisplay();
}

ISR(TIMER1_COMPB_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	
	if(PORTB == OFF)
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8f 3f       	cpi	r24, 0xFF	; 255
  b4:	11 f4       	brne	.+4      	; 0xba <__vector_12+0x16>
		PORTB = ALL_LIGHT;
  b6:	15 b8       	out	0x05, r1	; 5
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_12+0x1a>
	else
		PORTB = OFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	85 b9       	out	0x05, r24	; 5
	
	PORTD ^= 1 << DDD7;
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 58       	subi	r24, 0x80	; 128
  c2:	8b b9       	out	0x0b, r24	; 11
	TCNT1 = 0; 
  c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <TimeDisplay>:


void TimeDisplay(){
	
	if(remain_time[SECONDS_DIG1] == 0){
  d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	80 81       	ld	r24, Z
  e2:	81 11       	cpse	r24, r1
  e4:	1e c0       	rjmp	.+60     	; 0x122 <TimeDisplay+0x4a>
		remain_time[SECONDS_DIG1] = 9;	
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	80 83       	st	Z, r24
			
		if(remain_time[SECONDS_DIG2] == 0){
  ea:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f2:	81 81       	ldd	r24, Z+1	; 0x01
  f4:	81 11       	cpse	r24, r1
  f6:	12 c0       	rjmp	.+36     	; 0x11c <TimeDisplay+0x44>
			remain_time[SECONDS_DIG2] = 5;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	81 83       	std	Z+1, r24	; 0x01
			
			if (remain_time[MINUTE_DIG1] == 0){
  fc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	82 81       	ldd	r24, Z+2	; 0x02
 106:	81 11       	cpse	r24, r1
 108:	06 c0       	rjmp	.+12     	; 0x116 <TimeDisplay+0x3e>
				remain_time[MINUTE_DIG2]--;
 10a:	83 81       	ldd	r24, Z+3	; 0x03
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	83 83       	std	Z+3, r24	; 0x03
				remain_time[MINUTE_DIG1] = 9;
 110:	89 e0       	ldi	r24, 0x09	; 9
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	08 95       	ret
			}
			else
				remain_time[MINUTE_DIG1]--;	
 116:	81 50       	subi	r24, 0x01	; 1
 118:	82 83       	std	Z+2, r24	; 0x02
 11a:	08 95       	ret
		}
		else
			remain_time[SECONDS_DIG2]--;		
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	81 83       	std	Z+1, r24	; 0x01
 120:	08 95       	ret
	}
	else
		remain_time[SECONDS_DIG1]--;
 122:	81 50       	subi	r24, 0x01	; 1
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <__vector_11>:


uint8_t *remain_time;


ISR(TIMER1_COMPA_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31

	TimeDisplay();
 14a:	0e 94 6c 00 	call	0xd8	; 0xd8 <TimeDisplay>
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <CountDown>:
	else
		remain_time[SECONDS_DIG1]--;
	
}

void CountDown(uint8_t d_num[]){
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24

	remain_time = d_num;
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uint16_t hold_timer = 0;
	uint32_t *p;
	uint8_t reset_signal = RESET_OFF;


	TCNT1 = 0;	
 182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 186:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1 << OCF1A;
 18a:	86 b3       	in	r24, 0x16	; 22
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	86 bb       	out	0x16, r24	; 22
	SREG |= INTERRUPT_START;
 190:	8f b7       	in	r24, 0x3f	; 63
 192:	80 68       	ori	r24, 0x80	; 128
 194:	8f bf       	out	0x3f, r24	; 63
	//sei();
	

	while (PIND & START_SWITCH)
 196:	11 c0       	rjmp	.+34     	; 0x1ba <CountDown+0x4a>
	{
		if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0){
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <CountDown+0x44>
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	81 11       	cpse	r24, r1
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <CountDown+0x44>
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	81 11       	cpse	r24, r1
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <CountDown+0x44>
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	81 11       	cpse	r24, r1
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <CountDown+0x44>
			cli();
 1b0:	f8 94       	cli
			break;
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <CountDown+0x4e>
		}
		
		DynamicDrive(d_num);
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
	TIFR1 |= 1 << OCF1A;
	SREG |= INTERRUPT_START;
	//sei();
	

	while (PIND & START_SWITCH)
 1ba:	4c 99       	sbic	0x09, 4	; 9
 1bc:	ed cf       	rjmp	.-38     	; 0x198 <CountDown+0x28>
		DynamicDrive(d_num);
	}

	for(;;){

		if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0){
 1be:	88 81       	ld	r24, Y
 1c0:	81 11       	cpse	r24, r1
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <CountDown+0x6a>
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	81 11       	cpse	r24, r1
 1c8:	08 c0       	rjmp	.+16     	; 0x1da <CountDown+0x6a>
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	81 11       	cpse	r24, r1
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <CountDown+0x6a>
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	81 11       	cpse	r24, r1
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <CountDown+0x6a>
			cli();
 1d6:	f8 94       	cli
			break;
 1d8:	43 c0       	rjmp	.+134    	; 0x260 <CountDown+0xf0>
		}

		if (PIND & START_SWITCH){
 1da:	4c 9b       	sbis	0x09, 4	; 9
 1dc:	3d c0       	rjmp	.+122    	; 0x258 <CountDown+0xe8>
			
			cli();
 1de:	f8 94       	cli
			hold_timer = TCNT1;
 1e0:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1e4:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
			
			while (PIND & START_SWITCH){
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <CountDown+0x80>
				DynamicDrive(d_num);
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
		if (PIND & START_SWITCH){
			
			cli();
			hold_timer = TCNT1;
			
			while (PIND & START_SWITCH){
 1f0:	4c 99       	sbic	0x09, 4	; 9
 1f2:	fb cf       	rjmp	.-10     	; 0x1ea <CountDown+0x7a>
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <CountDown+0x8c>
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
				DynamicDrive(d_num);
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
			
			while (PIND & START_SWITCH){
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
 1fc:	4c 99       	sbic	0x09, 4	; 9
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <CountDown+0x94>
 200:	4a 9b       	sbis	0x09, 2	; 9
 202:	f9 cf       	rjmp	.-14     	; 0x1f6 <CountDown+0x86>
				DynamicDrive(d_num);
			}
			
			if(PIND & MINUTE_SWITCH){
 204:	4a 9b       	sbis	0x09, 2	; 9
 206:	0c c0       	rjmp	.+24     	; 0x220 <CountDown+0xb0>
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
 208:	18 82       	st	Y, r1
 20a:	19 82       	std	Y+1, r1	; 0x01
 20c:	1a 82       	std	Y+2, r1	; 0x02
 20e:	1b 82       	std	Y+3, r1	; 0x03
				
				while (PIND & MINUTE_SWITCH){
 210:	03 c0       	rjmp	.+6      	; 0x218 <CountDown+0xa8>
					DynamicDrive(d_num);
 212:	ce 01       	movw	r24, r28
 214:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
			if(PIND & MINUTE_SWITCH){
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
				
				while (PIND & MINUTE_SWITCH){
 218:	4a 99       	sbic	0x09, 2	; 9
 21a:	fb cf       	rjmp	.-10     	; 0x212 <CountDown+0xa2>
					DynamicDrive(d_num);
				}				
				
				reset_signal = RESET_ON;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	20 c0       	rjmp	.+64     	; 0x260 <CountDown+0xf0>
				
				break;
			}
			
			TCNT1 = hold_timer;
 220:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 224:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 |= 1 << OCF1A;
 228:	86 b3       	in	r24, 0x16	; 22
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	86 bb       	out	0x16, r24	; 22
			//sei();	
			SREG |= INTERRUPT_START;
 22e:	8f b7       	in	r24, 0x3f	; 63
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8f bf       	out	0x3f, r24	; 63
			
			while (PIND & START_SWITCH)
 234:	0f c0       	rjmp	.+30     	; 0x254 <CountDown+0xe4>
			{
				DynamicDrive(d_num);
 236:	ce 01       	movw	r24, r28
 238:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
				
				if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0)
 23c:	88 81       	ld	r24, Y
 23e:	81 11       	cpse	r24, r1
 240:	09 c0       	rjmp	.+18     	; 0x254 <CountDown+0xe4>
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	81 11       	cpse	r24, r1
 246:	06 c0       	rjmp	.+12     	; 0x254 <CountDown+0xe4>
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	81 11       	cpse	r24, r1
 24c:	03 c0       	rjmp	.+6      	; 0x254 <CountDown+0xe4>
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	88 23       	and	r24, r24
 252:	11 f0       	breq	.+4      	; 0x258 <CountDown+0xe8>
			TCNT1 = hold_timer;
			TIFR1 |= 1 << OCF1A;
			//sei();	
			SREG |= INTERRUPT_START;
			
			while (PIND & START_SWITCH)
 254:	4c 99       	sbic	0x09, 4	; 9
 256:	ef cf       	rjmp	.-34     	; 0x236 <CountDown+0xc6>
				if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0)
					break;
			}			
		}
		
		DynamicDrive(d_num);
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
	}
 25e:	af cf       	rjmp	.-162    	; 0x1be <CountDown+0x4e>


	PORTB = 0x00;
 260:	15 b8       	out	0x05, r1	; 5

	if(reset_signal == RESET_OFF){
 262:	81 11       	cpse	r24, r1
 264:	23 c0       	rjmp	.+70     	; 0x2ac <CountDown+0x13c>
		
		TIMSK1 = B_INTERRUPT_ENABLE;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		
		TCNT1 = 0;
 26c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 270:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIFR1 |= 1 << OCF1A;
 274:	86 b3       	in	r24, 0x16	; 22
 276:	82 60       	ori	r24, 0x02	; 2
 278:	86 bb       	out	0x16, r24	; 22
		SREG |= INTERRUPT_START;
 27a:	8f b7       	in	r24, 0x3f	; 63
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	8f bf       	out	0x3f, r24	; 63
	
		while(PIND & START_SWITCH){
 280:	02 c0       	rjmp	.+4      	; 0x286 <CountDown+0x116>
			DisplayFlick();
 282:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DisplayFlick>
		
		TCNT1 = 0;
		TIFR1 |= 1 << OCF1A;
		SREG |= INTERRUPT_START;
	
		while(PIND & START_SWITCH){
 286:	4c 99       	sbic	0x09, 4	; 9
 288:	fc cf       	rjmp	.-8      	; 0x282 <CountDown+0x112>
			DisplayFlick();
		}
	
		for(;;){
		
			if(PIND & START_SWITCH){
 28a:	4c 9b       	sbis	0x09, 4	; 9
 28c:	04 c0       	rjmp	.+8      	; 0x296 <CountDown+0x126>
				cli();
 28e:	f8 94       	cli
				PORTD = !(PORTD | 0xFF);
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	1b b8       	out	0x0b, r1	; 11
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <CountDown+0x132>
				cli();
				PORTD = !(PORTD | 0xFF);
				break;
			}
	
			DisplayFlick();
 296:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DisplayFlick>
		}
 29a:	f7 cf       	rjmp	.-18     	; 0x28a <CountDown+0x11a>
	
		while(PIND & START_SWITCH){
			DynamicDrive(d_num);
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 2a2:	4c 99       	sbic	0x09, 4	; 9
 2a4:	fb cf       	rjmp	.-10     	; 0x29c <CountDown+0x12c>
			DynamicDrive(d_num);
		}
		
		TIMSK1 = A_INTERRUPT_ENABLE;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	}
	
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <DisplayFlick>:
}


void DisplayFlick(){
	
	PORTC = DISPLAY_DIG4;
 2b6:	8e e0       	ldi	r24, 0x0E	; 14
 2b8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	8f ec       	ldi	r24, 0xCF	; 207
 2bc:	97 e0       	ldi	r25, 0x07	; 7
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <DisplayFlick+0x8>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <DisplayFlick+0xe>
 2c4:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG3;
 2c6:	8d e0       	ldi	r24, 0x0D	; 13
 2c8:	88 b9       	out	0x08, r24	; 8
 2ca:	8f ec       	ldi	r24, 0xCF	; 207
 2cc:	97 e0       	ldi	r25, 0x07	; 7
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <DisplayFlick+0x18>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <DisplayFlick+0x1e>
 2d4:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG2;
 2d6:	8b e0       	ldi	r24, 0x0B	; 11
 2d8:	88 b9       	out	0x08, r24	; 8
 2da:	8f ec       	ldi	r24, 0xCF	; 207
 2dc:	97 e0       	ldi	r25, 0x07	; 7
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <DisplayFlick+0x28>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <DisplayFlick+0x2e>
 2e4:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTC = DISPLAY_DIG1;
 2e6:	87 e0       	ldi	r24, 0x07	; 7
 2e8:	88 b9       	out	0x08, r24	; 8
 2ea:	8f ec       	ldi	r24, 0xCF	; 207
 2ec:	97 e0       	ldi	r25, 0x07	; 7
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <DisplayFlick+0x38>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <DisplayFlick+0x3e>
 2f4:	00 00       	nop
 2f6:	08 95       	ret

000002f8 <DisplaySegment>:
}


void DisplaySegment(uint8_t num){
	
	switch(num){
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	8a 30       	cpi	r24, 0x0A	; 10
 2fc:	91 05       	cpc	r25, r1
 2fe:	18 f5       	brcc	.+70     	; 0x346 <DisplaySegment+0x4e>
 300:	fc 01       	movw	r30, r24
 302:	ec 5c       	subi	r30, 0xCC	; 204
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__tablejump2__>
		case DISPLAY_NUM0:
			PORTB = SEGMENT_NUM0;
 30a:	80 ec       	ldi	r24, 0xC0	; 192
 30c:	85 b9       	out	0x05, r24	; 5
			break;
 30e:	08 95       	ret
		case DISPLAY_NUM1:
			PORTB = SEGMENT_NUM1;
 310:	89 ef       	ldi	r24, 0xF9	; 249
 312:	85 b9       	out	0x05, r24	; 5
			break;
 314:	08 95       	ret
		case DISPLAY_NUM2:
			PORTB = SEGMENT_NUM2;
 316:	84 ea       	ldi	r24, 0xA4	; 164
 318:	85 b9       	out	0x05, r24	; 5
			break;
 31a:	08 95       	ret
		case DISPLAY_NUM3:
			PORTB = SEGMENT_NUM3;
 31c:	80 eb       	ldi	r24, 0xB0	; 176
 31e:	85 b9       	out	0x05, r24	; 5
			break;
 320:	08 95       	ret
		case DISPLAY_NUM4:
			PORTB = SEGMENT_NUM4;
 322:	89 e9       	ldi	r24, 0x99	; 153
 324:	85 b9       	out	0x05, r24	; 5
			break;
 326:	08 95       	ret
		case DISPLAY_NUM5:
			PORTB = SEGMENT_NUM5;
 328:	82 e9       	ldi	r24, 0x92	; 146
 32a:	85 b9       	out	0x05, r24	; 5
			break;
 32c:	08 95       	ret
		case DISPLAY_NUM6:
			PORTB = SEGMENT_NUM6;
 32e:	82 e8       	ldi	r24, 0x82	; 130
 330:	85 b9       	out	0x05, r24	; 5
			break;
 332:	08 95       	ret
		case DISPLAY_NUM7:
			PORTB = SEGMENT_NUM7;
 334:	88 ed       	ldi	r24, 0xD8	; 216
 336:	85 b9       	out	0x05, r24	; 5
			break;
 338:	08 95       	ret
		case DISPLAY_NUM8:
			PORTB = SEGMENT_NUM8;
 33a:	80 e8       	ldi	r24, 0x80	; 128
 33c:	85 b9       	out	0x05, r24	; 5
			break;
 33e:	08 95       	ret
		case DISPLAY_NUM9:
			PORTB = SEGMENT_NUM9;
 340:	80 e9       	ldi	r24, 0x90	; 144
 342:	85 b9       	out	0x05, r24	; 5
			break;
 344:	08 95       	ret
		default:
			PORTB = SEGMENT_ERROR;
 346:	86 e0       	ldi	r24, 0x06	; 6
 348:	85 b9       	out	0x05, r24	; 5
 34a:	08 95       	ret

0000034c <DynamicDrive>:


#include "Display.h"


void DynamicDrive(uint8_t disp[]){
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	ec 01       	movw	r28, r24
	
	PORTB = OFF;
 354:	1f ef       	ldi	r17, 0xFF	; 255
 356:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[SECONDS_DIG1]);
 358:	88 81       	ld	r24, Y
 35a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DisplaySegment>
	PORTC = DISPLAY_DIG4;
 35e:	8e e0       	ldi	r24, 0x0E	; 14
 360:	88 b9       	out	0x08, r24	; 8
 362:	8f ec       	ldi	r24, 0xCF	; 207
 364:	97 e0       	ldi	r25, 0x07	; 7
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <DynamicDrive+0x1a>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <DynamicDrive+0x20>
 36c:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 36e:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[SECONDS_DIG2]);
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DisplaySegment>
	PORTC = DISPLAY_DIG3;
 376:	8d e0       	ldi	r24, 0x0D	; 13
 378:	88 b9       	out	0x08, r24	; 8
 37a:	8f ec       	ldi	r24, 0xCF	; 207
 37c:	97 e0       	ldi	r25, 0x07	; 7
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <DynamicDrive+0x32>
 382:	00 c0       	rjmp	.+0      	; 0x384 <DynamicDrive+0x38>
 384:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 386:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[MINUTE_DIG1]);
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DisplaySegment>
	PORTB ^= 1 << PORTB7;    //Turn on the DP.
 38e:	85 b1       	in	r24, 0x05	; 5
 390:	80 58       	subi	r24, 0x80	; 128
 392:	85 b9       	out	0x05, r24	; 5
	PORTC = DISPLAY_DIG2;
 394:	8b e0       	ldi	r24, 0x0B	; 11
 396:	88 b9       	out	0x08, r24	; 8
 398:	8f ec       	ldi	r24, 0xCF	; 207
 39a:	97 e0       	ldi	r25, 0x07	; 7
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <DynamicDrive+0x50>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <DynamicDrive+0x56>
 3a2:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 3a4:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[MINUTE_DIG2]);
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DisplaySegment>
	PORTC = DISPLAY_DIG1;
 3ac:	87 e0       	ldi	r24, 0x07	; 7
 3ae:	88 b9       	out	0x08, r24	; 8
 3b0:	8f ec       	ldi	r24, 0xCF	; 207
 3b2:	97 e0       	ldi	r25, 0x07	; 7
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <DynamicDrive+0x68>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <DynamicDrive+0x6e>
 3ba:	00 00       	nop
	_delay_ms(LIGHT_TIME);
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	08 95       	ret

000003c4 <main>:
#include "Display.h"
#include "Count.h"


int main(void)
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x6>
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <main+0x8>
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8_t display_num[4] = {0,0,0,0};
 3d0:	19 82       	std	Y+1, r1	; 0x01
 3d2:	1a 82       	std	Y+2, r1	; 0x02
 3d4:	1b 82       	std	Y+3, r1	; 0x03
 3d6:	1c 82       	std	Y+4, r1	; 0x04
		
		
	DDRB = 0b11111111;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00101111;
 3dc:	8f e2       	ldi	r24, 0x2F	; 47
 3de:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10000000;
 3e0:	80 e8       	ldi	r24, 0x80	; 128
 3e2:	8a b9       	out	0x0a, r24	; 10
	

	TCCR1A = 0b00000000;
 3e4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = CTC_OPERATION;
 3e8:	8c e0       	ldi	r24, 0x0C	; 12
 3ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIMSK1 = A_INTERRUPT_ENABLE;
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	OCR1A = A_INTERRUPT_TIME;
 3f4:	81 e1       	ldi	r24, 0x11	; 17
 3f6:	9a e7       	ldi	r25, 0x7A	; 122
 3f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = B_INTERRUPT_TIME;
 400:	88 e0       	ldi	r24, 0x08	; 8
 402:	9d e3       	ldi	r25, 0x3D	; 61
 404:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 408:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	cli();
 40c:	f8 94       	cli

	for(;;)
	{
		if(PIND & (1 << PIND2)){
 40e:	4a 9b       	sbis	0x09, 2	; 9
 410:	0c c0       	rjmp	.+24     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			TCCR1B = STANDARD_OPERATION;
 412:	01 e8       	ldi	r16, 0x81	; 129
 414:	10 e0       	ldi	r17, 0x00	; 0
 416:	84 e0       	ldi	r24, 0x04	; 4
 418:	f8 01       	movw	r30, r16
 41a:	80 83       	st	Z, r24
			SetMinutes(display_num);
 41c:	ce 01       	movw	r24, r28
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	0e 94 3f 02 	call	0x47e	; 0x47e <SetMinutes>
			TCCR1B = CTC_OPERATION;
 424:	8c e0       	ldi	r24, 0x0C	; 12
 426:	f8 01       	movw	r30, r16
 428:	80 83       	st	Z, r24
		}
		
		if(PIND & (1 << PIND3)){
 42a:	4b 9b       	sbis	0x09, 3	; 9
 42c:	04 c0       	rjmp	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			SetSeconds(display_num);
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	0e 94 ab 02 	call	0x556	; 0x556 <SetSeconds>
		}
		
		if(PIND & (1 << PIND4)){
 436:	4c 9b       	sbis	0x09, 4	; 9
 438:	04 c0       	rjmp	.+8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			CountDown(display_num);
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 b8 00 	call	0x170	; 0x170 <CountDown>
		}
		
		DynamicDrive(display_num);
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
	}
 44a:	e1 cf       	rjmp	.-62     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>

0000044c <MinutesCounter>:
 *  Author: Kazu-SK
 */ 

#include "SetTimer.h"

void MinutesCounter(uint8_t d_num[]){
 44c:	fc 01       	movw	r30, r24
	
	if(d_num[MINUTE_DIG1] != 9)
 44e:	92 81       	ldd	r25, Z+2	; 0x02
 450:	99 30       	cpi	r25, 0x09	; 9
 452:	19 f0       	breq	.+6      	; 0x45a <MinutesCounter+0xe>
		d_num[MINUTE_DIG1]++;
 454:	9f 5f       	subi	r25, 0xFF	; 255
 456:	92 83       	std	Z+2, r25	; 0x02
 458:	08 95       	ret
	else{
		d_num[MINUTE_DIG1] = 0;
 45a:	12 82       	std	Z+2, r1	; 0x02
		
		if(d_num[MINUTE_DIG2] != 9)
 45c:	83 81       	ldd	r24, Z+3	; 0x03
 45e:	89 30       	cpi	r24, 0x09	; 9
 460:	19 f0       	breq	.+6      	; 0x468 <MinutesCounter+0x1c>
			d_num[MINUTE_DIG2]++;
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	83 83       	std	Z+3, r24	; 0x03
 466:	08 95       	ret
		else
			d_num[MINUTE_DIG2] = 0;
 468:	13 82       	std	Z+3, r1	; 0x03
 46a:	08 95       	ret

0000046c <SecondsCounter>:
	}
}

void SecondsCounter(uint8_t d_num[]){
 46c:	fc 01       	movw	r30, r24

	if(d_num[SECONDS_DIG2] != 5)
 46e:	91 81       	ldd	r25, Z+1	; 0x01
 470:	95 30       	cpi	r25, 0x05	; 5
 472:	19 f0       	breq	.+6      	; 0x47a <SecondsCounter+0xe>
		d_num[SECONDS_DIG2]++;
 474:	9f 5f       	subi	r25, 0xFF	; 255
 476:	91 83       	std	Z+1, r25	; 0x01
 478:	08 95       	ret
	else
		d_num[SECONDS_DIG2] = 0;
 47a:	11 82       	std	Z+1, r1	; 0x01
 47c:	08 95       	ret

0000047e <SetMinutes>:
}


void SetMinutes(uint8_t d_num[]){
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	ec 01       	movw	r28, r24
	uint32_t *p;
	float pulse_count = 0.0;
	float push_time = 0.0;
	

	MinutesCounter(d_num);
 484:	0e 94 26 02 	call	0x44c	; 0x44c <MinutesCounter>

	TCNT1 = 0;
 488:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 48c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(PIND & MINUTE_SWITCH){
 490:	5d c0       	rjmp	.+186    	; 0x54c <SetMinutes+0xce>
		DynamicDrive(d_num);
 492:	ce 01       	movw	r24, r28
 494:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
		
		pulse_count = TCNT1;
 498:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 49c:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 3a 03 	call	0x674	; 0x674 <__floatunsisf>
		push_time = pulse_count * M_CYCLE / F;
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	40 e8       	ldi	r20, 0x80	; 128
 4ae:	53 e4       	ldi	r21, 0x43	; 67
 4b0:	0e 94 cd 03 	call	0x79a	; 0x79a <__mulsf3>
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	34 e2       	ldi	r19, 0x24	; 36
 4b8:	44 ef       	ldi	r20, 0xF4	; 244
 4ba:	5a e4       	ldi	r21, 0x4A	; 74
 4bc:	0e 94 c8 02 	call	0x590	; 0x590 <__divsf3>
		
		if(push_time >= LONG_PLESS_TIME){
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	40 e8       	ldi	r20, 0x80	; 128
 4c6:	5f e3       	ldi	r21, 0x3F	; 63
 4c8:	0e 94 c8 03 	call	0x790	; 0x790 <__gesf2>
 4cc:	88 23       	and	r24, r24
 4ce:	7c f1       	brlt	.+94     	; 0x52e <SetMinutes+0xb0>
			
			TCNT1 = 0;
 4d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 4d8:	26 c0       	rjmp	.+76     	; 0x526 <SetMinutes+0xa8>
				
				pulse_count = TCNT1;
 4da:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4de:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 3a 03 	call	0x674	; 0x674 <__floatunsisf>
				push_time = pulse_count * M_CYCLE / F;
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e8       	ldi	r20, 0x80	; 128
 4f0:	53 e4       	ldi	r21, 0x43	; 67
 4f2:	0e 94 cd 03 	call	0x79a	; 0x79a <__mulsf3>
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	34 e2       	ldi	r19, 0x24	; 36
 4fa:	44 ef       	ldi	r20, 0xF4	; 244
 4fc:	5a e4       	ldi	r21, 0x4A	; 74
 4fe:	0e 94 c8 02 	call	0x590	; 0x590 <__divsf3>
				
				if (push_time >= LONG_PLESS_COUNTER)
 502:	2d ec       	ldi	r18, 0xCD	; 205
 504:	3c ec       	ldi	r19, 0xCC	; 204
 506:	4c ec       	ldi	r20, 0xCC	; 204
 508:	5d e3       	ldi	r21, 0x3D	; 61
 50a:	0e 94 c8 03 	call	0x790	; 0x790 <__gesf2>
 50e:	88 23       	and	r24, r24
 510:	3c f0       	brlt	.+14     	; 0x520 <SetMinutes+0xa2>
				{
					MinutesCounter(d_num);
 512:	ce 01       	movw	r24, r28
 514:	0e 94 26 02 	call	0x44c	; 0x44c <MinutesCounter>
					TCNT1 = 0;
 518:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 51c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				}
				
				DynamicDrive(d_num);
 520:	ce 01       	movw	r24, r28
 522:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
		
		if(push_time >= LONG_PLESS_TIME){
			
			TCNT1 = 0;
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 526:	4a 9b       	sbis	0x09, 2	; 9
 528:	02 c0       	rjmp	.+4      	; 0x52e <SetMinutes+0xb0>
 52a:	4b 9b       	sbis	0x09, 3	; 9
 52c:	d6 cf       	rjmp	.-84     	; 0x4da <SetMinutes+0x5c>
				
				DynamicDrive(d_num);
			}
		}
		
		if(PIND & SECONDS_SWITCH){
 52e:	4b 9b       	sbis	0x09, 3	; 9
 530:	0d c0       	rjmp	.+26     	; 0x54c <SetMinutes+0xce>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 532:	18 82       	st	Y, r1
 534:	19 82       	std	Y+1, r1	; 0x01
 536:	1a 82       	std	Y+2, r1	; 0x02
 538:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 53a:	03 c0       	rjmp	.+6      	; 0x542 <SetMinutes+0xc4>
				DynamicDrive(d_num);
 53c:	ce 01       	movw	r24, r28
 53e:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
		
		if(PIND & SECONDS_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 542:	4b 99       	sbic	0x09, 3	; 9
 544:	fb cf       	rjmp	.-10     	; 0x53c <SetMinutes+0xbe>
 546:	4a 99       	sbic	0x09, 2	; 9
 548:	f9 cf       	rjmp	.-14     	; 0x53c <SetMinutes+0xbe>
 54a:	02 c0       	rjmp	.+4      	; 0x550 <SetMinutes+0xd2>
	

	MinutesCounter(d_num);

	TCNT1 = 0;
	while(PIND & MINUTE_SWITCH){
 54c:	4a 99       	sbic	0x09, 2	; 9
 54e:	a1 cf       	rjmp	.-190    	; 0x492 <SetMinutes+0x14>
			
			break;
		}
	}
	
}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <SetSeconds>:

void SetSeconds(uint8_t d_num[]){
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	ec 01       	movw	r28, r24
	
	uint32_t *p;
	
	
	SecondsCounter(d_num);
 55c:	0e 94 36 02 	call	0x46c	; 0x46c <SecondsCounter>
	
	while(PIND & SECONDS_SWITCH){
 560:	12 c0       	rjmp	.+36     	; 0x586 <SetSeconds+0x30>
		DynamicDrive(d_num);
 562:	ce 01       	movw	r24, r28
 564:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
 568:	4a 9b       	sbis	0x09, 2	; 9
 56a:	0d c0       	rjmp	.+26     	; 0x586 <SetSeconds+0x30>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 56c:	18 82       	st	Y, r1
 56e:	19 82       	std	Y+1, r1	; 0x01
 570:	1a 82       	std	Y+2, r1	; 0x02
 572:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 574:	03 c0       	rjmp	.+6      	; 0x57c <SetSeconds+0x26>
				DynamicDrive(d_num);
 576:	ce 01       	movw	r24, r28
 578:	0e 94 a6 01 	call	0x34c	; 0x34c <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 57c:	4b 99       	sbic	0x09, 3	; 9
 57e:	fb cf       	rjmp	.-10     	; 0x576 <SetSeconds+0x20>
 580:	4a 99       	sbic	0x09, 2	; 9
 582:	f9 cf       	rjmp	.-14     	; 0x576 <SetSeconds+0x20>
 584:	02 c0       	rjmp	.+4      	; 0x58a <SetSeconds+0x34>
	uint32_t *p;
	
	
	SecondsCounter(d_num);
	
	while(PIND & SECONDS_SWITCH){
 586:	4b 99       	sbic	0x09, 3	; 9
 588:	ec cf       	rjmp	.-40     	; 0x562 <SetSeconds+0xc>
			
			break;
		}
	}
	
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <__divsf3>:
 590:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__divsf3x>
 594:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_round>
 598:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_pscB>
 59c:	58 f0       	brcs	.+22     	; 0x5b4 <__divsf3+0x24>
 59e:	0e 94 80 03 	call	0x700	; 0x700 <__fp_pscA>
 5a2:	40 f0       	brcs	.+16     	; 0x5b4 <__divsf3+0x24>
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <__divsf3+0x20>
 5a6:	5f 3f       	cpi	r21, 0xFF	; 255
 5a8:	29 f0       	breq	.+10     	; 0x5b4 <__divsf3+0x24>
 5aa:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_inf>
 5ae:	51 11       	cpse	r21, r1
 5b0:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_szero>
 5b4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_nan>

000005b8 <__divsf3x>:
 5b8:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_split3>
 5bc:	68 f3       	brcs	.-38     	; 0x598 <__divsf3+0x8>

000005be <__divsf3_pse>:
 5be:	99 23       	and	r25, r25
 5c0:	b1 f3       	breq	.-20     	; 0x5ae <__divsf3+0x1e>
 5c2:	55 23       	and	r21, r21
 5c4:	91 f3       	breq	.-28     	; 0x5aa <__divsf3+0x1a>
 5c6:	95 1b       	sub	r25, r21
 5c8:	55 0b       	sbc	r21, r21
 5ca:	bb 27       	eor	r27, r27
 5cc:	aa 27       	eor	r26, r26
 5ce:	62 17       	cp	r22, r18
 5d0:	73 07       	cpc	r23, r19
 5d2:	84 07       	cpc	r24, r20
 5d4:	38 f0       	brcs	.+14     	; 0x5e4 <__divsf3_pse+0x26>
 5d6:	9f 5f       	subi	r25, 0xFF	; 255
 5d8:	5f 4f       	sbci	r21, 0xFF	; 255
 5da:	22 0f       	add	r18, r18
 5dc:	33 1f       	adc	r19, r19
 5de:	44 1f       	adc	r20, r20
 5e0:	aa 1f       	adc	r26, r26
 5e2:	a9 f3       	breq	.-22     	; 0x5ce <__divsf3_pse+0x10>
 5e4:	35 d0       	rcall	.+106    	; 0x650 <__divsf3_pse+0x92>
 5e6:	0e 2e       	mov	r0, r30
 5e8:	3a f0       	brmi	.+14     	; 0x5f8 <__divsf3_pse+0x3a>
 5ea:	e0 e8       	ldi	r30, 0x80	; 128
 5ec:	32 d0       	rcall	.+100    	; 0x652 <__divsf3_pse+0x94>
 5ee:	91 50       	subi	r25, 0x01	; 1
 5f0:	50 40       	sbci	r21, 0x00	; 0
 5f2:	e6 95       	lsr	r30
 5f4:	00 1c       	adc	r0, r0
 5f6:	ca f7       	brpl	.-14     	; 0x5ea <__divsf3_pse+0x2c>
 5f8:	2b d0       	rcall	.+86     	; 0x650 <__divsf3_pse+0x92>
 5fa:	fe 2f       	mov	r31, r30
 5fc:	29 d0       	rcall	.+82     	; 0x650 <__divsf3_pse+0x92>
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	88 1f       	adc	r24, r24
 604:	bb 1f       	adc	r27, r27
 606:	26 17       	cp	r18, r22
 608:	37 07       	cpc	r19, r23
 60a:	48 07       	cpc	r20, r24
 60c:	ab 07       	cpc	r26, r27
 60e:	b0 e8       	ldi	r27, 0x80	; 128
 610:	09 f0       	breq	.+2      	; 0x614 <__divsf3_pse+0x56>
 612:	bb 0b       	sbc	r27, r27
 614:	80 2d       	mov	r24, r0
 616:	bf 01       	movw	r22, r30
 618:	ff 27       	eor	r31, r31
 61a:	93 58       	subi	r25, 0x83	; 131
 61c:	5f 4f       	sbci	r21, 0xFF	; 255
 61e:	3a f0       	brmi	.+14     	; 0x62e <__divsf3_pse+0x70>
 620:	9e 3f       	cpi	r25, 0xFE	; 254
 622:	51 05       	cpc	r21, r1
 624:	78 f0       	brcs	.+30     	; 0x644 <__divsf3_pse+0x86>
 626:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_inf>
 62a:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_szero>
 62e:	5f 3f       	cpi	r21, 0xFF	; 255
 630:	e4 f3       	brlt	.-8      	; 0x62a <__divsf3_pse+0x6c>
 632:	98 3e       	cpi	r25, 0xE8	; 232
 634:	d4 f3       	brlt	.-12     	; 0x62a <__divsf3_pse+0x6c>
 636:	86 95       	lsr	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b7 95       	ror	r27
 63e:	f7 95       	ror	r31
 640:	9f 5f       	subi	r25, 0xFF	; 255
 642:	c9 f7       	brne	.-14     	; 0x636 <__divsf3_pse+0x78>
 644:	88 0f       	add	r24, r24
 646:	91 1d       	adc	r25, r1
 648:	96 95       	lsr	r25
 64a:	87 95       	ror	r24
 64c:	97 f9       	bld	r25, 7
 64e:	08 95       	ret
 650:	e1 e0       	ldi	r30, 0x01	; 1
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	bb 1f       	adc	r27, r27
 65a:	62 17       	cp	r22, r18
 65c:	73 07       	cpc	r23, r19
 65e:	84 07       	cpc	r24, r20
 660:	ba 07       	cpc	r27, r26
 662:	20 f0       	brcs	.+8      	; 0x66c <__divsf3_pse+0xae>
 664:	62 1b       	sub	r22, r18
 666:	73 0b       	sbc	r23, r19
 668:	84 0b       	sbc	r24, r20
 66a:	ba 0b       	sbc	r27, r26
 66c:	ee 1f       	adc	r30, r30
 66e:	88 f7       	brcc	.-30     	; 0x652 <__divsf3_pse+0x94>
 670:	e0 95       	com	r30
 672:	08 95       	ret

00000674 <__floatunsisf>:
 674:	e8 94       	clt
 676:	09 c0       	rjmp	.+18     	; 0x68a <__floatsisf+0x12>

00000678 <__floatsisf>:
 678:	97 fb       	bst	r25, 7
 67a:	3e f4       	brtc	.+14     	; 0x68a <__floatsisf+0x12>
 67c:	90 95       	com	r25
 67e:	80 95       	com	r24
 680:	70 95       	com	r23
 682:	61 95       	neg	r22
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	8f 4f       	sbci	r24, 0xFF	; 255
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	99 23       	and	r25, r25
 68c:	a9 f0       	breq	.+42     	; 0x6b8 <__floatsisf+0x40>
 68e:	f9 2f       	mov	r31, r25
 690:	96 e9       	ldi	r25, 0x96	; 150
 692:	bb 27       	eor	r27, r27
 694:	93 95       	inc	r25
 696:	f6 95       	lsr	r31
 698:	87 95       	ror	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f1 11       	cpse	r31, r1
 6a2:	f8 cf       	rjmp	.-16     	; 0x694 <__floatsisf+0x1c>
 6a4:	fa f4       	brpl	.+62     	; 0x6e4 <__floatsisf+0x6c>
 6a6:	bb 0f       	add	r27, r27
 6a8:	11 f4       	brne	.+4      	; 0x6ae <__floatsisf+0x36>
 6aa:	60 ff       	sbrs	r22, 0
 6ac:	1b c0       	rjmp	.+54     	; 0x6e4 <__floatsisf+0x6c>
 6ae:	6f 5f       	subi	r22, 0xFF	; 255
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	16 c0       	rjmp	.+44     	; 0x6e4 <__floatsisf+0x6c>
 6b8:	88 23       	and	r24, r24
 6ba:	11 f0       	breq	.+4      	; 0x6c0 <__floatsisf+0x48>
 6bc:	96 e9       	ldi	r25, 0x96	; 150
 6be:	11 c0       	rjmp	.+34     	; 0x6e2 <__floatsisf+0x6a>
 6c0:	77 23       	and	r23, r23
 6c2:	21 f0       	breq	.+8      	; 0x6cc <__floatsisf+0x54>
 6c4:	9e e8       	ldi	r25, 0x8E	; 142
 6c6:	87 2f       	mov	r24, r23
 6c8:	76 2f       	mov	r23, r22
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <__floatsisf+0x5e>
 6cc:	66 23       	and	r22, r22
 6ce:	71 f0       	breq	.+28     	; 0x6ec <__floatsisf+0x74>
 6d0:	96 e8       	ldi	r25, 0x86	; 134
 6d2:	86 2f       	mov	r24, r22
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	2a f0       	brmi	.+10     	; 0x6e4 <__floatsisf+0x6c>
 6da:	9a 95       	dec	r25
 6dc:	66 0f       	add	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	88 1f       	adc	r24, r24
 6e2:	da f7       	brpl	.-10     	; 0x6da <__floatsisf+0x62>
 6e4:	88 0f       	add	r24, r24
 6e6:	96 95       	lsr	r25
 6e8:	87 95       	ror	r24
 6ea:	97 f9       	bld	r25, 7
 6ec:	08 95       	ret

000006ee <__fp_inf>:
 6ee:	97 f9       	bld	r25, 7
 6f0:	9f 67       	ori	r25, 0x7F	; 127
 6f2:	80 e8       	ldi	r24, 0x80	; 128
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	08 95       	ret

000006fa <__fp_nan>:
 6fa:	9f ef       	ldi	r25, 0xFF	; 255
 6fc:	80 ec       	ldi	r24, 0xC0	; 192
 6fe:	08 95       	ret

00000700 <__fp_pscA>:
 700:	00 24       	eor	r0, r0
 702:	0a 94       	dec	r0
 704:	16 16       	cp	r1, r22
 706:	17 06       	cpc	r1, r23
 708:	18 06       	cpc	r1, r24
 70a:	09 06       	cpc	r0, r25
 70c:	08 95       	ret

0000070e <__fp_pscB>:
 70e:	00 24       	eor	r0, r0
 710:	0a 94       	dec	r0
 712:	12 16       	cp	r1, r18
 714:	13 06       	cpc	r1, r19
 716:	14 06       	cpc	r1, r20
 718:	05 06       	cpc	r0, r21
 71a:	08 95       	ret

0000071c <__fp_round>:
 71c:	09 2e       	mov	r0, r25
 71e:	03 94       	inc	r0
 720:	00 0c       	add	r0, r0
 722:	11 f4       	brne	.+4      	; 0x728 <__fp_round+0xc>
 724:	88 23       	and	r24, r24
 726:	52 f0       	brmi	.+20     	; 0x73c <__fp_round+0x20>
 728:	bb 0f       	add	r27, r27
 72a:	40 f4       	brcc	.+16     	; 0x73c <__fp_round+0x20>
 72c:	bf 2b       	or	r27, r31
 72e:	11 f4       	brne	.+4      	; 0x734 <__fp_round+0x18>
 730:	60 ff       	sbrs	r22, 0
 732:	04 c0       	rjmp	.+8      	; 0x73c <__fp_round+0x20>
 734:	6f 5f       	subi	r22, 0xFF	; 255
 736:	7f 4f       	sbci	r23, 0xFF	; 255
 738:	8f 4f       	sbci	r24, 0xFF	; 255
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	08 95       	ret

0000073e <__fp_split3>:
 73e:	57 fd       	sbrc	r21, 7
 740:	90 58       	subi	r25, 0x80	; 128
 742:	44 0f       	add	r20, r20
 744:	55 1f       	adc	r21, r21
 746:	59 f0       	breq	.+22     	; 0x75e <__fp_splitA+0x10>
 748:	5f 3f       	cpi	r21, 0xFF	; 255
 74a:	71 f0       	breq	.+28     	; 0x768 <__fp_splitA+0x1a>
 74c:	47 95       	ror	r20

0000074e <__fp_splitA>:
 74e:	88 0f       	add	r24, r24
 750:	97 fb       	bst	r25, 7
 752:	99 1f       	adc	r25, r25
 754:	61 f0       	breq	.+24     	; 0x76e <__fp_splitA+0x20>
 756:	9f 3f       	cpi	r25, 0xFF	; 255
 758:	79 f0       	breq	.+30     	; 0x778 <__fp_splitA+0x2a>
 75a:	87 95       	ror	r24
 75c:	08 95       	ret
 75e:	12 16       	cp	r1, r18
 760:	13 06       	cpc	r1, r19
 762:	14 06       	cpc	r1, r20
 764:	55 1f       	adc	r21, r21
 766:	f2 cf       	rjmp	.-28     	; 0x74c <__fp_split3+0xe>
 768:	46 95       	lsr	r20
 76a:	f1 df       	rcall	.-30     	; 0x74e <__fp_splitA>
 76c:	08 c0       	rjmp	.+16     	; 0x77e <__fp_splitA+0x30>
 76e:	16 16       	cp	r1, r22
 770:	17 06       	cpc	r1, r23
 772:	18 06       	cpc	r1, r24
 774:	99 1f       	adc	r25, r25
 776:	f1 cf       	rjmp	.-30     	; 0x75a <__fp_splitA+0xc>
 778:	86 95       	lsr	r24
 77a:	71 05       	cpc	r23, r1
 77c:	61 05       	cpc	r22, r1
 77e:	08 94       	sec
 780:	08 95       	ret

00000782 <__fp_zero>:
 782:	e8 94       	clt

00000784 <__fp_szero>:
 784:	bb 27       	eor	r27, r27
 786:	66 27       	eor	r22, r22
 788:	77 27       	eor	r23, r23
 78a:	cb 01       	movw	r24, r22
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret

00000790 <__gesf2>:
 790:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_cmp>
 794:	08 f4       	brcc	.+2      	; 0x798 <__gesf2+0x8>
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	08 95       	ret

0000079a <__mulsf3>:
 79a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__mulsf3x>
 79e:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_round>
 7a2:	0e 94 80 03 	call	0x700	; 0x700 <__fp_pscA>
 7a6:	38 f0       	brcs	.+14     	; 0x7b6 <__mulsf3+0x1c>
 7a8:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_pscB>
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__mulsf3+0x1c>
 7ae:	95 23       	and	r25, r21
 7b0:	11 f0       	breq	.+4      	; 0x7b6 <__mulsf3+0x1c>
 7b2:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_inf>
 7b6:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_nan>
 7ba:	11 24       	eor	r1, r1
 7bc:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_szero>

000007c0 <__mulsf3x>:
 7c0:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_split3>
 7c4:	70 f3       	brcs	.-36     	; 0x7a2 <__mulsf3+0x8>

000007c6 <__mulsf3_pse>:
 7c6:	95 9f       	mul	r25, r21
 7c8:	c1 f3       	breq	.-16     	; 0x7ba <__mulsf3+0x20>
 7ca:	95 0f       	add	r25, r21
 7cc:	50 e0       	ldi	r21, 0x00	; 0
 7ce:	55 1f       	adc	r21, r21
 7d0:	62 9f       	mul	r22, r18
 7d2:	f0 01       	movw	r30, r0
 7d4:	72 9f       	mul	r23, r18
 7d6:	bb 27       	eor	r27, r27
 7d8:	f0 0d       	add	r31, r0
 7da:	b1 1d       	adc	r27, r1
 7dc:	63 9f       	mul	r22, r19
 7de:	aa 27       	eor	r26, r26
 7e0:	f0 0d       	add	r31, r0
 7e2:	b1 1d       	adc	r27, r1
 7e4:	aa 1f       	adc	r26, r26
 7e6:	64 9f       	mul	r22, r20
 7e8:	66 27       	eor	r22, r22
 7ea:	b0 0d       	add	r27, r0
 7ec:	a1 1d       	adc	r26, r1
 7ee:	66 1f       	adc	r22, r22
 7f0:	82 9f       	mul	r24, r18
 7f2:	22 27       	eor	r18, r18
 7f4:	b0 0d       	add	r27, r0
 7f6:	a1 1d       	adc	r26, r1
 7f8:	62 1f       	adc	r22, r18
 7fa:	73 9f       	mul	r23, r19
 7fc:	b0 0d       	add	r27, r0
 7fe:	a1 1d       	adc	r26, r1
 800:	62 1f       	adc	r22, r18
 802:	83 9f       	mul	r24, r19
 804:	a0 0d       	add	r26, r0
 806:	61 1d       	adc	r22, r1
 808:	22 1f       	adc	r18, r18
 80a:	74 9f       	mul	r23, r20
 80c:	33 27       	eor	r19, r19
 80e:	a0 0d       	add	r26, r0
 810:	61 1d       	adc	r22, r1
 812:	23 1f       	adc	r18, r19
 814:	84 9f       	mul	r24, r20
 816:	60 0d       	add	r22, r0
 818:	21 1d       	adc	r18, r1
 81a:	82 2f       	mov	r24, r18
 81c:	76 2f       	mov	r23, r22
 81e:	6a 2f       	mov	r22, r26
 820:	11 24       	eor	r1, r1
 822:	9f 57       	subi	r25, 0x7F	; 127
 824:	50 40       	sbci	r21, 0x00	; 0
 826:	9a f0       	brmi	.+38     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 828:	f1 f0       	breq	.+60     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 82a:	88 23       	and	r24, r24
 82c:	4a f0       	brmi	.+18     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	bb 1f       	adc	r27, r27
 834:	66 1f       	adc	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	91 50       	subi	r25, 0x01	; 1
 83c:	50 40       	sbci	r21, 0x00	; 0
 83e:	a9 f7       	brne	.-22     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 840:	9e 3f       	cpi	r25, 0xFE	; 254
 842:	51 05       	cpc	r21, r1
 844:	80 f0       	brcs	.+32     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 846:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_inf>
 84a:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_szero>
 84e:	5f 3f       	cpi	r21, 0xFF	; 255
 850:	e4 f3       	brlt	.-8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 852:	98 3e       	cpi	r25, 0xE8	; 232
 854:	d4 f3       	brlt	.-12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 856:	86 95       	lsr	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b7 95       	ror	r27
 85e:	f7 95       	ror	r31
 860:	e7 95       	ror	r30
 862:	9f 5f       	subi	r25, 0xFF	; 255
 864:	c1 f7       	brne	.-16     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 866:	fe 2b       	or	r31, r30
 868:	88 0f       	add	r24, r24
 86a:	91 1d       	adc	r25, r1
 86c:	96 95       	lsr	r25
 86e:	87 95       	ror	r24
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret

00000874 <__fp_cmp>:
 874:	99 0f       	add	r25, r25
 876:	00 08       	sbc	r0, r0
 878:	55 0f       	add	r21, r21
 87a:	aa 0b       	sbc	r26, r26
 87c:	e0 e8       	ldi	r30, 0x80	; 128
 87e:	fe ef       	ldi	r31, 0xFE	; 254
 880:	16 16       	cp	r1, r22
 882:	17 06       	cpc	r1, r23
 884:	e8 07       	cpc	r30, r24
 886:	f9 07       	cpc	r31, r25
 888:	c0 f0       	brcs	.+48     	; 0x8ba <__fp_cmp+0x46>
 88a:	12 16       	cp	r1, r18
 88c:	13 06       	cpc	r1, r19
 88e:	e4 07       	cpc	r30, r20
 890:	f5 07       	cpc	r31, r21
 892:	98 f0       	brcs	.+38     	; 0x8ba <__fp_cmp+0x46>
 894:	62 1b       	sub	r22, r18
 896:	73 0b       	sbc	r23, r19
 898:	84 0b       	sbc	r24, r20
 89a:	95 0b       	sbc	r25, r21
 89c:	39 f4       	brne	.+14     	; 0x8ac <__fp_cmp+0x38>
 89e:	0a 26       	eor	r0, r26
 8a0:	61 f0       	breq	.+24     	; 0x8ba <__fp_cmp+0x46>
 8a2:	23 2b       	or	r18, r19
 8a4:	24 2b       	or	r18, r20
 8a6:	25 2b       	or	r18, r21
 8a8:	21 f4       	brne	.+8      	; 0x8b2 <__fp_cmp+0x3e>
 8aa:	08 95       	ret
 8ac:	0a 26       	eor	r0, r26
 8ae:	09 f4       	brne	.+2      	; 0x8b2 <__fp_cmp+0x3e>
 8b0:	a1 40       	sbci	r26, 0x01	; 1
 8b2:	a6 95       	lsr	r26
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	81 1d       	adc	r24, r1
 8b8:	81 1d       	adc	r24, r1
 8ba:	08 95       	ret

000008bc <__tablejump2__>:
 8bc:	ee 0f       	add	r30, r30
 8be:	ff 1f       	adc	r31, r31
 8c0:	05 90       	lpm	r0, Z+
 8c2:	f4 91       	lpm	r31, Z
 8c4:	e0 2d       	mov	r30, r0
 8c6:	09 94       	ijmp

000008c8 <_exit>:
 8c8:	f8 94       	cli

000008ca <__stop_program>:
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <__stop_program>
