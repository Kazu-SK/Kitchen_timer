
Kitchen_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000092a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000092a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec9  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099e  00000000  00000000  000022af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000790  00000000  00000000  000032ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003a4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_11>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	78 01       	movw	r14, r16
  6a:	7b 01       	movw	r14, r22
  6c:	7e 01       	movw	r14, r28
  6e:	81 01       	movw	r16, r2
  70:	84 01       	movw	r16, r8
  72:	87 01       	movw	r16, r14
  74:	8a 01       	movw	r16, r20
  76:	8d 01       	movw	r16, r26
  78:	90 01       	movw	r18, r0
  7a:	93 01       	movw	r18, r6

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
  9c:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_12>:
ISR(TIMER1_COMPA_vect){

	TimeDisplay();
}

ISR(TIMER1_COMPB_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	
	if(PORTB == OFF)
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8f 3f       	cpi	r24, 0xFF	; 255
  b4:	11 f4       	brne	.+4      	; 0xba <__vector_12+0x16>
		PORTB = ALL_LIGHT;
  b6:	15 b8       	out	0x05, r1	; 5
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_12+0x1a>
	else
		PORTB = OFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	85 b9       	out	0x05, r24	; 5
	
	TCNT1 = 0; 
  be:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <TimeDisplay>:


void TimeDisplay(){
	
	if(remain_time[0] == 0){
  d2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	80 81       	ld	r24, Z
  dc:	81 11       	cpse	r24, r1
  de:	1e c0       	rjmp	.+60     	; 0x11c <TimeDisplay+0x4a>
		remain_time[0] = 9;	
  e0:	89 e0       	ldi	r24, 0x09	; 9
  e2:	80 83       	st	Z, r24
			
		if(remain_time[1] == 0){
  e4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	81 81       	ldd	r24, Z+1	; 0x01
  ee:	81 11       	cpse	r24, r1
  f0:	12 c0       	rjmp	.+36     	; 0x116 <TimeDisplay+0x44>
			remain_time[1] = 5;
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	81 83       	std	Z+1, r24	; 0x01
			
			if (remain_time[2] == 0){
  f6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	82 81       	ldd	r24, Z+2	; 0x02
 100:	81 11       	cpse	r24, r1
 102:	06 c0       	rjmp	.+12     	; 0x110 <TimeDisplay+0x3e>
				remain_time[3]--;
 104:	83 81       	ldd	r24, Z+3	; 0x03
 106:	81 50       	subi	r24, 0x01	; 1
 108:	83 83       	std	Z+3, r24	; 0x03
				remain_time[2] = 9;
 10a:	89 e0       	ldi	r24, 0x09	; 9
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	08 95       	ret
			}
			else
				remain_time[2]--;	
 110:	81 50       	subi	r24, 0x01	; 1
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	08 95       	ret
		}
		else
			remain_time[1]--;		
 116:	81 50       	subi	r24, 0x01	; 1
 118:	81 83       	std	Z+1, r24	; 0x01
 11a:	08 95       	ret
	}
	else
		remain_time[0]--;
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <__vector_11>:


uint8_t *remain_time;


ISR(TIMER1_COMPA_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31

	TimeDisplay();
 144:	0e 94 69 00 	call	0xd2	; 0xd2 <TimeDisplay>
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <CountDown>:
	else
		remain_time[0]--;
	
}

void CountDown(uint8_t d_num[]){
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24

	remain_time = d_num;
 174:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uint16_t hold_timer = 0;
	uint32_t *p;
	uint8_t reset_signal = 0;


	TCNT1 = 0;	
 17c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 180:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1 << OCF1A;
 184:	86 b3       	in	r24, 0x16	; 22
 186:	82 60       	ori	r24, 0x02	; 2
 188:	86 bb       	out	0x16, r24	; 22
	SREG |= 0x80;
 18a:	8f b7       	in	r24, 0x3f	; 63
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	8f bf       	out	0x3f, r24	; 63
	//sei();
	

	while (PIND & START_SWITCH)
 190:	03 c0       	rjmp	.+6      	; 0x198 <CountDown+0x2e>
	{
		DynamicDrive(d_num);
 192:	ce 01       	movw	r24, r28
 194:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
	TIFR1 |= 1 << OCF1A;
	SREG |= 0x80;
	//sei();
	

	while (PIND & START_SWITCH)
 198:	4c 99       	sbic	0x09, 4	; 9
 19a:	fb cf       	rjmp	.-10     	; 0x192 <CountDown+0x28>
	}

	for(;;){


		if (PIND & START_SWITCH){
 19c:	4c 9b       	sbis	0x09, 4	; 9
 19e:	3d c0       	rjmp	.+122    	; 0x21a <CountDown+0xb0>
			
			cli();
 1a0:	f8 94       	cli
			hold_timer = TCNT1;
 1a2:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1a6:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
			
			while (PIND & START_SWITCH){
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <CountDown+0x48>
				DynamicDrive(d_num);
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
		if (PIND & START_SWITCH){
			
			cli();
			hold_timer = TCNT1;
			
			while (PIND & START_SWITCH){
 1b2:	4c 99       	sbic	0x09, 4	; 9
 1b4:	fb cf       	rjmp	.-10     	; 0x1ac <CountDown+0x42>
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <CountDown+0x54>
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
				DynamicDrive(d_num);
 1b8:	ce 01       	movw	r24, r28
 1ba:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
			
			while (PIND & START_SWITCH){
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
 1be:	4c 99       	sbic	0x09, 4	; 9
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <CountDown+0x5c>
 1c2:	4a 9b       	sbis	0x09, 2	; 9
 1c4:	f9 cf       	rjmp	.-14     	; 0x1b8 <CountDown+0x4e>
				DynamicDrive(d_num);
			}
			
			if(PIND & MINUTE_SWITCH){
 1c6:	4a 9b       	sbis	0x09, 2	; 9
 1c8:	0c c0       	rjmp	.+24     	; 0x1e2 <CountDown+0x78>
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
 1ca:	18 82       	st	Y, r1
 1cc:	19 82       	std	Y+1, r1	; 0x01
 1ce:	1a 82       	std	Y+2, r1	; 0x02
 1d0:	1b 82       	std	Y+3, r1	; 0x03
				
				while (PIND & MINUTE_SWITCH){
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <CountDown+0x70>
					DynamicDrive(d_num);
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
			if(PIND & MINUTE_SWITCH){
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
				
				while (PIND & MINUTE_SWITCH){
 1da:	4a 99       	sbic	0x09, 2	; 9
 1dc:	fb cf       	rjmp	.-10     	; 0x1d4 <CountDown+0x6a>
					DynamicDrive(d_num);
				}				
				
				reset_signal = 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	2e c0       	rjmp	.+92     	; 0x23e <CountDown+0xd4>
				
				break;
			}
			
			TCNT1 = hold_timer;
 1e2:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1e6:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 |= 1 << OCF1A;
 1ea:	86 b3       	in	r24, 0x16	; 22
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	86 bb       	out	0x16, r24	; 22
			//sei();	
			SREG |= 0x80;
 1f0:	8f b7       	in	r24, 0x3f	; 63
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	8f bf       	out	0x3f, r24	; 63
			
			while (PIND & START_SWITCH)
 1f6:	0f c0       	rjmp	.+30     	; 0x216 <CountDown+0xac>
			{
				DynamicDrive(d_num);
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
				
				if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0)
 1fe:	88 81       	ld	r24, Y
 200:	81 11       	cpse	r24, r1
 202:	09 c0       	rjmp	.+18     	; 0x216 <CountDown+0xac>
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	81 11       	cpse	r24, r1
 208:	06 c0       	rjmp	.+12     	; 0x216 <CountDown+0xac>
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	81 11       	cpse	r24, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <CountDown+0xac>
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	88 23       	and	r24, r24
 214:	11 f0       	breq	.+4      	; 0x21a <CountDown+0xb0>
			TCNT1 = hold_timer;
			TIFR1 |= 1 << OCF1A;
			//sei();	
			SREG |= 0x80;
			
			while (PIND & START_SWITCH)
 216:	4c 99       	sbic	0x09, 4	; 9
 218:	ef cf       	rjmp	.-34     	; 0x1f8 <CountDown+0x8e>
				if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0)
					break;
			}			
		}
		
		if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0){
 21a:	88 81       	ld	r24, Y
 21c:	81 11       	cpse	r24, r1
 21e:	0b c0       	rjmp	.+22     	; 0x236 <CountDown+0xcc>
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 11       	cpse	r24, r1
 224:	08 c0       	rjmp	.+16     	; 0x236 <CountDown+0xcc>
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	81 11       	cpse	r24, r1
 22a:	05 c0       	rjmp	.+10     	; 0x236 <CountDown+0xcc>
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	81 11       	cpse	r24, r1
 230:	02 c0       	rjmp	.+4      	; 0x236 <CountDown+0xcc>
			cli();
 232:	f8 94       	cli
			break;
 234:	04 c0       	rjmp	.+8      	; 0x23e <CountDown+0xd4>
		}
		
		DynamicDrive(d_num);
 236:	ce 01       	movw	r24, r28
 238:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
	}
 23c:	af cf       	rjmp	.-162    	; 0x19c <CountDown+0x32>

//	TCCR1A = 0b00000000;
//	TCCR1B = 0b00001100;

	PORTB = 0x00;
 23e:	15 b8       	out	0x05, r1	; 5

    if(reset_signal == 0){
 240:	81 11       	cpse	r24, r1
 242:	27 c0       	rjmp	.+78     	; 0x292 <CountDown+0x128>
		
		TIMSK1 = 0b00000100;
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		
		OCR1B = 15624;
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	9d e3       	ldi	r25, 0x3D	; 61
 24e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 252:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

		TCNT1 = 0;
 256:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 25a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIFR1 |= 1 << OCF1A;
 25e:	86 b3       	in	r24, 0x16	; 22
 260:	82 60       	ori	r24, 0x02	; 2
 262:	86 bb       	out	0x16, r24	; 22
		SREG |= 0x80;
 264:	8f b7       	in	r24, 0x3f	; 63
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8f bf       	out	0x3f, r24	; 63
	
		while(PIND & START_SWITCH){
 26a:	02 c0       	rjmp	.+4      	; 0x270 <CountDown+0x106>
			DisplayFlick();
 26c:	0e 94 4e 01 	call	0x29c	; 0x29c <DisplayFlick>

		TCNT1 = 0;
		TIFR1 |= 1 << OCF1A;
		SREG |= 0x80;
	
		while(PIND & START_SWITCH){
 270:	4c 99       	sbic	0x09, 4	; 9
 272:	fc cf       	rjmp	.-8      	; 0x26c <CountDown+0x102>
			DisplayFlick();
		}
	
		for(;;){
		
			if(PIND & START_SWITCH){
 274:	4c 9b       	sbis	0x09, 4	; 9
 276:	02 c0       	rjmp	.+4      	; 0x27c <CountDown+0x112>
				cli();
 278:	f8 94       	cli
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 27a:	06 c0       	rjmp	.+12     	; 0x288 <CountDown+0x11e>
			if(PIND & START_SWITCH){
				cli();
				break;
			}
	
			DisplayFlick();
 27c:	0e 94 4e 01 	call	0x29c	; 0x29c <DisplayFlick>
		}
 280:	f9 cf       	rjmp	.-14     	; 0x274 <CountDown+0x10a>
	
		while(PIND & START_SWITCH){
			DynamicDrive(d_num);
 282:	ce 01       	movw	r24, r28
 284:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 288:	4c 99       	sbic	0x09, 4	; 9
 28a:	fb cf       	rjmp	.-10     	; 0x282 <CountDown+0x118>
			DynamicDrive(d_num);
		}
		
		TIMSK1 = 0b00000010;
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	}
	
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <DisplayFlick>:
}


void DisplayFlick(){
	
	PORTC = DISPLAY_DIG4;
 29c:	8e e0       	ldi	r24, 0x0E	; 14
 29e:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	8f e9       	ldi	r24, 0x9F	; 159
 2a2:	9f e0       	ldi	r25, 0x0F	; 15
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <DisplayFlick+0x8>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <DisplayFlick+0xe>
 2aa:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG3;
 2ac:	8d e0       	ldi	r24, 0x0D	; 13
 2ae:	88 b9       	out	0x08, r24	; 8
 2b0:	8f e9       	ldi	r24, 0x9F	; 159
 2b2:	9f e0       	ldi	r25, 0x0F	; 15
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <DisplayFlick+0x18>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <DisplayFlick+0x1e>
 2ba:	00 00       	nop
	_delay_ms(2);

	PORTC = DISPLAY_DIG2;
 2bc:	8b e0       	ldi	r24, 0x0B	; 11
 2be:	88 b9       	out	0x08, r24	; 8
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <DisplayFlick+0x28>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <DisplayFlick+0x2e>
 2ca:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTC = DISPLAY_DIG1;
 2cc:	87 e0       	ldi	r24, 0x07	; 7
 2ce:	88 b9       	out	0x08, r24	; 8
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <DisplayFlick+0x38>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <DisplayFlick+0x3e>
 2da:	00 00       	nop
 2dc:	08 95       	ret

000002de <DisplaySegment>:
}


void DisplaySegment(uint8_t num){
	
	switch(num){
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	8a 30       	cpi	r24, 0x0A	; 10
 2e2:	91 05       	cpc	r25, r1
 2e4:	18 f5       	brcc	.+70     	; 0x32c <DisplaySegment+0x4e>
 2e6:	fc 01       	movw	r30, r24
 2e8:	ec 5c       	subi	r30, 0xCC	; 204
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__tablejump2__>
		case 0:
			PORTB = DISPLAY_NUM0;
 2f0:	80 ec       	ldi	r24, 0xC0	; 192
 2f2:	85 b9       	out	0x05, r24	; 5
			break;
 2f4:	08 95       	ret
		case 1:
			PORTB = DISPLAY_NUM1;
 2f6:	89 ef       	ldi	r24, 0xF9	; 249
 2f8:	85 b9       	out	0x05, r24	; 5
			break;
 2fa:	08 95       	ret
		case 2:
			PORTB = DISPLAY_NUM2;
 2fc:	84 ea       	ldi	r24, 0xA4	; 164
 2fe:	85 b9       	out	0x05, r24	; 5
			break;
 300:	08 95       	ret
		case 3:
			PORTB = DISPLAY_NUM3;
 302:	80 eb       	ldi	r24, 0xB0	; 176
 304:	85 b9       	out	0x05, r24	; 5
			break;
 306:	08 95       	ret
		case 4:
			PORTB = DISPLAY_NUM4;
 308:	89 e9       	ldi	r24, 0x99	; 153
 30a:	85 b9       	out	0x05, r24	; 5
			break;
 30c:	08 95       	ret
		case 5:
			PORTB = DISPLAY_NUM5;
 30e:	82 e9       	ldi	r24, 0x92	; 146
 310:	85 b9       	out	0x05, r24	; 5
			break;
 312:	08 95       	ret
		case 6:
			PORTB = DISPLAY_NUM6;
 314:	82 e8       	ldi	r24, 0x82	; 130
 316:	85 b9       	out	0x05, r24	; 5
			break;
 318:	08 95       	ret
		case 7:
			PORTB = DISPLAY_NUM7;
 31a:	88 ed       	ldi	r24, 0xD8	; 216
 31c:	85 b9       	out	0x05, r24	; 5
			break;
 31e:	08 95       	ret
		case 8:
			PORTB = DISPLAY_NUM8;
 320:	80 e8       	ldi	r24, 0x80	; 128
 322:	85 b9       	out	0x05, r24	; 5
			break;
 324:	08 95       	ret
		case 9:
			PORTB = DISPLAY_NUM9;
 326:	80 e9       	ldi	r24, 0x90	; 144
 328:	85 b9       	out	0x05, r24	; 5
			break;
 32a:	08 95       	ret
		default:
			PORTB = DISPLAY_ERROR;
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	85 b9       	out	0x05, r24	; 5
 330:	08 95       	ret

00000332 <DynamicDrive>:


#include "Display.h"


void DynamicDrive(uint8_t disp[]){
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
	
	PORTB = OFF;
 33a:	1f ef       	ldi	r17, 0xFF	; 255
 33c:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[0]);
 33e:	88 81       	ld	r24, Y
 340:	0e 94 6f 01 	call	0x2de	; 0x2de <DisplaySegment>
	PORTC = DISPLAY_DIG4;
 344:	8e e0       	ldi	r24, 0x0E	; 14
 346:	88 b9       	out	0x08, r24	; 8
 348:	8f e9       	ldi	r24, 0x9F	; 159
 34a:	9f e0       	ldi	r25, 0x0F	; 15
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <DynamicDrive+0x1a>
 350:	00 c0       	rjmp	.+0      	; 0x352 <DynamicDrive+0x20>
 352:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 354:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[1]);
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	0e 94 6f 01 	call	0x2de	; 0x2de <DisplaySegment>
	PORTC = DISPLAY_DIG3;
 35c:	8d e0       	ldi	r24, 0x0D	; 13
 35e:	88 b9       	out	0x08, r24	; 8
 360:	8f e9       	ldi	r24, 0x9F	; 159
 362:	9f e0       	ldi	r25, 0x0F	; 15
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <DynamicDrive+0x32>
 368:	00 c0       	rjmp	.+0      	; 0x36a <DynamicDrive+0x38>
 36a:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 36c:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[2]);
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	0e 94 6f 01 	call	0x2de	; 0x2de <DisplaySegment>
	PORTB ^= 1 << PORTB7;    //Turn on the DP.
 374:	85 b1       	in	r24, 0x05	; 5
 376:	80 58       	subi	r24, 0x80	; 128
 378:	85 b9       	out	0x05, r24	; 5
	PORTC = DISPLAY_DIG2;
 37a:	8b e0       	ldi	r24, 0x0B	; 11
 37c:	88 b9       	out	0x08, r24	; 8
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <DynamicDrive+0x50>
 386:	00 c0       	rjmp	.+0      	; 0x388 <DynamicDrive+0x56>
 388:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 38a:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[3]);
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	0e 94 6f 01 	call	0x2de	; 0x2de <DisplaySegment>
	PORTC = DISPLAY_DIG1;
 392:	87 e0       	ldi	r24, 0x07	; 7
 394:	88 b9       	out	0x08, r24	; 8
 396:	8f e9       	ldi	r24, 0x9F	; 159
 398:	9f e0       	ldi	r25, 0x0F	; 15
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <DynamicDrive+0x68>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <DynamicDrive+0x6e>
 3a0:	00 00       	nop
	_delay_ms(LIGHT_TIME);
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	08 95       	ret

000003aa <main>:
#include "Display.h"
#include "Count.h"


int main(void)
{
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <main+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <main+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8_t display_num[4] = {0,0,0,0};
 3b6:	19 82       	std	Y+1, r1	; 0x01
 3b8:	1a 82       	std	Y+2, r1	; 0x02
 3ba:	1b 82       	std	Y+3, r1	; 0x03
 3bc:	1c 82       	std	Y+4, r1	; 0x04
		
		
	DDRB = 0b11111111;
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00101111;
 3c2:	8f e2       	ldi	r24, 0x2F	; 47
 3c4:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00000000;
 3c6:	1a b8       	out	0x0a, r1	; 10
	

	TCCR1A = 0b00000000;
 3c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0b00001100;
 3cc:	8c e0       	ldi	r24, 0x0C	; 12
 3ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIMSK1 = 0b00000010;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1A = 31249;
 3d8:	81 e1       	ldi	r24, 0x11	; 17
 3da:	9a e7       	ldi	r25, 0x7A	; 122
 3dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 15624;
 3e4:	88 e0       	ldi	r24, 0x08	; 8
 3e6:	9d e3       	ldi	r25, 0x3D	; 61
 3e8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3ec:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	cli();
 3f0:	f8 94       	cli

	for(;;)
	{
		if(PIND & (1 << PIND2)){
 3f2:	4a 9b       	sbis	0x09, 2	; 9
 3f4:	0f c0       	rjmp	.+30     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			TCCR1B ^= 1 << WGM12;
 3f6:	01 e8       	ldi	r16, 0x81	; 129
 3f8:	10 e0       	ldi	r17, 0x00	; 0
 3fa:	f8 01       	movw	r30, r16
 3fc:	90 81       	ld	r25, Z
 3fe:	88 e0       	ldi	r24, 0x08	; 8
 400:	89 27       	eor	r24, r25
 402:	80 83       	st	Z, r24
			SetMinutes(display_num);
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 34 02 	call	0x468	; 0x468 <SetMinutes>
			TCCR1B |= 1 << WGM12;
 40c:	f8 01       	movw	r30, r16
 40e:	80 81       	ld	r24, Z
 410:	88 60       	ori	r24, 0x08	; 8
 412:	80 83       	st	Z, r24
		}
		
		if(PIND & (1 << PIND3)){
 414:	4b 9b       	sbis	0x09, 3	; 9
 416:	04 c0       	rjmp	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			SetSeconds(display_num);
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	0e 94 a0 02 	call	0x540	; 0x540 <SetSeconds>
		}
		
		if(PIND & (1 << PIND4)){
 420:	4c 9b       	sbis	0x09, 4	; 9
 422:	04 c0       	rjmp	.+8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			CountDown(display_num);
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	0e 94 b5 00 	call	0x16a	; 0x16a <CountDown>
		}
		
		DynamicDrive(display_num);
 42c:	ce 01       	movw	r24, r28
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
	}
 434:	de cf       	rjmp	.-68     	; 0x3f2 <main+0x48>

00000436 <MinutesCounter>:
 *  Author: Kazu-SK
 */ 

#include "SetTimer.h"

void MinutesCounter(uint8_t d_num[]){
 436:	fc 01       	movw	r30, r24
	
	if(d_num[2] != 9)
 438:	92 81       	ldd	r25, Z+2	; 0x02
 43a:	99 30       	cpi	r25, 0x09	; 9
 43c:	19 f0       	breq	.+6      	; 0x444 <MinutesCounter+0xe>
		d_num[2]++;
 43e:	9f 5f       	subi	r25, 0xFF	; 255
 440:	92 83       	std	Z+2, r25	; 0x02
 442:	08 95       	ret
	else{
		d_num[2] = 0;
 444:	12 82       	std	Z+2, r1	; 0x02
		
		if(d_num[3] != 9)
 446:	83 81       	ldd	r24, Z+3	; 0x03
 448:	89 30       	cpi	r24, 0x09	; 9
 44a:	19 f0       	breq	.+6      	; 0x452 <MinutesCounter+0x1c>
			d_num[3]++;
 44c:	8f 5f       	subi	r24, 0xFF	; 255
 44e:	83 83       	std	Z+3, r24	; 0x03
 450:	08 95       	ret
		else
			d_num[3] = 0;
 452:	13 82       	std	Z+3, r1	; 0x03
 454:	08 95       	ret

00000456 <SecondsCounter>:
	}
}

void SecondsCounter(uint8_t d_num[]){
 456:	fc 01       	movw	r30, r24

	if(d_num[1] != 5)
 458:	91 81       	ldd	r25, Z+1	; 0x01
 45a:	95 30       	cpi	r25, 0x05	; 5
 45c:	19 f0       	breq	.+6      	; 0x464 <SecondsCounter+0xe>
		d_num[1]++;
 45e:	9f 5f       	subi	r25, 0xFF	; 255
 460:	91 83       	std	Z+1, r25	; 0x01
 462:	08 95       	ret
	else
		d_num[1] = 0;
 464:	11 82       	std	Z+1, r1	; 0x01
 466:	08 95       	ret

00000468 <SetMinutes>:
}


void SetMinutes(uint8_t d_num[]){
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ec 01       	movw	r28, r24
	float pulse_count = 0.0;
	float push_time = 0.0;
	


	MinutesCounter(d_num);
 46e:	0e 94 1b 02 	call	0x436	; 0x436 <MinutesCounter>

	TCNT1 = 0;
 472:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 476:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(PIND & MINUTE_SWITCH){
 47a:	5d c0       	rjmp	.+186    	; 0x536 <SetMinutes+0xce>
		DynamicDrive(d_num);
 47c:	ce 01       	movw	r24, r28
 47e:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
		
		pulse_count = TCNT1;
 482:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 486:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 2f 03 	call	0x65e	; 0x65e <__floatunsisf>
		push_time = pulse_count * M_CYCLE / F;
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	40 e8       	ldi	r20, 0x80	; 128
 498:	53 e4       	ldi	r21, 0x43	; 67
 49a:	0e 94 c2 03 	call	0x784	; 0x784 <__mulsf3>
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	34 e2       	ldi	r19, 0x24	; 36
 4a2:	44 ef       	ldi	r20, 0xF4	; 244
 4a4:	5a e4       	ldi	r21, 0x4A	; 74
 4a6:	0e 94 bd 02 	call	0x57a	; 0x57a <__divsf3>
		
		if(push_time >= 1){
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e8       	ldi	r20, 0x80	; 128
 4b0:	5f e3       	ldi	r21, 0x3F	; 63
 4b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gesf2>
 4b6:	88 23       	and	r24, r24
 4b8:	7c f1       	brlt	.+94     	; 0x518 <SetMinutes+0xb0>
			
			TCNT1 = 0;
 4ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 4c2:	26 c0       	rjmp	.+76     	; 0x510 <SetMinutes+0xa8>
				
				pulse_count = TCNT1;
 4c4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4c8:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 2f 03 	call	0x65e	; 0x65e <__floatunsisf>
				push_time = pulse_count * M_CYCLE / F;
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	40 e8       	ldi	r20, 0x80	; 128
 4da:	53 e4       	ldi	r21, 0x43	; 67
 4dc:	0e 94 c2 03 	call	0x784	; 0x784 <__mulsf3>
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	34 e2       	ldi	r19, 0x24	; 36
 4e4:	44 ef       	ldi	r20, 0xF4	; 244
 4e6:	5a e4       	ldi	r21, 0x4A	; 74
 4e8:	0e 94 bd 02 	call	0x57a	; 0x57a <__divsf3>
				
				if (push_time >= LONG_PLESS )
 4ec:	2d ec       	ldi	r18, 0xCD	; 205
 4ee:	3c ec       	ldi	r19, 0xCC	; 204
 4f0:	4c ec       	ldi	r20, 0xCC	; 204
 4f2:	5d e3       	ldi	r21, 0x3D	; 61
 4f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gesf2>
 4f8:	88 23       	and	r24, r24
 4fa:	3c f0       	brlt	.+14     	; 0x50a <SetMinutes+0xa2>
				{
					MinutesCounter(d_num);
 4fc:	ce 01       	movw	r24, r28
 4fe:	0e 94 1b 02 	call	0x436	; 0x436 <MinutesCounter>
					TCNT1 = 0;
 502:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 506:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				}
				
				DynamicDrive(d_num);
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
		
		if(push_time >= 1){
			
			TCNT1 = 0;
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 510:	4a 9b       	sbis	0x09, 2	; 9
 512:	02 c0       	rjmp	.+4      	; 0x518 <SetMinutes+0xb0>
 514:	4b 9b       	sbis	0x09, 3	; 9
 516:	d6 cf       	rjmp	.-84     	; 0x4c4 <SetMinutes+0x5c>
				
				DynamicDrive(d_num);
			}
		}
		
		if(PIND & SECONDS_SWITCH){
 518:	4b 9b       	sbis	0x09, 3	; 9
 51a:	0d c0       	rjmp	.+26     	; 0x536 <SetMinutes+0xce>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 51c:	18 82       	st	Y, r1
 51e:	19 82       	std	Y+1, r1	; 0x01
 520:	1a 82       	std	Y+2, r1	; 0x02
 522:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 524:	03 c0       	rjmp	.+6      	; 0x52c <SetMinutes+0xc4>
				DynamicDrive(d_num);
 526:	ce 01       	movw	r24, r28
 528:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
		
		if(PIND & SECONDS_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 52c:	4b 99       	sbic	0x09, 3	; 9
 52e:	fb cf       	rjmp	.-10     	; 0x526 <SetMinutes+0xbe>
 530:	4a 99       	sbic	0x09, 2	; 9
 532:	f9 cf       	rjmp	.-14     	; 0x526 <SetMinutes+0xbe>
 534:	02 c0       	rjmp	.+4      	; 0x53a <SetMinutes+0xd2>


	MinutesCounter(d_num);

	TCNT1 = 0;
	while(PIND & MINUTE_SWITCH){
 536:	4a 99       	sbic	0x09, 2	; 9
 538:	a1 cf       	rjmp	.-190    	; 0x47c <SetMinutes+0x14>
			
			break;
		}
	}
	
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <SetSeconds>:

void SetSeconds(uint8_t d_num[]){
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	ec 01       	movw	r28, r24
	
	uint32_t *p;
	
	
	SecondsCounter(d_num);
 546:	0e 94 2b 02 	call	0x456	; 0x456 <SecondsCounter>
	
	while(PIND & SECONDS_SWITCH){
 54a:	12 c0       	rjmp	.+36     	; 0x570 <SetSeconds+0x30>
		DynamicDrive(d_num);
 54c:	ce 01       	movw	r24, r28
 54e:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
 552:	4a 9b       	sbis	0x09, 2	; 9
 554:	0d c0       	rjmp	.+26     	; 0x570 <SetSeconds+0x30>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 556:	18 82       	st	Y, r1
 558:	19 82       	std	Y+1, r1	; 0x01
 55a:	1a 82       	std	Y+2, r1	; 0x02
 55c:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 55e:	03 c0       	rjmp	.+6      	; 0x566 <SetSeconds+0x26>
				DynamicDrive(d_num);
 560:	ce 01       	movw	r24, r28
 562:	0e 94 99 01 	call	0x332	; 0x332 <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 566:	4b 99       	sbic	0x09, 3	; 9
 568:	fb cf       	rjmp	.-10     	; 0x560 <SetSeconds+0x20>
 56a:	4a 99       	sbic	0x09, 2	; 9
 56c:	f9 cf       	rjmp	.-14     	; 0x560 <SetSeconds+0x20>
 56e:	02 c0       	rjmp	.+4      	; 0x574 <SetSeconds+0x34>
	uint32_t *p;
	
	
	SecondsCounter(d_num);
	
	while(PIND & SECONDS_SWITCH){
 570:	4b 99       	sbic	0x09, 3	; 9
 572:	ec cf       	rjmp	.-40     	; 0x54c <SetSeconds+0xc>
			
			break;
		}
	}
	
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <__divsf3>:
 57a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divsf3x>
 57e:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_round>
 582:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__fp_pscB>
 586:	58 f0       	brcs	.+22     	; 0x59e <__divsf3+0x24>
 588:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_pscA>
 58c:	40 f0       	brcs	.+16     	; 0x59e <__divsf3+0x24>
 58e:	29 f4       	brne	.+10     	; 0x59a <__divsf3+0x20>
 590:	5f 3f       	cpi	r21, 0xFF	; 255
 592:	29 f0       	breq	.+10     	; 0x59e <__divsf3+0x24>
 594:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_inf>
 598:	51 11       	cpse	r21, r1
 59a:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_szero>
 59e:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_nan>

000005a2 <__divsf3x>:
 5a2:	0e 94 94 03 	call	0x728	; 0x728 <__fp_split3>
 5a6:	68 f3       	brcs	.-38     	; 0x582 <__divsf3+0x8>

000005a8 <__divsf3_pse>:
 5a8:	99 23       	and	r25, r25
 5aa:	b1 f3       	breq	.-20     	; 0x598 <__divsf3+0x1e>
 5ac:	55 23       	and	r21, r21
 5ae:	91 f3       	breq	.-28     	; 0x594 <__divsf3+0x1a>
 5b0:	95 1b       	sub	r25, r21
 5b2:	55 0b       	sbc	r21, r21
 5b4:	bb 27       	eor	r27, r27
 5b6:	aa 27       	eor	r26, r26
 5b8:	62 17       	cp	r22, r18
 5ba:	73 07       	cpc	r23, r19
 5bc:	84 07       	cpc	r24, r20
 5be:	38 f0       	brcs	.+14     	; 0x5ce <__divsf3_pse+0x26>
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	5f 4f       	sbci	r21, 0xFF	; 255
 5c4:	22 0f       	add	r18, r18
 5c6:	33 1f       	adc	r19, r19
 5c8:	44 1f       	adc	r20, r20
 5ca:	aa 1f       	adc	r26, r26
 5cc:	a9 f3       	breq	.-22     	; 0x5b8 <__divsf3_pse+0x10>
 5ce:	35 d0       	rcall	.+106    	; 0x63a <__divsf3_pse+0x92>
 5d0:	0e 2e       	mov	r0, r30
 5d2:	3a f0       	brmi	.+14     	; 0x5e2 <__divsf3_pse+0x3a>
 5d4:	e0 e8       	ldi	r30, 0x80	; 128
 5d6:	32 d0       	rcall	.+100    	; 0x63c <__divsf3_pse+0x94>
 5d8:	91 50       	subi	r25, 0x01	; 1
 5da:	50 40       	sbci	r21, 0x00	; 0
 5dc:	e6 95       	lsr	r30
 5de:	00 1c       	adc	r0, r0
 5e0:	ca f7       	brpl	.-14     	; 0x5d4 <__divsf3_pse+0x2c>
 5e2:	2b d0       	rcall	.+86     	; 0x63a <__divsf3_pse+0x92>
 5e4:	fe 2f       	mov	r31, r30
 5e6:	29 d0       	rcall	.+82     	; 0x63a <__divsf3_pse+0x92>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	bb 1f       	adc	r27, r27
 5f0:	26 17       	cp	r18, r22
 5f2:	37 07       	cpc	r19, r23
 5f4:	48 07       	cpc	r20, r24
 5f6:	ab 07       	cpc	r26, r27
 5f8:	b0 e8       	ldi	r27, 0x80	; 128
 5fa:	09 f0       	breq	.+2      	; 0x5fe <__divsf3_pse+0x56>
 5fc:	bb 0b       	sbc	r27, r27
 5fe:	80 2d       	mov	r24, r0
 600:	bf 01       	movw	r22, r30
 602:	ff 27       	eor	r31, r31
 604:	93 58       	subi	r25, 0x83	; 131
 606:	5f 4f       	sbci	r21, 0xFF	; 255
 608:	3a f0       	brmi	.+14     	; 0x618 <__divsf3_pse+0x70>
 60a:	9e 3f       	cpi	r25, 0xFE	; 254
 60c:	51 05       	cpc	r21, r1
 60e:	78 f0       	brcs	.+30     	; 0x62e <__divsf3_pse+0x86>
 610:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_inf>
 614:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_szero>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	e4 f3       	brlt	.-8      	; 0x614 <__divsf3_pse+0x6c>
 61c:	98 3e       	cpi	r25, 0xE8	; 232
 61e:	d4 f3       	brlt	.-12     	; 0x614 <__divsf3_pse+0x6c>
 620:	86 95       	lsr	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f7 95       	ror	r31
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	c9 f7       	brne	.-14     	; 0x620 <__divsf3_pse+0x78>
 62e:	88 0f       	add	r24, r24
 630:	91 1d       	adc	r25, r1
 632:	96 95       	lsr	r25
 634:	87 95       	ror	r24
 636:	97 f9       	bld	r25, 7
 638:	08 95       	ret
 63a:	e1 e0       	ldi	r30, 0x01	; 1
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	88 1f       	adc	r24, r24
 642:	bb 1f       	adc	r27, r27
 644:	62 17       	cp	r22, r18
 646:	73 07       	cpc	r23, r19
 648:	84 07       	cpc	r24, r20
 64a:	ba 07       	cpc	r27, r26
 64c:	20 f0       	brcs	.+8      	; 0x656 <__divsf3_pse+0xae>
 64e:	62 1b       	sub	r22, r18
 650:	73 0b       	sbc	r23, r19
 652:	84 0b       	sbc	r24, r20
 654:	ba 0b       	sbc	r27, r26
 656:	ee 1f       	adc	r30, r30
 658:	88 f7       	brcc	.-30     	; 0x63c <__divsf3_pse+0x94>
 65a:	e0 95       	com	r30
 65c:	08 95       	ret

0000065e <__floatunsisf>:
 65e:	e8 94       	clt
 660:	09 c0       	rjmp	.+18     	; 0x674 <__floatsisf+0x12>

00000662 <__floatsisf>:
 662:	97 fb       	bst	r25, 7
 664:	3e f4       	brtc	.+14     	; 0x674 <__floatsisf+0x12>
 666:	90 95       	com	r25
 668:	80 95       	com	r24
 66a:	70 95       	com	r23
 66c:	61 95       	neg	r22
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	99 23       	and	r25, r25
 676:	a9 f0       	breq	.+42     	; 0x6a2 <__floatsisf+0x40>
 678:	f9 2f       	mov	r31, r25
 67a:	96 e9       	ldi	r25, 0x96	; 150
 67c:	bb 27       	eor	r27, r27
 67e:	93 95       	inc	r25
 680:	f6 95       	lsr	r31
 682:	87 95       	ror	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b7 95       	ror	r27
 68a:	f1 11       	cpse	r31, r1
 68c:	f8 cf       	rjmp	.-16     	; 0x67e <__floatsisf+0x1c>
 68e:	fa f4       	brpl	.+62     	; 0x6ce <__floatsisf+0x6c>
 690:	bb 0f       	add	r27, r27
 692:	11 f4       	brne	.+4      	; 0x698 <__floatsisf+0x36>
 694:	60 ff       	sbrs	r22, 0
 696:	1b c0       	rjmp	.+54     	; 0x6ce <__floatsisf+0x6c>
 698:	6f 5f       	subi	r22, 0xFF	; 255
 69a:	7f 4f       	sbci	r23, 0xFF	; 255
 69c:	8f 4f       	sbci	r24, 0xFF	; 255
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	16 c0       	rjmp	.+44     	; 0x6ce <__floatsisf+0x6c>
 6a2:	88 23       	and	r24, r24
 6a4:	11 f0       	breq	.+4      	; 0x6aa <__floatsisf+0x48>
 6a6:	96 e9       	ldi	r25, 0x96	; 150
 6a8:	11 c0       	rjmp	.+34     	; 0x6cc <__floatsisf+0x6a>
 6aa:	77 23       	and	r23, r23
 6ac:	21 f0       	breq	.+8      	; 0x6b6 <__floatsisf+0x54>
 6ae:	9e e8       	ldi	r25, 0x8E	; 142
 6b0:	87 2f       	mov	r24, r23
 6b2:	76 2f       	mov	r23, r22
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <__floatsisf+0x5e>
 6b6:	66 23       	and	r22, r22
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <__floatsisf+0x74>
 6ba:	96 e8       	ldi	r25, 0x86	; 134
 6bc:	86 2f       	mov	r24, r22
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	2a f0       	brmi	.+10     	; 0x6ce <__floatsisf+0x6c>
 6c4:	9a 95       	dec	r25
 6c6:	66 0f       	add	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	da f7       	brpl	.-10     	; 0x6c4 <__floatsisf+0x62>
 6ce:	88 0f       	add	r24, r24
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	97 f9       	bld	r25, 7
 6d6:	08 95       	ret

000006d8 <__fp_inf>:
 6d8:	97 f9       	bld	r25, 7
 6da:	9f 67       	ori	r25, 0x7F	; 127
 6dc:	80 e8       	ldi	r24, 0x80	; 128
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	08 95       	ret

000006e4 <__fp_nan>:
 6e4:	9f ef       	ldi	r25, 0xFF	; 255
 6e6:	80 ec       	ldi	r24, 0xC0	; 192
 6e8:	08 95       	ret

000006ea <__fp_pscA>:
 6ea:	00 24       	eor	r0, r0
 6ec:	0a 94       	dec	r0
 6ee:	16 16       	cp	r1, r22
 6f0:	17 06       	cpc	r1, r23
 6f2:	18 06       	cpc	r1, r24
 6f4:	09 06       	cpc	r0, r25
 6f6:	08 95       	ret

000006f8 <__fp_pscB>:
 6f8:	00 24       	eor	r0, r0
 6fa:	0a 94       	dec	r0
 6fc:	12 16       	cp	r1, r18
 6fe:	13 06       	cpc	r1, r19
 700:	14 06       	cpc	r1, r20
 702:	05 06       	cpc	r0, r21
 704:	08 95       	ret

00000706 <__fp_round>:
 706:	09 2e       	mov	r0, r25
 708:	03 94       	inc	r0
 70a:	00 0c       	add	r0, r0
 70c:	11 f4       	brne	.+4      	; 0x712 <__fp_round+0xc>
 70e:	88 23       	and	r24, r24
 710:	52 f0       	brmi	.+20     	; 0x726 <__fp_round+0x20>
 712:	bb 0f       	add	r27, r27
 714:	40 f4       	brcc	.+16     	; 0x726 <__fp_round+0x20>
 716:	bf 2b       	or	r27, r31
 718:	11 f4       	brne	.+4      	; 0x71e <__fp_round+0x18>
 71a:	60 ff       	sbrs	r22, 0
 71c:	04 c0       	rjmp	.+8      	; 0x726 <__fp_round+0x20>
 71e:	6f 5f       	subi	r22, 0xFF	; 255
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	08 95       	ret

00000728 <__fp_split3>:
 728:	57 fd       	sbrc	r21, 7
 72a:	90 58       	subi	r25, 0x80	; 128
 72c:	44 0f       	add	r20, r20
 72e:	55 1f       	adc	r21, r21
 730:	59 f0       	breq	.+22     	; 0x748 <__fp_splitA+0x10>
 732:	5f 3f       	cpi	r21, 0xFF	; 255
 734:	71 f0       	breq	.+28     	; 0x752 <__fp_splitA+0x1a>
 736:	47 95       	ror	r20

00000738 <__fp_splitA>:
 738:	88 0f       	add	r24, r24
 73a:	97 fb       	bst	r25, 7
 73c:	99 1f       	adc	r25, r25
 73e:	61 f0       	breq	.+24     	; 0x758 <__fp_splitA+0x20>
 740:	9f 3f       	cpi	r25, 0xFF	; 255
 742:	79 f0       	breq	.+30     	; 0x762 <__fp_splitA+0x2a>
 744:	87 95       	ror	r24
 746:	08 95       	ret
 748:	12 16       	cp	r1, r18
 74a:	13 06       	cpc	r1, r19
 74c:	14 06       	cpc	r1, r20
 74e:	55 1f       	adc	r21, r21
 750:	f2 cf       	rjmp	.-28     	; 0x736 <__fp_split3+0xe>
 752:	46 95       	lsr	r20
 754:	f1 df       	rcall	.-30     	; 0x738 <__fp_splitA>
 756:	08 c0       	rjmp	.+16     	; 0x768 <__fp_splitA+0x30>
 758:	16 16       	cp	r1, r22
 75a:	17 06       	cpc	r1, r23
 75c:	18 06       	cpc	r1, r24
 75e:	99 1f       	adc	r25, r25
 760:	f1 cf       	rjmp	.-30     	; 0x744 <__fp_splitA+0xc>
 762:	86 95       	lsr	r24
 764:	71 05       	cpc	r23, r1
 766:	61 05       	cpc	r22, r1
 768:	08 94       	sec
 76a:	08 95       	ret

0000076c <__fp_zero>:
 76c:	e8 94       	clt

0000076e <__fp_szero>:
 76e:	bb 27       	eor	r27, r27
 770:	66 27       	eor	r22, r22
 772:	77 27       	eor	r23, r23
 774:	cb 01       	movw	r24, r22
 776:	97 f9       	bld	r25, 7
 778:	08 95       	ret

0000077a <__gesf2>:
 77a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_cmp>
 77e:	08 f4       	brcc	.+2      	; 0x782 <__gesf2+0x8>
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	08 95       	ret

00000784 <__mulsf3>:
 784:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__mulsf3x>
 788:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_round>
 78c:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_pscA>
 790:	38 f0       	brcs	.+14     	; 0x7a0 <__mulsf3+0x1c>
 792:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__fp_pscB>
 796:	20 f0       	brcs	.+8      	; 0x7a0 <__mulsf3+0x1c>
 798:	95 23       	and	r25, r21
 79a:	11 f0       	breq	.+4      	; 0x7a0 <__mulsf3+0x1c>
 79c:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_inf>
 7a0:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_nan>
 7a4:	11 24       	eor	r1, r1
 7a6:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_szero>

000007aa <__mulsf3x>:
 7aa:	0e 94 94 03 	call	0x728	; 0x728 <__fp_split3>
 7ae:	70 f3       	brcs	.-36     	; 0x78c <__mulsf3+0x8>

000007b0 <__mulsf3_pse>:
 7b0:	95 9f       	mul	r25, r21
 7b2:	c1 f3       	breq	.-16     	; 0x7a4 <__mulsf3+0x20>
 7b4:	95 0f       	add	r25, r21
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	55 1f       	adc	r21, r21
 7ba:	62 9f       	mul	r22, r18
 7bc:	f0 01       	movw	r30, r0
 7be:	72 9f       	mul	r23, r18
 7c0:	bb 27       	eor	r27, r27
 7c2:	f0 0d       	add	r31, r0
 7c4:	b1 1d       	adc	r27, r1
 7c6:	63 9f       	mul	r22, r19
 7c8:	aa 27       	eor	r26, r26
 7ca:	f0 0d       	add	r31, r0
 7cc:	b1 1d       	adc	r27, r1
 7ce:	aa 1f       	adc	r26, r26
 7d0:	64 9f       	mul	r22, r20
 7d2:	66 27       	eor	r22, r22
 7d4:	b0 0d       	add	r27, r0
 7d6:	a1 1d       	adc	r26, r1
 7d8:	66 1f       	adc	r22, r22
 7da:	82 9f       	mul	r24, r18
 7dc:	22 27       	eor	r18, r18
 7de:	b0 0d       	add	r27, r0
 7e0:	a1 1d       	adc	r26, r1
 7e2:	62 1f       	adc	r22, r18
 7e4:	73 9f       	mul	r23, r19
 7e6:	b0 0d       	add	r27, r0
 7e8:	a1 1d       	adc	r26, r1
 7ea:	62 1f       	adc	r22, r18
 7ec:	83 9f       	mul	r24, r19
 7ee:	a0 0d       	add	r26, r0
 7f0:	61 1d       	adc	r22, r1
 7f2:	22 1f       	adc	r18, r18
 7f4:	74 9f       	mul	r23, r20
 7f6:	33 27       	eor	r19, r19
 7f8:	a0 0d       	add	r26, r0
 7fa:	61 1d       	adc	r22, r1
 7fc:	23 1f       	adc	r18, r19
 7fe:	84 9f       	mul	r24, r20
 800:	60 0d       	add	r22, r0
 802:	21 1d       	adc	r18, r1
 804:	82 2f       	mov	r24, r18
 806:	76 2f       	mov	r23, r22
 808:	6a 2f       	mov	r22, r26
 80a:	11 24       	eor	r1, r1
 80c:	9f 57       	subi	r25, 0x7F	; 127
 80e:	50 40       	sbci	r21, 0x00	; 0
 810:	9a f0       	brmi	.+38     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 812:	f1 f0       	breq	.+60     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 814:	88 23       	and	r24, r24
 816:	4a f0       	brmi	.+18     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 818:	ee 0f       	add	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	bb 1f       	adc	r27, r27
 81e:	66 1f       	adc	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	91 50       	subi	r25, 0x01	; 1
 826:	50 40       	sbci	r21, 0x00	; 0
 828:	a9 f7       	brne	.-22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 82a:	9e 3f       	cpi	r25, 0xFE	; 254
 82c:	51 05       	cpc	r21, r1
 82e:	80 f0       	brcs	.+32     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 830:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_inf>
 834:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_szero>
 838:	5f 3f       	cpi	r21, 0xFF	; 255
 83a:	e4 f3       	brlt	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 83c:	98 3e       	cpi	r25, 0xE8	; 232
 83e:	d4 f3       	brlt	.-12     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 840:	86 95       	lsr	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	b7 95       	ror	r27
 848:	f7 95       	ror	r31
 84a:	e7 95       	ror	r30
 84c:	9f 5f       	subi	r25, 0xFF	; 255
 84e:	c1 f7       	brne	.-16     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 850:	fe 2b       	or	r31, r30
 852:	88 0f       	add	r24, r24
 854:	91 1d       	adc	r25, r1
 856:	96 95       	lsr	r25
 858:	87 95       	ror	r24
 85a:	97 f9       	bld	r25, 7
 85c:	08 95       	ret

0000085e <__fp_cmp>:
 85e:	99 0f       	add	r25, r25
 860:	00 08       	sbc	r0, r0
 862:	55 0f       	add	r21, r21
 864:	aa 0b       	sbc	r26, r26
 866:	e0 e8       	ldi	r30, 0x80	; 128
 868:	fe ef       	ldi	r31, 0xFE	; 254
 86a:	16 16       	cp	r1, r22
 86c:	17 06       	cpc	r1, r23
 86e:	e8 07       	cpc	r30, r24
 870:	f9 07       	cpc	r31, r25
 872:	c0 f0       	brcs	.+48     	; 0x8a4 <__fp_cmp+0x46>
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	e4 07       	cpc	r30, r20
 87a:	f5 07       	cpc	r31, r21
 87c:	98 f0       	brcs	.+38     	; 0x8a4 <__fp_cmp+0x46>
 87e:	62 1b       	sub	r22, r18
 880:	73 0b       	sbc	r23, r19
 882:	84 0b       	sbc	r24, r20
 884:	95 0b       	sbc	r25, r21
 886:	39 f4       	brne	.+14     	; 0x896 <__fp_cmp+0x38>
 888:	0a 26       	eor	r0, r26
 88a:	61 f0       	breq	.+24     	; 0x8a4 <__fp_cmp+0x46>
 88c:	23 2b       	or	r18, r19
 88e:	24 2b       	or	r18, r20
 890:	25 2b       	or	r18, r21
 892:	21 f4       	brne	.+8      	; 0x89c <__fp_cmp+0x3e>
 894:	08 95       	ret
 896:	0a 26       	eor	r0, r26
 898:	09 f4       	brne	.+2      	; 0x89c <__fp_cmp+0x3e>
 89a:	a1 40       	sbci	r26, 0x01	; 1
 89c:	a6 95       	lsr	r26
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	81 1d       	adc	r24, r1
 8a2:	81 1d       	adc	r24, r1
 8a4:	08 95       	ret

000008a6 <__tablejump2__>:
 8a6:	ee 0f       	add	r30, r30
 8a8:	ff 1f       	adc	r31, r31
 8aa:	05 90       	lpm	r0, Z+
 8ac:	f4 91       	lpm	r31, Z
 8ae:	e0 2d       	mov	r30, r0
 8b0:	09 94       	ijmp

000008b2 <_exit>:
 8b2:	f8 94       	cli

000008b4 <__stop_program>:
 8b4:	ff cf       	rjmp	.-2      	; 0x8b4 <__stop_program>
