
Kitchen_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000095c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fae  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d8  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0c  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079d  00000000  00000000  0000356d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_11>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	93 01       	movw	r18, r6
  6a:	96 01       	movw	r18, r12
  6c:	99 01       	movw	r18, r18
  6e:	9c 01       	movw	r18, r24
  70:	9f 01       	movw	r18, r30
  72:	a2 01       	movw	r20, r4
  74:	a5 01       	movw	r20, r10
  76:	a8 01       	movw	r20, r16
  78:	ab 01       	movw	r20, r22
  7a:	ae 01       	movw	r20, r28

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
  9c:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_12>:
ISR(TIMER1_COMPA_vect){

	TimeDisplay();
}

ISR(TIMER1_COMPB_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25

	if(PORTD == OFF){
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	29 f4       	brne	.+10     	; 0xc2 <__vector_12+0x1e>
		PORTD = ALL_LIGHT;
  b8:	1b b8       	out	0x0b, r1	; 11
		PORTB |= 1 << DDB0;
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	85 b9       	out	0x05, r24	; 5
  c0:	06 c0       	rjmp	.+12     	; 0xce <__vector_12+0x2a>
	}
	else{
		PORTD = OFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8b b9       	out	0x0b, r24	; 11
		PORTB ^= 1 << DDB0;
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 27       	eor	r24, r25
  cc:	85 b9       	out	0x05, r24	; 5
	}
	 
	TCNT1 = 0; 
  ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <TimeDisplay>:


void TimeDisplay(){
	
	if(remain_time[SECONDS_DIG1] == 0){
  e4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	80 81       	ld	r24, Z
  ee:	81 11       	cpse	r24, r1
  f0:	1e c0       	rjmp	.+60     	; 0x12e <TimeDisplay+0x4a>
		remain_time[SECONDS_DIG1] = 9;	
  f2:	89 e0       	ldi	r24, 0x09	; 9
  f4:	80 83       	st	Z, r24
			
		if(remain_time[SECONDS_DIG2] == 0){
  f6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	81 11       	cpse	r24, r1
 102:	12 c0       	rjmp	.+36     	; 0x128 <TimeDisplay+0x44>
			remain_time[SECONDS_DIG2] = 5;
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	81 83       	std	Z+1, r24	; 0x01
			
			if (remain_time[MINUTE_DIG1] == 0){
 108:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	82 81       	ldd	r24, Z+2	; 0x02
 112:	81 11       	cpse	r24, r1
 114:	06 c0       	rjmp	.+12     	; 0x122 <TimeDisplay+0x3e>
				remain_time[MINUTE_DIG2]--;
 116:	83 81       	ldd	r24, Z+3	; 0x03
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	83 83       	std	Z+3, r24	; 0x03
				remain_time[MINUTE_DIG1] = 9;
 11c:	89 e0       	ldi	r24, 0x09	; 9
 11e:	82 83       	std	Z+2, r24	; 0x02
 120:	08 95       	ret
			}
			else
				remain_time[MINUTE_DIG1]--;	
 122:	81 50       	subi	r24, 0x01	; 1
 124:	82 83       	std	Z+2, r24	; 0x02
 126:	08 95       	ret
		}
		else
			remain_time[SECONDS_DIG2]--;		
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	81 83       	std	Z+1, r24	; 0x01
 12c:	08 95       	ret
	}
	else
		remain_time[SECONDS_DIG1]--;
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <__vector_11>:


uint8_t *remain_time;


ISR(TIMER1_COMPA_vect){
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31

	TimeDisplay();
 156:	0e 94 72 00 	call	0xe4	; 0xe4 <TimeDisplay>
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <CountDown>:
	else
		remain_time[SECONDS_DIG1]--;
	
}

void CountDown(uint8_t d_num[]){
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24

	remain_time = d_num;
 186:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uint16_t hold_timer = 0;
	uint32_t *p;
	uint8_t reset_signal = RESET_OFF;


	TCNT1 = 0;	
 18e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 192:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1 << OCF1A;
 196:	86 b3       	in	r24, 0x16	; 22
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	86 bb       	out	0x16, r24	; 22
	SREG |= INTERRUPT_START;
 19c:	8f b7       	in	r24, 0x3f	; 63
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	8f bf       	out	0x3f, r24	; 63
	//sei();
	

	while (PINB & START_SWITCH)
 1a2:	11 c0       	rjmp	.+34     	; 0x1c6 <CountDown+0x4a>
	{
		if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0){
 1a4:	88 81       	ld	r24, Y
 1a6:	81 11       	cpse	r24, r1
 1a8:	0b c0       	rjmp	.+22     	; 0x1c0 <CountDown+0x44>
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	81 11       	cpse	r24, r1
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <CountDown+0x44>
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	81 11       	cpse	r24, r1
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <CountDown+0x44>
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	81 11       	cpse	r24, r1
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <CountDown+0x44>
			cli();
 1bc:	f8 94       	cli
			break;
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <CountDown+0x4e>
		}
		
		DynamicDrive(d_num);
 1c0:	ce 01       	movw	r24, r28
 1c2:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
	TIFR1 |= 1 << OCF1A;
	SREG |= INTERRUPT_START;
	//sei();
	

	while (PINB & START_SWITCH)
 1c6:	1c 99       	sbic	0x03, 4	; 3
 1c8:	ed cf       	rjmp	.-38     	; 0x1a4 <CountDown+0x28>
		DynamicDrive(d_num);
	}

	for(;;){

		if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0){
 1ca:	88 81       	ld	r24, Y
 1cc:	81 11       	cpse	r24, r1
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <CountDown+0x6c>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	81 11       	cpse	r24, r1
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <CountDown+0x6c>
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	81 11       	cpse	r24, r1
 1da:	06 c0       	rjmp	.+12     	; 0x1e8 <CountDown+0x6c>
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	81 11       	cpse	r24, r1
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <CountDown+0x6c>
			cli();
 1e2:	f8 94       	cli
void CountDown(uint8_t d_num[]){

	remain_time = d_num;
	uint16_t hold_timer = 0;
	uint32_t *p;
	uint8_t reset_signal = RESET_OFF;
 1e4:	90 e0       	ldi	r25, 0x00	; 0

	for(;;){

		if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0){
			cli();
			break;
 1e6:	43 c0       	rjmp	.+134    	; 0x26e <CountDown+0xf2>
		}

		if (PINB & START_SWITCH){
 1e8:	1c 9b       	sbis	0x03, 4	; 3
 1ea:	3d c0       	rjmp	.+122    	; 0x266 <CountDown+0xea>
			
			cli();
 1ec:	f8 94       	cli
			hold_timer = TCNT1;
 1ee:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1f2:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
			
			while (PINB & START_SWITCH){
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <CountDown+0x82>
				DynamicDrive(d_num);
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
		if (PINB & START_SWITCH){
			
			cli();
			hold_timer = TCNT1;
			
			while (PINB & START_SWITCH){
 1fe:	1c 99       	sbic	0x03, 4	; 3
 200:	fb cf       	rjmp	.-10     	; 0x1f8 <CountDown+0x7c>
 202:	03 c0       	rjmp	.+6      	; 0x20a <CountDown+0x8e>
				DynamicDrive(d_num);
			}
			
			while(!(PINB & START_SWITCH) && !(PINB & MINUTE_SWITCH)){
				DynamicDrive(d_num);
 204:	ce 01       	movw	r24, r28
 206:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
			
			while (PINB & START_SWITCH){
				DynamicDrive(d_num);
			}
			
			while(!(PINB & START_SWITCH) && !(PINB & MINUTE_SWITCH)){
 20a:	1c 99       	sbic	0x03, 4	; 3
 20c:	02 c0       	rjmp	.+4      	; 0x212 <CountDown+0x96>
 20e:	1a 9b       	sbis	0x03, 2	; 3
 210:	f9 cf       	rjmp	.-14     	; 0x204 <CountDown+0x88>
				DynamicDrive(d_num);
			}
			
			if(PINB & MINUTE_SWITCH){
 212:	1a 9b       	sbis	0x03, 2	; 3
 214:	0c c0       	rjmp	.+24     	; 0x22e <CountDown+0xb2>
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
 216:	18 82       	st	Y, r1
 218:	19 82       	std	Y+1, r1	; 0x01
 21a:	1a 82       	std	Y+2, r1	; 0x02
 21c:	1b 82       	std	Y+3, r1	; 0x03
				
				while (PINB & MINUTE_SWITCH){
 21e:	03 c0       	rjmp	.+6      	; 0x226 <CountDown+0xaa>
					DynamicDrive(d_num);
 220:	ce 01       	movw	r24, r28
 222:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
			if(PINB & MINUTE_SWITCH){
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
				
				while (PINB & MINUTE_SWITCH){
 226:	1a 99       	sbic	0x03, 2	; 3
 228:	fb cf       	rjmp	.-10     	; 0x220 <CountDown+0xa4>
					DynamicDrive(d_num);
				}				
				
				reset_signal = RESET_ON;
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	20 c0       	rjmp	.+64     	; 0x26e <CountDown+0xf2>
				
				break;
			}
			
			TCNT1 = hold_timer;
 22e:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 232:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 |= 1 << OCF1A;
 236:	86 b3       	in	r24, 0x16	; 22
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	86 bb       	out	0x16, r24	; 22
			//sei();	
			SREG |= INTERRUPT_START;
 23c:	8f b7       	in	r24, 0x3f	; 63
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	8f bf       	out	0x3f, r24	; 63
			
			while (PINB & START_SWITCH)
 242:	0f c0       	rjmp	.+30     	; 0x262 <CountDown+0xe6>
			{
				DynamicDrive(d_num);
 244:	ce 01       	movw	r24, r28
 246:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
				
				if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0)
 24a:	88 81       	ld	r24, Y
 24c:	81 11       	cpse	r24, r1
 24e:	09 c0       	rjmp	.+18     	; 0x262 <CountDown+0xe6>
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	81 11       	cpse	r24, r1
 254:	06 c0       	rjmp	.+12     	; 0x262 <CountDown+0xe6>
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	81 11       	cpse	r24, r1
 25a:	03 c0       	rjmp	.+6      	; 0x262 <CountDown+0xe6>
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	88 23       	and	r24, r24
 260:	11 f0       	breq	.+4      	; 0x266 <CountDown+0xea>
			TCNT1 = hold_timer;
			TIFR1 |= 1 << OCF1A;
			//sei();	
			SREG |= INTERRUPT_START;
			
			while (PINB & START_SWITCH)
 262:	1c 99       	sbic	0x03, 4	; 3
 264:	ef cf       	rjmp	.-34     	; 0x244 <CountDown+0xc8>
				if(d_num[SECONDS_DIG1] == 0 && d_num[SECONDS_DIG2] == 0 && d_num[MINUTE_DIG1] == 0 && d_num[MINUTE_DIG2] == 0)
					break;
			}			
		}
		
		DynamicDrive(d_num);
 266:	ce 01       	movw	r24, r28
 268:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
	}
 26c:	ae cf       	rjmp	.-164    	; 0x1ca <CountDown+0x4e>


	PORTD = ALL_LIGHT;
 26e:	1b b8       	out	0x0b, r1	; 11
	PORTB |= 1 << DDB0;
 270:	85 b1       	in	r24, 0x05	; 5
 272:	81 60       	ori	r24, 0x01	; 1
 274:	85 b9       	out	0x05, r24	; 5

	if(reset_signal == RESET_OFF){
 276:	91 11       	cpse	r25, r1
 278:	27 c0       	rjmp	.+78     	; 0x2c8 <CountDown+0x14c>
		
		TIMSK1 = B_INTERRUPT_ENABLE;
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		
		TCNT1 = 0;
 280:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 284:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIFR1 |= 1 << OCF1A;
 288:	86 b3       	in	r24, 0x16	; 22
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	86 bb       	out	0x16, r24	; 22
		SREG |= INTERRUPT_START;
 28e:	8f b7       	in	r24, 0x3f	; 63
 290:	80 68       	ori	r24, 0x80	; 128
 292:	8f bf       	out	0x3f, r24	; 63
	
		while(PINB & START_SWITCH){
 294:	02 c0       	rjmp	.+4      	; 0x29a <CountDown+0x11e>
			DisplayFlick();
 296:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DisplayFlick>
		
		TCNT1 = 0;
		TIFR1 |= 1 << OCF1A;
		SREG |= INTERRUPT_START;
	
		while(PINB & START_SWITCH){
 29a:	1c 99       	sbic	0x03, 4	; 3
 29c:	fc cf       	rjmp	.-8      	; 0x296 <CountDown+0x11a>
			DisplayFlick();
		}
	
		for(;;){
		
			if(PINB & START_SWITCH){
 29e:	1c 9b       	sbis	0x03, 4	; 3
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <CountDown+0x136>
				cli();
 2a2:	f8 94       	cli
				if(PORTB & 1 << DDB0)
 2a4:	28 9b       	sbis	0x05, 0	; 5
 2a6:	0b c0       	rjmp	.+22     	; 0x2be <CountDown+0x142>
					PORTB ^= 1 << DDB0;
 2a8:	95 b1       	in	r25, 0x05	; 5
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	89 27       	eor	r24, r25
 2ae:	85 b9       	out	0x05, r24	; 5
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <CountDown+0x142>
				
				break;
			}
	
			DisplayFlick();
 2b2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DisplayFlick>
		}
 2b6:	f3 cf       	rjmp	.-26     	; 0x29e <CountDown+0x122>
	
		while(PINB & START_SWITCH){
			DynamicDrive(d_num);
 2b8:	ce 01       	movw	r24, r28
 2ba:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
			}
	
			DisplayFlick();
		}
	
		while(PINB & START_SWITCH){
 2be:	1c 99       	sbic	0x03, 4	; 3
 2c0:	fb cf       	rjmp	.-10     	; 0x2b8 <CountDown+0x13c>
			DynamicDrive(d_num);
		}
		
		TIMSK1 = A_INTERRUPT_ENABLE;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	}
	
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <DisplayFlick>:
}


void DisplayFlick(){
	
	PORTC = DISPLAY_DIG4;
 2d2:	8e e0       	ldi	r24, 0x0E	; 14
 2d4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	8f ec       	ldi	r24, 0xCF	; 207
 2d8:	97 e0       	ldi	r25, 0x07	; 7
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <DisplayFlick+0x8>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <DisplayFlick+0xe>
 2e0:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG3;
 2e2:	8d e0       	ldi	r24, 0x0D	; 13
 2e4:	88 b9       	out	0x08, r24	; 8
 2e6:	8f ec       	ldi	r24, 0xCF	; 207
 2e8:	97 e0       	ldi	r25, 0x07	; 7
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <DisplayFlick+0x18>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <DisplayFlick+0x1e>
 2f0:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG2;
 2f2:	8b e0       	ldi	r24, 0x0B	; 11
 2f4:	88 b9       	out	0x08, r24	; 8
 2f6:	8f ec       	ldi	r24, 0xCF	; 207
 2f8:	97 e0       	ldi	r25, 0x07	; 7
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <DisplayFlick+0x28>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <DisplayFlick+0x2e>
 300:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTC = DISPLAY_DIG1;
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	88 b9       	out	0x08, r24	; 8
 306:	8f ec       	ldi	r24, 0xCF	; 207
 308:	97 e0       	ldi	r25, 0x07	; 7
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <DisplayFlick+0x38>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <DisplayFlick+0x3e>
 310:	00 00       	nop
 312:	08 95       	ret

00000314 <DisplaySegment>:
}


void DisplaySegment(uint8_t num){
	
	switch(num){
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	8a 30       	cpi	r24, 0x0A	; 10
 318:	91 05       	cpc	r25, r1
 31a:	18 f5       	brcc	.+70     	; 0x362 <DisplaySegment+0x4e>
 31c:	fc 01       	movw	r30, r24
 31e:	ec 5c       	subi	r30, 0xCC	; 204
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__tablejump2__>
		case DISPLAY_NUM0:
			PORTD = SEGMENT_NUM0;
 326:	80 ec       	ldi	r24, 0xC0	; 192
 328:	8b b9       	out	0x0b, r24	; 11
			break;
 32a:	08 95       	ret
		case DISPLAY_NUM1:
			PORTD = SEGMENT_NUM1;
 32c:	89 ef       	ldi	r24, 0xF9	; 249
 32e:	8b b9       	out	0x0b, r24	; 11
			break;
 330:	08 95       	ret
		case DISPLAY_NUM2:
			PORTD = SEGMENT_NUM2;
 332:	84 ea       	ldi	r24, 0xA4	; 164
 334:	8b b9       	out	0x0b, r24	; 11
			break;
 336:	08 95       	ret
		case DISPLAY_NUM3:
			PORTD = SEGMENT_NUM3;
 338:	80 eb       	ldi	r24, 0xB0	; 176
 33a:	8b b9       	out	0x0b, r24	; 11
			break;
 33c:	08 95       	ret
		case DISPLAY_NUM4:
			PORTD = SEGMENT_NUM4;
 33e:	89 e9       	ldi	r24, 0x99	; 153
 340:	8b b9       	out	0x0b, r24	; 11
			break;
 342:	08 95       	ret
		case DISPLAY_NUM5:
			PORTD = SEGMENT_NUM5;
 344:	82 e9       	ldi	r24, 0x92	; 146
 346:	8b b9       	out	0x0b, r24	; 11
			break;
 348:	08 95       	ret
		case DISPLAY_NUM6:
			PORTD = SEGMENT_NUM6;
 34a:	82 e8       	ldi	r24, 0x82	; 130
 34c:	8b b9       	out	0x0b, r24	; 11
			break;
 34e:	08 95       	ret
		case DISPLAY_NUM7:
			PORTD = SEGMENT_NUM7;
 350:	88 ed       	ldi	r24, 0xD8	; 216
 352:	8b b9       	out	0x0b, r24	; 11
			break;
 354:	08 95       	ret
		case DISPLAY_NUM8:
			PORTD = SEGMENT_NUM8;
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	8b b9       	out	0x0b, r24	; 11
			break;
 35a:	08 95       	ret
		case DISPLAY_NUM9:
			PORTD = SEGMENT_NUM9;
 35c:	80 e9       	ldi	r24, 0x90	; 144
 35e:	8b b9       	out	0x0b, r24	; 11
			break;
 360:	08 95       	ret
		default:
			PORTD = SEGMENT_ERROR;
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	8b b9       	out	0x0b, r24	; 11
 366:	08 95       	ret

00000368 <DynamicDrive>:


#include "Display.h"


void DynamicDrive(uint8_t disp[]){
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
	
	PORTD = OFF;
 370:	1f ef       	ldi	r17, 0xFF	; 255
 372:	1b b9       	out	0x0b, r17	; 11
	DisplaySegment(disp[SECONDS_DIG1]);
 374:	88 81       	ld	r24, Y
 376:	0e 94 8a 01 	call	0x314	; 0x314 <DisplaySegment>
	PORTC = DISPLAY_DIG4;
 37a:	8e e0       	ldi	r24, 0x0E	; 14
 37c:	88 b9       	out	0x08, r24	; 8
 37e:	8f ec       	ldi	r24, 0xCF	; 207
 380:	97 e0       	ldi	r25, 0x07	; 7
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <DynamicDrive+0x1a>
 386:	00 c0       	rjmp	.+0      	; 0x388 <DynamicDrive+0x20>
 388:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTD = OFF;
 38a:	1b b9       	out	0x0b, r17	; 11
	DisplaySegment(disp[SECONDS_DIG2]);
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	0e 94 8a 01 	call	0x314	; 0x314 <DisplaySegment>
	PORTC = DISPLAY_DIG3;
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	88 b9       	out	0x08, r24	; 8
 396:	8f ec       	ldi	r24, 0xCF	; 207
 398:	97 e0       	ldi	r25, 0x07	; 7
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <DynamicDrive+0x32>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <DynamicDrive+0x38>
 3a0:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTD = OFF;
 3a2:	1b b9       	out	0x0b, r17	; 11
	DisplaySegment(disp[MINUTE_DIG1]);
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	0e 94 8a 01 	call	0x314	; 0x314 <DisplaySegment>
	PORTD ^= 1 << PORTD7;    //Turn on the DP.
 3aa:	8b b1       	in	r24, 0x0b	; 11
 3ac:	80 58       	subi	r24, 0x80	; 128
 3ae:	8b b9       	out	0x0b, r24	; 11
	PORTC = DISPLAY_DIG2;
 3b0:	8b e0       	ldi	r24, 0x0B	; 11
 3b2:	88 b9       	out	0x08, r24	; 8
 3b4:	8f ec       	ldi	r24, 0xCF	; 207
 3b6:	97 e0       	ldi	r25, 0x07	; 7
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <DynamicDrive+0x50>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <DynamicDrive+0x56>
 3be:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTD = OFF;
 3c0:	1b b9       	out	0x0b, r17	; 11
	DisplaySegment(disp[MINUTE_DIG2]);
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	0e 94 8a 01 	call	0x314	; 0x314 <DisplaySegment>
	PORTC = DISPLAY_DIG1;
 3c8:	87 e0       	ldi	r24, 0x07	; 7
 3ca:	88 b9       	out	0x08, r24	; 8
 3cc:	8f ec       	ldi	r24, 0xCF	; 207
 3ce:	97 e0       	ldi	r25, 0x07	; 7
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <DynamicDrive+0x68>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <DynamicDrive+0x6e>
 3d6:	00 00       	nop
	_delay_ms(LIGHT_TIME);
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	08 95       	ret

000003e0 <main>:
#include "Display.h"
#include "Count.h"


int main(void)
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <main+0x6>
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <main+0x8>
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8_t display_num[4] = {0,0,0,0};
 3ec:	19 82       	std	Y+1, r1	; 0x01
 3ee:	1a 82       	std	Y+2, r1	; 0x02
 3f0:	1b 82       	std	Y+3, r1	; 0x03
 3f2:	1c 82       	std	Y+4, r1	; 0x04
		

	DDRB = 0b00000001;	
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00101111;	
 3f8:	8f e2       	ldi	r24, 0x2F	; 47
 3fa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11111111;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	8a b9       	out	0x0a, r24	; 10
	

	TCCR1A = 0b00000000;
 400:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = CTC_OPERATION;
 404:	8c e0       	ldi	r24, 0x0C	; 12
 406:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIMSK1 = A_INTERRUPT_ENABLE;
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	OCR1A = A_INTERRUPT_TIME;
 410:	81 e1       	ldi	r24, 0x11	; 17
 412:	9a e7       	ldi	r25, 0x7A	; 122
 414:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 418:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = B_INTERRUPT_TIME;
 41c:	88 e0       	ldi	r24, 0x08	; 8
 41e:	9d e3       	ldi	r25, 0x3D	; 61
 420:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 424:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	cli();
 428:	f8 94       	cli

	for(;;)
	{
		if(PINB & (1 << PINB2)){
 42a:	1a 9b       	sbis	0x03, 2	; 3
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			TCCR1B = STANDARD_OPERATION;
 42e:	01 e8       	ldi	r16, 0x81	; 129
 430:	10 e0       	ldi	r17, 0x00	; 0
 432:	84 e0       	ldi	r24, 0x04	; 4
 434:	f8 01       	movw	r30, r16
 436:	80 83       	st	Z, r24
			SetMinutes(display_num);
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	0e 94 4d 02 	call	0x49a	; 0x49a <SetMinutes>
			TCCR1B = CTC_OPERATION;
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	f8 01       	movw	r30, r16
 444:	80 83       	st	Z, r24
		}
		
		if(PINB & (1 << PINB3)){
 446:	1b 9b       	sbis	0x03, 3	; 3
 448:	04 c0       	rjmp	.+8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			SetSeconds(display_num);
 44a:	ce 01       	movw	r24, r28
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	0e 94 b9 02 	call	0x572	; 0x572 <SetSeconds>
		}
		
		if(PINB & (1 << PINB4)){
 452:	1c 9b       	sbis	0x03, 4	; 3
 454:	04 c0       	rjmp	.+8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			CountDown(display_num);
 456:	ce 01       	movw	r24, r28
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	0e 94 be 00 	call	0x17c	; 0x17c <CountDown>
		}
		
		DynamicDrive(display_num);
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
	}
 466:	e1 cf       	rjmp	.-62     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>

00000468 <MinutesCounter>:
 *  Author: Kazu-SK
 */ 

#include "SetTimer.h"

void MinutesCounter(uint8_t d_num[]){
 468:	fc 01       	movw	r30, r24
	
	if(d_num[MINUTE_DIG1] != 9)
 46a:	92 81       	ldd	r25, Z+2	; 0x02
 46c:	99 30       	cpi	r25, 0x09	; 9
 46e:	19 f0       	breq	.+6      	; 0x476 <MinutesCounter+0xe>
		d_num[MINUTE_DIG1]++;
 470:	9f 5f       	subi	r25, 0xFF	; 255
 472:	92 83       	std	Z+2, r25	; 0x02
 474:	08 95       	ret
	else{
		d_num[MINUTE_DIG1] = 0;
 476:	12 82       	std	Z+2, r1	; 0x02
		
		if(d_num[MINUTE_DIG2] != 9)
 478:	83 81       	ldd	r24, Z+3	; 0x03
 47a:	89 30       	cpi	r24, 0x09	; 9
 47c:	19 f0       	breq	.+6      	; 0x484 <MinutesCounter+0x1c>
			d_num[MINUTE_DIG2]++;
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	83 83       	std	Z+3, r24	; 0x03
 482:	08 95       	ret
		else
			d_num[MINUTE_DIG2] = 0;
 484:	13 82       	std	Z+3, r1	; 0x03
 486:	08 95       	ret

00000488 <SecondsCounter>:
	}
}

void SecondsCounter(uint8_t d_num[]){
 488:	fc 01       	movw	r30, r24

	if(d_num[SECONDS_DIG2] != 5)
 48a:	91 81       	ldd	r25, Z+1	; 0x01
 48c:	95 30       	cpi	r25, 0x05	; 5
 48e:	19 f0       	breq	.+6      	; 0x496 <SecondsCounter+0xe>
		d_num[SECONDS_DIG2]++;
 490:	9f 5f       	subi	r25, 0xFF	; 255
 492:	91 83       	std	Z+1, r25	; 0x01
 494:	08 95       	ret
	else
		d_num[SECONDS_DIG2] = 0;
 496:	11 82       	std	Z+1, r1	; 0x01
 498:	08 95       	ret

0000049a <SetMinutes>:
}


void SetMinutes(uint8_t d_num[]){
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	ec 01       	movw	r28, r24
	uint32_t *p;
	float pulse_count = 0.0;
	float push_time = 0.0;
	

	MinutesCounter(d_num);
 4a0:	0e 94 34 02 	call	0x468	; 0x468 <MinutesCounter>

	TCNT1 = 0;
 4a4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4a8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(PINB & MINUTE_SWITCH){
 4ac:	5d c0       	rjmp	.+186    	; 0x568 <SetMinutes+0xce>
		DynamicDrive(d_num);
 4ae:	ce 01       	movw	r24, r28
 4b0:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
		
		pulse_count = TCNT1;
 4b4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4b8:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 48 03 	call	0x690	; 0x690 <__floatunsisf>
		push_time = pulse_count * M_CYCLE / F;
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e8       	ldi	r20, 0x80	; 128
 4ca:	53 e4       	ldi	r21, 0x43	; 67
 4cc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	34 e2       	ldi	r19, 0x24	; 36
 4d4:	44 ef       	ldi	r20, 0xF4	; 244
 4d6:	5a e4       	ldi	r21, 0x4A	; 74
 4d8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__divsf3>
		
		if(push_time >= LONG_PLESS_TIME){
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	40 e8       	ldi	r20, 0x80	; 128
 4e2:	5f e3       	ldi	r21, 0x3F	; 63
 4e4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__gesf2>
 4e8:	88 23       	and	r24, r24
 4ea:	7c f1       	brlt	.+94     	; 0x54a <SetMinutes+0xb0>
			
			TCNT1 = 0;
 4ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			while(PINB & MINUTE_SWITCH && !(PINB & SECONDS_SWITCH)){
 4f4:	26 c0       	rjmp	.+76     	; 0x542 <SetMinutes+0xa8>
				
				pulse_count = TCNT1;
 4f6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4fa:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 48 03 	call	0x690	; 0x690 <__floatunsisf>
				push_time = pulse_count * M_CYCLE / F;
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e8       	ldi	r20, 0x80	; 128
 50c:	53 e4       	ldi	r21, 0x43	; 67
 50e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3>
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	34 e2       	ldi	r19, 0x24	; 36
 516:	44 ef       	ldi	r20, 0xF4	; 244
 518:	5a e4       	ldi	r21, 0x4A	; 74
 51a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__divsf3>
				
				if (push_time >= LONG_PLESS_COUNTER)
 51e:	2d ec       	ldi	r18, 0xCD	; 205
 520:	3c ec       	ldi	r19, 0xCC	; 204
 522:	4c ec       	ldi	r20, 0xCC	; 204
 524:	5d e3       	ldi	r21, 0x3D	; 61
 526:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__gesf2>
 52a:	88 23       	and	r24, r24
 52c:	3c f0       	brlt	.+14     	; 0x53c <SetMinutes+0xa2>
				{
					MinutesCounter(d_num);
 52e:	ce 01       	movw	r24, r28
 530:	0e 94 34 02 	call	0x468	; 0x468 <MinutesCounter>
					TCNT1 = 0;
 534:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 538:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				}
				
				DynamicDrive(d_num);
 53c:	ce 01       	movw	r24, r28
 53e:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
		
		if(push_time >= LONG_PLESS_TIME){
			
			TCNT1 = 0;
			
			while(PINB & MINUTE_SWITCH && !(PINB & SECONDS_SWITCH)){
 542:	1a 9b       	sbis	0x03, 2	; 3
 544:	02 c0       	rjmp	.+4      	; 0x54a <SetMinutes+0xb0>
 546:	1b 9b       	sbis	0x03, 3	; 3
 548:	d6 cf       	rjmp	.-84     	; 0x4f6 <SetMinutes+0x5c>
				
				DynamicDrive(d_num);
			}
		}
		
		if(PINB & SECONDS_SWITCH){
 54a:	1b 9b       	sbis	0x03, 3	; 3
 54c:	0d c0       	rjmp	.+26     	; 0x568 <SetMinutes+0xce>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 54e:	18 82       	st	Y, r1
 550:	19 82       	std	Y+1, r1	; 0x01
 552:	1a 82       	std	Y+2, r1	; 0x02
 554:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PINB & SECONDS_SWITCH || PINB & MINUTE_SWITCH){
 556:	03 c0       	rjmp	.+6      	; 0x55e <SetMinutes+0xc4>
				DynamicDrive(d_num);
 558:	ce 01       	movw	r24, r28
 55a:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
		
		if(PINB & SECONDS_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PINB & SECONDS_SWITCH || PINB & MINUTE_SWITCH){
 55e:	1b 99       	sbic	0x03, 3	; 3
 560:	fb cf       	rjmp	.-10     	; 0x558 <SetMinutes+0xbe>
 562:	1a 99       	sbic	0x03, 2	; 3
 564:	f9 cf       	rjmp	.-14     	; 0x558 <SetMinutes+0xbe>
 566:	02 c0       	rjmp	.+4      	; 0x56c <SetMinutes+0xd2>
	

	MinutesCounter(d_num);

	TCNT1 = 0;
	while(PINB & MINUTE_SWITCH){
 568:	1a 99       	sbic	0x03, 2	; 3
 56a:	a1 cf       	rjmp	.-190    	; 0x4ae <SetMinutes+0x14>
			
			break;
		}
	}
	
}
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <SetSeconds>:

void SetSeconds(uint8_t d_num[]){
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	ec 01       	movw	r28, r24
	
	uint32_t *p;
	
	
	SecondsCounter(d_num);
 578:	0e 94 44 02 	call	0x488	; 0x488 <SecondsCounter>
	
	while(PINB & SECONDS_SWITCH){
 57c:	12 c0       	rjmp	.+36     	; 0x5a2 <SetSeconds+0x30>
		DynamicDrive(d_num);
 57e:	ce 01       	movw	r24, r28
 580:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
		
		if(PINB & MINUTE_SWITCH){
 584:	1a 9b       	sbis	0x03, 2	; 3
 586:	0d c0       	rjmp	.+26     	; 0x5a2 <SetSeconds+0x30>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 588:	18 82       	st	Y, r1
 58a:	19 82       	std	Y+1, r1	; 0x01
 58c:	1a 82       	std	Y+2, r1	; 0x02
 58e:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PINB & SECONDS_SWITCH || PINB & MINUTE_SWITCH){
 590:	03 c0       	rjmp	.+6      	; 0x598 <SetSeconds+0x26>
				DynamicDrive(d_num);
 592:	ce 01       	movw	r24, r28
 594:	0e 94 b4 01 	call	0x368	; 0x368 <DynamicDrive>
		
		if(PINB & MINUTE_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PINB & SECONDS_SWITCH || PINB & MINUTE_SWITCH){
 598:	1b 99       	sbic	0x03, 3	; 3
 59a:	fb cf       	rjmp	.-10     	; 0x592 <SetSeconds+0x20>
 59c:	1a 99       	sbic	0x03, 2	; 3
 59e:	f9 cf       	rjmp	.-14     	; 0x592 <SetSeconds+0x20>
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <SetSeconds+0x34>
	uint32_t *p;
	
	
	SecondsCounter(d_num);
	
	while(PINB & SECONDS_SWITCH){
 5a2:	1b 99       	sbic	0x03, 3	; 3
 5a4:	ec cf       	rjmp	.-40     	; 0x57e <SetSeconds+0xc>
			
			break;
		}
	}
	
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <__divsf3>:
 5ac:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__divsf3x>
 5b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_round>
 5b4:	0e 94 95 03 	call	0x72a	; 0x72a <__fp_pscB>
 5b8:	58 f0       	brcs	.+22     	; 0x5d0 <__divsf3+0x24>
 5ba:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_pscA>
 5be:	40 f0       	brcs	.+16     	; 0x5d0 <__divsf3+0x24>
 5c0:	29 f4       	brne	.+10     	; 0x5cc <__divsf3+0x20>
 5c2:	5f 3f       	cpi	r21, 0xFF	; 255
 5c4:	29 f0       	breq	.+10     	; 0x5d0 <__divsf3+0x24>
 5c6:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_inf>
 5ca:	51 11       	cpse	r21, r1
 5cc:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_szero>
 5d0:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_nan>

000005d4 <__divsf3x>:
 5d4:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_split3>
 5d8:	68 f3       	brcs	.-38     	; 0x5b4 <__divsf3+0x8>

000005da <__divsf3_pse>:
 5da:	99 23       	and	r25, r25
 5dc:	b1 f3       	breq	.-20     	; 0x5ca <__divsf3+0x1e>
 5de:	55 23       	and	r21, r21
 5e0:	91 f3       	breq	.-28     	; 0x5c6 <__divsf3+0x1a>
 5e2:	95 1b       	sub	r25, r21
 5e4:	55 0b       	sbc	r21, r21
 5e6:	bb 27       	eor	r27, r27
 5e8:	aa 27       	eor	r26, r26
 5ea:	62 17       	cp	r22, r18
 5ec:	73 07       	cpc	r23, r19
 5ee:	84 07       	cpc	r24, r20
 5f0:	38 f0       	brcs	.+14     	; 0x600 <__divsf3_pse+0x26>
 5f2:	9f 5f       	subi	r25, 0xFF	; 255
 5f4:	5f 4f       	sbci	r21, 0xFF	; 255
 5f6:	22 0f       	add	r18, r18
 5f8:	33 1f       	adc	r19, r19
 5fa:	44 1f       	adc	r20, r20
 5fc:	aa 1f       	adc	r26, r26
 5fe:	a9 f3       	breq	.-22     	; 0x5ea <__divsf3_pse+0x10>
 600:	35 d0       	rcall	.+106    	; 0x66c <__divsf3_pse+0x92>
 602:	0e 2e       	mov	r0, r30
 604:	3a f0       	brmi	.+14     	; 0x614 <__divsf3_pse+0x3a>
 606:	e0 e8       	ldi	r30, 0x80	; 128
 608:	32 d0       	rcall	.+100    	; 0x66e <__divsf3_pse+0x94>
 60a:	91 50       	subi	r25, 0x01	; 1
 60c:	50 40       	sbci	r21, 0x00	; 0
 60e:	e6 95       	lsr	r30
 610:	00 1c       	adc	r0, r0
 612:	ca f7       	brpl	.-14     	; 0x606 <__divsf3_pse+0x2c>
 614:	2b d0       	rcall	.+86     	; 0x66c <__divsf3_pse+0x92>
 616:	fe 2f       	mov	r31, r30
 618:	29 d0       	rcall	.+82     	; 0x66c <__divsf3_pse+0x92>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	bb 1f       	adc	r27, r27
 622:	26 17       	cp	r18, r22
 624:	37 07       	cpc	r19, r23
 626:	48 07       	cpc	r20, r24
 628:	ab 07       	cpc	r26, r27
 62a:	b0 e8       	ldi	r27, 0x80	; 128
 62c:	09 f0       	breq	.+2      	; 0x630 <__divsf3_pse+0x56>
 62e:	bb 0b       	sbc	r27, r27
 630:	80 2d       	mov	r24, r0
 632:	bf 01       	movw	r22, r30
 634:	ff 27       	eor	r31, r31
 636:	93 58       	subi	r25, 0x83	; 131
 638:	5f 4f       	sbci	r21, 0xFF	; 255
 63a:	3a f0       	brmi	.+14     	; 0x64a <__divsf3_pse+0x70>
 63c:	9e 3f       	cpi	r25, 0xFE	; 254
 63e:	51 05       	cpc	r21, r1
 640:	78 f0       	brcs	.+30     	; 0x660 <__divsf3_pse+0x86>
 642:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_inf>
 646:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_szero>
 64a:	5f 3f       	cpi	r21, 0xFF	; 255
 64c:	e4 f3       	brlt	.-8      	; 0x646 <__divsf3_pse+0x6c>
 64e:	98 3e       	cpi	r25, 0xE8	; 232
 650:	d4 f3       	brlt	.-12     	; 0x646 <__divsf3_pse+0x6c>
 652:	86 95       	lsr	r24
 654:	77 95       	ror	r23
 656:	67 95       	ror	r22
 658:	b7 95       	ror	r27
 65a:	f7 95       	ror	r31
 65c:	9f 5f       	subi	r25, 0xFF	; 255
 65e:	c9 f7       	brne	.-14     	; 0x652 <__divsf3_pse+0x78>
 660:	88 0f       	add	r24, r24
 662:	91 1d       	adc	r25, r1
 664:	96 95       	lsr	r25
 666:	87 95       	ror	r24
 668:	97 f9       	bld	r25, 7
 66a:	08 95       	ret
 66c:	e1 e0       	ldi	r30, 0x01	; 1
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	bb 1f       	adc	r27, r27
 676:	62 17       	cp	r22, r18
 678:	73 07       	cpc	r23, r19
 67a:	84 07       	cpc	r24, r20
 67c:	ba 07       	cpc	r27, r26
 67e:	20 f0       	brcs	.+8      	; 0x688 <__divsf3_pse+0xae>
 680:	62 1b       	sub	r22, r18
 682:	73 0b       	sbc	r23, r19
 684:	84 0b       	sbc	r24, r20
 686:	ba 0b       	sbc	r27, r26
 688:	ee 1f       	adc	r30, r30
 68a:	88 f7       	brcc	.-30     	; 0x66e <__divsf3_pse+0x94>
 68c:	e0 95       	com	r30
 68e:	08 95       	ret

00000690 <__floatunsisf>:
 690:	e8 94       	clt
 692:	09 c0       	rjmp	.+18     	; 0x6a6 <__floatsisf+0x12>

00000694 <__floatsisf>:
 694:	97 fb       	bst	r25, 7
 696:	3e f4       	brtc	.+14     	; 0x6a6 <__floatsisf+0x12>
 698:	90 95       	com	r25
 69a:	80 95       	com	r24
 69c:	70 95       	com	r23
 69e:	61 95       	neg	r22
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 6a2:	8f 4f       	sbci	r24, 0xFF	; 255
 6a4:	9f 4f       	sbci	r25, 0xFF	; 255
 6a6:	99 23       	and	r25, r25
 6a8:	a9 f0       	breq	.+42     	; 0x6d4 <__floatsisf+0x40>
 6aa:	f9 2f       	mov	r31, r25
 6ac:	96 e9       	ldi	r25, 0x96	; 150
 6ae:	bb 27       	eor	r27, r27
 6b0:	93 95       	inc	r25
 6b2:	f6 95       	lsr	r31
 6b4:	87 95       	ror	r24
 6b6:	77 95       	ror	r23
 6b8:	67 95       	ror	r22
 6ba:	b7 95       	ror	r27
 6bc:	f1 11       	cpse	r31, r1
 6be:	f8 cf       	rjmp	.-16     	; 0x6b0 <__floatsisf+0x1c>
 6c0:	fa f4       	brpl	.+62     	; 0x700 <__floatsisf+0x6c>
 6c2:	bb 0f       	add	r27, r27
 6c4:	11 f4       	brne	.+4      	; 0x6ca <__floatsisf+0x36>
 6c6:	60 ff       	sbrs	r22, 0
 6c8:	1b c0       	rjmp	.+54     	; 0x700 <__floatsisf+0x6c>
 6ca:	6f 5f       	subi	r22, 0xFF	; 255
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	16 c0       	rjmp	.+44     	; 0x700 <__floatsisf+0x6c>
 6d4:	88 23       	and	r24, r24
 6d6:	11 f0       	breq	.+4      	; 0x6dc <__floatsisf+0x48>
 6d8:	96 e9       	ldi	r25, 0x96	; 150
 6da:	11 c0       	rjmp	.+34     	; 0x6fe <__floatsisf+0x6a>
 6dc:	77 23       	and	r23, r23
 6de:	21 f0       	breq	.+8      	; 0x6e8 <__floatsisf+0x54>
 6e0:	9e e8       	ldi	r25, 0x8E	; 142
 6e2:	87 2f       	mov	r24, r23
 6e4:	76 2f       	mov	r23, r22
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <__floatsisf+0x5e>
 6e8:	66 23       	and	r22, r22
 6ea:	71 f0       	breq	.+28     	; 0x708 <__floatsisf+0x74>
 6ec:	96 e8       	ldi	r25, 0x86	; 134
 6ee:	86 2f       	mov	r24, r22
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	2a f0       	brmi	.+10     	; 0x700 <__floatsisf+0x6c>
 6f6:	9a 95       	dec	r25
 6f8:	66 0f       	add	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	88 1f       	adc	r24, r24
 6fe:	da f7       	brpl	.-10     	; 0x6f6 <__floatsisf+0x62>
 700:	88 0f       	add	r24, r24
 702:	96 95       	lsr	r25
 704:	87 95       	ror	r24
 706:	97 f9       	bld	r25, 7
 708:	08 95       	ret

0000070a <__fp_inf>:
 70a:	97 f9       	bld	r25, 7
 70c:	9f 67       	ori	r25, 0x7F	; 127
 70e:	80 e8       	ldi	r24, 0x80	; 128
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	08 95       	ret

00000716 <__fp_nan>:
 716:	9f ef       	ldi	r25, 0xFF	; 255
 718:	80 ec       	ldi	r24, 0xC0	; 192
 71a:	08 95       	ret

0000071c <__fp_pscA>:
 71c:	00 24       	eor	r0, r0
 71e:	0a 94       	dec	r0
 720:	16 16       	cp	r1, r22
 722:	17 06       	cpc	r1, r23
 724:	18 06       	cpc	r1, r24
 726:	09 06       	cpc	r0, r25
 728:	08 95       	ret

0000072a <__fp_pscB>:
 72a:	00 24       	eor	r0, r0
 72c:	0a 94       	dec	r0
 72e:	12 16       	cp	r1, r18
 730:	13 06       	cpc	r1, r19
 732:	14 06       	cpc	r1, r20
 734:	05 06       	cpc	r0, r21
 736:	08 95       	ret

00000738 <__fp_round>:
 738:	09 2e       	mov	r0, r25
 73a:	03 94       	inc	r0
 73c:	00 0c       	add	r0, r0
 73e:	11 f4       	brne	.+4      	; 0x744 <__fp_round+0xc>
 740:	88 23       	and	r24, r24
 742:	52 f0       	brmi	.+20     	; 0x758 <__fp_round+0x20>
 744:	bb 0f       	add	r27, r27
 746:	40 f4       	brcc	.+16     	; 0x758 <__fp_round+0x20>
 748:	bf 2b       	or	r27, r31
 74a:	11 f4       	brne	.+4      	; 0x750 <__fp_round+0x18>
 74c:	60 ff       	sbrs	r22, 0
 74e:	04 c0       	rjmp	.+8      	; 0x758 <__fp_round+0x20>
 750:	6f 5f       	subi	r22, 0xFF	; 255
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	8f 4f       	sbci	r24, 0xFF	; 255
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	08 95       	ret

0000075a <__fp_split3>:
 75a:	57 fd       	sbrc	r21, 7
 75c:	90 58       	subi	r25, 0x80	; 128
 75e:	44 0f       	add	r20, r20
 760:	55 1f       	adc	r21, r21
 762:	59 f0       	breq	.+22     	; 0x77a <__fp_splitA+0x10>
 764:	5f 3f       	cpi	r21, 0xFF	; 255
 766:	71 f0       	breq	.+28     	; 0x784 <__fp_splitA+0x1a>
 768:	47 95       	ror	r20

0000076a <__fp_splitA>:
 76a:	88 0f       	add	r24, r24
 76c:	97 fb       	bst	r25, 7
 76e:	99 1f       	adc	r25, r25
 770:	61 f0       	breq	.+24     	; 0x78a <__fp_splitA+0x20>
 772:	9f 3f       	cpi	r25, 0xFF	; 255
 774:	79 f0       	breq	.+30     	; 0x794 <__fp_splitA+0x2a>
 776:	87 95       	ror	r24
 778:	08 95       	ret
 77a:	12 16       	cp	r1, r18
 77c:	13 06       	cpc	r1, r19
 77e:	14 06       	cpc	r1, r20
 780:	55 1f       	adc	r21, r21
 782:	f2 cf       	rjmp	.-28     	; 0x768 <__fp_split3+0xe>
 784:	46 95       	lsr	r20
 786:	f1 df       	rcall	.-30     	; 0x76a <__fp_splitA>
 788:	08 c0       	rjmp	.+16     	; 0x79a <__fp_splitA+0x30>
 78a:	16 16       	cp	r1, r22
 78c:	17 06       	cpc	r1, r23
 78e:	18 06       	cpc	r1, r24
 790:	99 1f       	adc	r25, r25
 792:	f1 cf       	rjmp	.-30     	; 0x776 <__fp_splitA+0xc>
 794:	86 95       	lsr	r24
 796:	71 05       	cpc	r23, r1
 798:	61 05       	cpc	r22, r1
 79a:	08 94       	sec
 79c:	08 95       	ret

0000079e <__fp_zero>:
 79e:	e8 94       	clt

000007a0 <__fp_szero>:
 7a0:	bb 27       	eor	r27, r27
 7a2:	66 27       	eor	r22, r22
 7a4:	77 27       	eor	r23, r23
 7a6:	cb 01       	movw	r24, r22
 7a8:	97 f9       	bld	r25, 7
 7aa:	08 95       	ret

000007ac <__gesf2>:
 7ac:	0e 94 48 04 	call	0x890	; 0x890 <__fp_cmp>
 7b0:	08 f4       	brcc	.+2      	; 0x7b4 <__gesf2+0x8>
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	08 95       	ret

000007b6 <__mulsf3>:
 7b6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__mulsf3x>
 7ba:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_round>
 7be:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_pscA>
 7c2:	38 f0       	brcs	.+14     	; 0x7d2 <__mulsf3+0x1c>
 7c4:	0e 94 95 03 	call	0x72a	; 0x72a <__fp_pscB>
 7c8:	20 f0       	brcs	.+8      	; 0x7d2 <__mulsf3+0x1c>
 7ca:	95 23       	and	r25, r21
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <__mulsf3+0x1c>
 7ce:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_inf>
 7d2:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_nan>
 7d6:	11 24       	eor	r1, r1
 7d8:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_szero>

000007dc <__mulsf3x>:
 7dc:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_split3>
 7e0:	70 f3       	brcs	.-36     	; 0x7be <__mulsf3+0x8>

000007e2 <__mulsf3_pse>:
 7e2:	95 9f       	mul	r25, r21
 7e4:	c1 f3       	breq	.-16     	; 0x7d6 <__mulsf3+0x20>
 7e6:	95 0f       	add	r25, r21
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	55 1f       	adc	r21, r21
 7ec:	62 9f       	mul	r22, r18
 7ee:	f0 01       	movw	r30, r0
 7f0:	72 9f       	mul	r23, r18
 7f2:	bb 27       	eor	r27, r27
 7f4:	f0 0d       	add	r31, r0
 7f6:	b1 1d       	adc	r27, r1
 7f8:	63 9f       	mul	r22, r19
 7fa:	aa 27       	eor	r26, r26
 7fc:	f0 0d       	add	r31, r0
 7fe:	b1 1d       	adc	r27, r1
 800:	aa 1f       	adc	r26, r26
 802:	64 9f       	mul	r22, r20
 804:	66 27       	eor	r22, r22
 806:	b0 0d       	add	r27, r0
 808:	a1 1d       	adc	r26, r1
 80a:	66 1f       	adc	r22, r22
 80c:	82 9f       	mul	r24, r18
 80e:	22 27       	eor	r18, r18
 810:	b0 0d       	add	r27, r0
 812:	a1 1d       	adc	r26, r1
 814:	62 1f       	adc	r22, r18
 816:	73 9f       	mul	r23, r19
 818:	b0 0d       	add	r27, r0
 81a:	a1 1d       	adc	r26, r1
 81c:	62 1f       	adc	r22, r18
 81e:	83 9f       	mul	r24, r19
 820:	a0 0d       	add	r26, r0
 822:	61 1d       	adc	r22, r1
 824:	22 1f       	adc	r18, r18
 826:	74 9f       	mul	r23, r20
 828:	33 27       	eor	r19, r19
 82a:	a0 0d       	add	r26, r0
 82c:	61 1d       	adc	r22, r1
 82e:	23 1f       	adc	r18, r19
 830:	84 9f       	mul	r24, r20
 832:	60 0d       	add	r22, r0
 834:	21 1d       	adc	r18, r1
 836:	82 2f       	mov	r24, r18
 838:	76 2f       	mov	r23, r22
 83a:	6a 2f       	mov	r22, r26
 83c:	11 24       	eor	r1, r1
 83e:	9f 57       	subi	r25, 0x7F	; 127
 840:	50 40       	sbci	r21, 0x00	; 0
 842:	9a f0       	brmi	.+38     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 844:	f1 f0       	breq	.+60     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 846:	88 23       	and	r24, r24
 848:	4a f0       	brmi	.+18     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 84a:	ee 0f       	add	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	bb 1f       	adc	r27, r27
 850:	66 1f       	adc	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	91 50       	subi	r25, 0x01	; 1
 858:	50 40       	sbci	r21, 0x00	; 0
 85a:	a9 f7       	brne	.-22     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 85c:	9e 3f       	cpi	r25, 0xFE	; 254
 85e:	51 05       	cpc	r21, r1
 860:	80 f0       	brcs	.+32     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 862:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_inf>
 866:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_szero>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	e4 f3       	brlt	.-8      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 86e:	98 3e       	cpi	r25, 0xE8	; 232
 870:	d4 f3       	brlt	.-12     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 872:	86 95       	lsr	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	b7 95       	ror	r27
 87a:	f7 95       	ror	r31
 87c:	e7 95       	ror	r30
 87e:	9f 5f       	subi	r25, 0xFF	; 255
 880:	c1 f7       	brne	.-16     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 882:	fe 2b       	or	r31, r30
 884:	88 0f       	add	r24, r24
 886:	91 1d       	adc	r25, r1
 888:	96 95       	lsr	r25
 88a:	87 95       	ror	r24
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <__fp_cmp>:
 890:	99 0f       	add	r25, r25
 892:	00 08       	sbc	r0, r0
 894:	55 0f       	add	r21, r21
 896:	aa 0b       	sbc	r26, r26
 898:	e0 e8       	ldi	r30, 0x80	; 128
 89a:	fe ef       	ldi	r31, 0xFE	; 254
 89c:	16 16       	cp	r1, r22
 89e:	17 06       	cpc	r1, r23
 8a0:	e8 07       	cpc	r30, r24
 8a2:	f9 07       	cpc	r31, r25
 8a4:	c0 f0       	brcs	.+48     	; 0x8d6 <__fp_cmp+0x46>
 8a6:	12 16       	cp	r1, r18
 8a8:	13 06       	cpc	r1, r19
 8aa:	e4 07       	cpc	r30, r20
 8ac:	f5 07       	cpc	r31, r21
 8ae:	98 f0       	brcs	.+38     	; 0x8d6 <__fp_cmp+0x46>
 8b0:	62 1b       	sub	r22, r18
 8b2:	73 0b       	sbc	r23, r19
 8b4:	84 0b       	sbc	r24, r20
 8b6:	95 0b       	sbc	r25, r21
 8b8:	39 f4       	brne	.+14     	; 0x8c8 <__fp_cmp+0x38>
 8ba:	0a 26       	eor	r0, r26
 8bc:	61 f0       	breq	.+24     	; 0x8d6 <__fp_cmp+0x46>
 8be:	23 2b       	or	r18, r19
 8c0:	24 2b       	or	r18, r20
 8c2:	25 2b       	or	r18, r21
 8c4:	21 f4       	brne	.+8      	; 0x8ce <__fp_cmp+0x3e>
 8c6:	08 95       	ret
 8c8:	0a 26       	eor	r0, r26
 8ca:	09 f4       	brne	.+2      	; 0x8ce <__fp_cmp+0x3e>
 8cc:	a1 40       	sbci	r26, 0x01	; 1
 8ce:	a6 95       	lsr	r26
 8d0:	8f ef       	ldi	r24, 0xFF	; 255
 8d2:	81 1d       	adc	r24, r1
 8d4:	81 1d       	adc	r24, r1
 8d6:	08 95       	ret

000008d8 <__tablejump2__>:
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	05 90       	lpm	r0, Z+
 8de:	f4 91       	lpm	r31, Z
 8e0:	e0 2d       	mov	r30, r0
 8e2:	09 94       	ijmp

000008e4 <_exit>:
 8e4:	f8 94       	cli

000008e6 <__stop_program>:
 8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <__stop_program>
