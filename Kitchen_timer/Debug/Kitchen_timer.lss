
Kitchen_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000946  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec9  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d0  00000000  00000000  000022cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000790  00000000  00000000  00003306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003a96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_11>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	86 01       	movw	r16, r12
  6a:	89 01       	movw	r16, r18
  6c:	8c 01       	movw	r16, r24
  6e:	8f 01       	movw	r16, r30
  70:	92 01       	movw	r18, r4
  72:	95 01       	movw	r18, r10
  74:	98 01       	movw	r18, r16
  76:	9b 01       	movw	r18, r22
  78:	9e 01       	movw	r18, r28
  7a:	a1 01       	movw	r20, r2

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  9c:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_12>:
ISR(TIMER1_COMPA_vect){

	TimeDisplay();
}

ISR(TIMER1_COMPB_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	
	if(PORTB == OFF)
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8f 3f       	cpi	r24, 0xFF	; 255
  b4:	11 f4       	brne	.+4      	; 0xba <__vector_12+0x16>
		PORTB = ALL_LIGHT;
  b6:	15 b8       	out	0x05, r1	; 5
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_12+0x1a>
	else
		PORTB = OFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	85 b9       	out	0x05, r24	; 5
	
	TCNT1 = 0; 
  be:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <TimeDisplay>:


void TimeDisplay(){
	
	if(remain_time[0] == 0){
  d2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	80 81       	ld	r24, Z
  dc:	81 11       	cpse	r24, r1
  de:	1e c0       	rjmp	.+60     	; 0x11c <TimeDisplay+0x4a>
		remain_time[0] = 9;	
  e0:	89 e0       	ldi	r24, 0x09	; 9
  e2:	80 83       	st	Z, r24
			
		if(remain_time[1] == 0){
  e4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	81 81       	ldd	r24, Z+1	; 0x01
  ee:	81 11       	cpse	r24, r1
  f0:	12 c0       	rjmp	.+36     	; 0x116 <TimeDisplay+0x44>
			remain_time[1] = 5;
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	81 83       	std	Z+1, r24	; 0x01
			
			if (remain_time[2] == 0){
  f6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	82 81       	ldd	r24, Z+2	; 0x02
 100:	81 11       	cpse	r24, r1
 102:	06 c0       	rjmp	.+12     	; 0x110 <TimeDisplay+0x3e>
				remain_time[3]--;
 104:	83 81       	ldd	r24, Z+3	; 0x03
 106:	81 50       	subi	r24, 0x01	; 1
 108:	83 83       	std	Z+3, r24	; 0x03
				remain_time[2] = 9;
 10a:	89 e0       	ldi	r24, 0x09	; 9
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	08 95       	ret
			}
			else
				remain_time[2]--;	
 110:	81 50       	subi	r24, 0x01	; 1
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	08 95       	ret
		}
		else
			remain_time[1]--;		
 116:	81 50       	subi	r24, 0x01	; 1
 118:	81 83       	std	Z+1, r24	; 0x01
 11a:	08 95       	ret
	}
	else
		remain_time[0]--;
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <__vector_11>:


uint8_t *remain_time;


ISR(TIMER1_COMPA_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31

	TimeDisplay();
 144:	0e 94 69 00 	call	0xd2	; 0xd2 <TimeDisplay>
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <CountDown>:
	else
		remain_time[0]--;
	
}

void CountDown(uint8_t d_num[]){
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24

	remain_time = d_num;
 174:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uint16_t hold_timer = 0;
	uint32_t *p;
	uint8_t reset_signal = 0;


	TCNT1 = 0;	
 17c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 180:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1 << OCF1A;
 184:	86 b3       	in	r24, 0x16	; 22
 186:	82 60       	ori	r24, 0x02	; 2
 188:	86 bb       	out	0x16, r24	; 22
	SREG |= 0x80;
 18a:	8f b7       	in	r24, 0x3f	; 63
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	8f bf       	out	0x3f, r24	; 63
	//sei();
	

	while (PIND & START_SWITCH)
 190:	11 c0       	rjmp	.+34     	; 0x1b4 <CountDown+0x4a>
	{
		if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0){
 192:	88 81       	ld	r24, Y
 194:	81 11       	cpse	r24, r1
 196:	0b c0       	rjmp	.+22     	; 0x1ae <CountDown+0x44>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	81 11       	cpse	r24, r1
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <CountDown+0x44>
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	81 11       	cpse	r24, r1
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <CountDown+0x44>
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	81 11       	cpse	r24, r1
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <CountDown+0x44>
			cli();
 1aa:	f8 94       	cli
			break;
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <CountDown+0x4e>
		}
		
		DynamicDrive(d_num);
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
	TIFR1 |= 1 << OCF1A;
	SREG |= 0x80;
	//sei();
	

	while (PIND & START_SWITCH)
 1b4:	4c 99       	sbic	0x09, 4	; 9
 1b6:	ed cf       	rjmp	.-38     	; 0x192 <CountDown+0x28>
		DynamicDrive(d_num);
	}

	for(;;){

		if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0){
 1b8:	88 81       	ld	r24, Y
 1ba:	81 11       	cpse	r24, r1
 1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <CountDown+0x6a>
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	81 11       	cpse	r24, r1
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <CountDown+0x6a>
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	81 11       	cpse	r24, r1
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <CountDown+0x6a>
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	81 11       	cpse	r24, r1
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <CountDown+0x6a>
			cli();
 1d0:	f8 94       	cli
			break;
 1d2:	43 c0       	rjmp	.+134    	; 0x25a <CountDown+0xf0>
		}

		if (PIND & START_SWITCH){
 1d4:	4c 9b       	sbis	0x09, 4	; 9
 1d6:	3d c0       	rjmp	.+122    	; 0x252 <CountDown+0xe8>
			
			cli();
 1d8:	f8 94       	cli
			hold_timer = TCNT1;
 1da:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1de:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
			
			while (PIND & START_SWITCH){
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <CountDown+0x80>
				DynamicDrive(d_num);
 1e4:	ce 01       	movw	r24, r28
 1e6:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
		if (PIND & START_SWITCH){
			
			cli();
			hold_timer = TCNT1;
			
			while (PIND & START_SWITCH){
 1ea:	4c 99       	sbic	0x09, 4	; 9
 1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <CountDown+0x7a>
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <CountDown+0x8c>
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
				DynamicDrive(d_num);
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
			
			while (PIND & START_SWITCH){
				DynamicDrive(d_num);
			}
			
			while(!(PIND & START_SWITCH) && !(PIND & MINUTE_SWITCH)){
 1f6:	4c 99       	sbic	0x09, 4	; 9
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <CountDown+0x94>
 1fa:	4a 9b       	sbis	0x09, 2	; 9
 1fc:	f9 cf       	rjmp	.-14     	; 0x1f0 <CountDown+0x86>
				DynamicDrive(d_num);
			}
			
			if(PIND & MINUTE_SWITCH){
 1fe:	4a 9b       	sbis	0x09, 2	; 9
 200:	0c c0       	rjmp	.+24     	; 0x21a <CountDown+0xb0>
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
 202:	18 82       	st	Y, r1
 204:	19 82       	std	Y+1, r1	; 0x01
 206:	1a 82       	std	Y+2, r1	; 0x02
 208:	1b 82       	std	Y+3, r1	; 0x03
				
				while (PIND & MINUTE_SWITCH){
 20a:	03 c0       	rjmp	.+6      	; 0x212 <CountDown+0xa8>
					DynamicDrive(d_num);
 20c:	ce 01       	movw	r24, r28
 20e:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
			if(PIND & MINUTE_SWITCH){
				
				p = (uint32_t *)d_num;
				*p = 0x00000000;
				
				while (PIND & MINUTE_SWITCH){
 212:	4a 99       	sbic	0x09, 2	; 9
 214:	fb cf       	rjmp	.-10     	; 0x20c <CountDown+0xa2>
					DynamicDrive(d_num);
				}				
				
				reset_signal = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	20 c0       	rjmp	.+64     	; 0x25a <CountDown+0xf0>
				
				break;
			}
			
			TCNT1 = hold_timer;
 21a:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 21e:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 |= 1 << OCF1A;
 222:	86 b3       	in	r24, 0x16	; 22
 224:	82 60       	ori	r24, 0x02	; 2
 226:	86 bb       	out	0x16, r24	; 22
			//sei();	
			SREG |= 0x80;
 228:	8f b7       	in	r24, 0x3f	; 63
 22a:	80 68       	ori	r24, 0x80	; 128
 22c:	8f bf       	out	0x3f, r24	; 63
			
			while (PIND & START_SWITCH)
 22e:	0f c0       	rjmp	.+30     	; 0x24e <CountDown+0xe4>
			{
				DynamicDrive(d_num);
 230:	ce 01       	movw	r24, r28
 232:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
				
				if(d_num[0] == 0 && d_num[1] == 0 && d_num[2] == 0 && d_num[3] == 0)
 236:	88 81       	ld	r24, Y
 238:	81 11       	cpse	r24, r1
 23a:	09 c0       	rjmp	.+18     	; 0x24e <CountDown+0xe4>
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	81 11       	cpse	r24, r1
 240:	06 c0       	rjmp	.+12     	; 0x24e <CountDown+0xe4>
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	81 11       	cpse	r24, r1
 246:	03 c0       	rjmp	.+6      	; 0x24e <CountDown+0xe4>
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	88 23       	and	r24, r24
 24c:	11 f0       	breq	.+4      	; 0x252 <CountDown+0xe8>
			TCNT1 = hold_timer;
			TIFR1 |= 1 << OCF1A;
			//sei();	
			SREG |= 0x80;
			
			while (PIND & START_SWITCH)
 24e:	4c 99       	sbic	0x09, 4	; 9
 250:	ef cf       	rjmp	.-34     	; 0x230 <CountDown+0xc6>
			}			
		}
		

		
		DynamicDrive(d_num);
 252:	ce 01       	movw	r24, r28
 254:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
	}
 258:	af cf       	rjmp	.-162    	; 0x1b8 <CountDown+0x4e>

//	TCCR1A = 0b00000000;
//	TCCR1B = 0b00001100;

	PORTB = 0x00;
 25a:	15 b8       	out	0x05, r1	; 5

    if(reset_signal == 0){
 25c:	81 11       	cpse	r24, r1
 25e:	27 c0       	rjmp	.+78     	; 0x2ae <CountDown+0x144>
		
		TIMSK1 = 0b00000100;
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		
		OCR1B = 15624;
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	9d e3       	ldi	r25, 0x3D	; 61
 26a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 26e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

		TCNT1 = 0;
 272:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 276:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIFR1 |= 1 << OCF1A;
 27a:	86 b3       	in	r24, 0x16	; 22
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	86 bb       	out	0x16, r24	; 22
		SREG |= 0x80;
 280:	8f b7       	in	r24, 0x3f	; 63
 282:	80 68       	ori	r24, 0x80	; 128
 284:	8f bf       	out	0x3f, r24	; 63
	
		while(PIND & START_SWITCH){
 286:	02 c0       	rjmp	.+4      	; 0x28c <CountDown+0x122>
			DisplayFlick();
 288:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DisplayFlick>

		TCNT1 = 0;
		TIFR1 |= 1 << OCF1A;
		SREG |= 0x80;
	
		while(PIND & START_SWITCH){
 28c:	4c 99       	sbic	0x09, 4	; 9
 28e:	fc cf       	rjmp	.-8      	; 0x288 <CountDown+0x11e>
			DisplayFlick();
		}
	
		for(;;){
		
			if(PIND & START_SWITCH){
 290:	4c 9b       	sbis	0x09, 4	; 9
 292:	02 c0       	rjmp	.+4      	; 0x298 <CountDown+0x12e>
				cli();
 294:	f8 94       	cli
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <CountDown+0x13a>
			if(PIND & START_SWITCH){
				cli();
				break;
			}
	
			DisplayFlick();
 298:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DisplayFlick>
		}
 29c:	f9 cf       	rjmp	.-14     	; 0x290 <CountDown+0x126>
	
		while(PIND & START_SWITCH){
			DynamicDrive(d_num);
 29e:	ce 01       	movw	r24, r28
 2a0:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
			}
	
			DisplayFlick();
		}
	
		while(PIND & START_SWITCH){
 2a4:	4c 99       	sbic	0x09, 4	; 9
 2a6:	fb cf       	rjmp	.-10     	; 0x29e <CountDown+0x134>
			DynamicDrive(d_num);
		}
		
		TIMSK1 = 0b00000010;
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	}
	
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <DisplayFlick>:
}


void DisplayFlick(){
	
	PORTC = DISPLAY_DIG4;
 2b8:	8e e0       	ldi	r24, 0x0E	; 14
 2ba:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	8f ec       	ldi	r24, 0xCF	; 207
 2be:	97 e0       	ldi	r25, 0x07	; 7
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <DisplayFlick+0x8>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <DisplayFlick+0xe>
 2c6:	00 00       	nop
	_delay_ms(LIGHT_TIME);

	PORTC = DISPLAY_DIG3;
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	88 b9       	out	0x08, r24	; 8
 2cc:	8f e9       	ldi	r24, 0x9F	; 159
 2ce:	9f e0       	ldi	r25, 0x0F	; 15
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <DisplayFlick+0x18>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <DisplayFlick+0x1e>
 2d6:	00 00       	nop
	_delay_ms(2);

	PORTC = DISPLAY_DIG2;
 2d8:	8b e0       	ldi	r24, 0x0B	; 11
 2da:	88 b9       	out	0x08, r24	; 8
 2dc:	8f ec       	ldi	r24, 0xCF	; 207
 2de:	97 e0       	ldi	r25, 0x07	; 7
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <DisplayFlick+0x28>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <DisplayFlick+0x2e>
 2e6:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTC = DISPLAY_DIG1;
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	88 b9       	out	0x08, r24	; 8
 2ec:	8f ec       	ldi	r24, 0xCF	; 207
 2ee:	97 e0       	ldi	r25, 0x07	; 7
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <DisplayFlick+0x38>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <DisplayFlick+0x3e>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <DisplaySegment>:
}


void DisplaySegment(uint8_t num){
	
	switch(num){
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	8a 30       	cpi	r24, 0x0A	; 10
 2fe:	91 05       	cpc	r25, r1
 300:	18 f5       	brcc	.+70     	; 0x348 <DisplaySegment+0x4e>
 302:	fc 01       	movw	r30, r24
 304:	ec 5c       	subi	r30, 0xCC	; 204
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__tablejump2__>
		case 0:
			PORTB = DISPLAY_NUM0;
 30c:	80 ec       	ldi	r24, 0xC0	; 192
 30e:	85 b9       	out	0x05, r24	; 5
			break;
 310:	08 95       	ret
		case 1:
			PORTB = DISPLAY_NUM1;
 312:	89 ef       	ldi	r24, 0xF9	; 249
 314:	85 b9       	out	0x05, r24	; 5
			break;
 316:	08 95       	ret
		case 2:
			PORTB = DISPLAY_NUM2;
 318:	84 ea       	ldi	r24, 0xA4	; 164
 31a:	85 b9       	out	0x05, r24	; 5
			break;
 31c:	08 95       	ret
		case 3:
			PORTB = DISPLAY_NUM3;
 31e:	80 eb       	ldi	r24, 0xB0	; 176
 320:	85 b9       	out	0x05, r24	; 5
			break;
 322:	08 95       	ret
		case 4:
			PORTB = DISPLAY_NUM4;
 324:	89 e9       	ldi	r24, 0x99	; 153
 326:	85 b9       	out	0x05, r24	; 5
			break;
 328:	08 95       	ret
		case 5:
			PORTB = DISPLAY_NUM5;
 32a:	82 e9       	ldi	r24, 0x92	; 146
 32c:	85 b9       	out	0x05, r24	; 5
			break;
 32e:	08 95       	ret
		case 6:
			PORTB = DISPLAY_NUM6;
 330:	82 e8       	ldi	r24, 0x82	; 130
 332:	85 b9       	out	0x05, r24	; 5
			break;
 334:	08 95       	ret
		case 7:
			PORTB = DISPLAY_NUM7;
 336:	88 ed       	ldi	r24, 0xD8	; 216
 338:	85 b9       	out	0x05, r24	; 5
			break;
 33a:	08 95       	ret
		case 8:
			PORTB = DISPLAY_NUM8;
 33c:	80 e8       	ldi	r24, 0x80	; 128
 33e:	85 b9       	out	0x05, r24	; 5
			break;
 340:	08 95       	ret
		case 9:
			PORTB = DISPLAY_NUM9;
 342:	80 e9       	ldi	r24, 0x90	; 144
 344:	85 b9       	out	0x05, r24	; 5
			break;
 346:	08 95       	ret
		default:
			PORTB = DISPLAY_ERROR;
 348:	86 e0       	ldi	r24, 0x06	; 6
 34a:	85 b9       	out	0x05, r24	; 5
 34c:	08 95       	ret

0000034e <DynamicDrive>:


#include "Display.h"


void DynamicDrive(uint8_t disp[]){
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
	
	PORTB = OFF;
 356:	1f ef       	ldi	r17, 0xFF	; 255
 358:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[0]);
 35a:	88 81       	ld	r24, Y
 35c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DisplaySegment>
	PORTC = DISPLAY_DIG4;
 360:	8e e0       	ldi	r24, 0x0E	; 14
 362:	88 b9       	out	0x08, r24	; 8
 364:	8f ec       	ldi	r24, 0xCF	; 207
 366:	97 e0       	ldi	r25, 0x07	; 7
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <DynamicDrive+0x1a>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <DynamicDrive+0x20>
 36e:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 370:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[1]);
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DisplaySegment>
	PORTC = DISPLAY_DIG3;
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	88 b9       	out	0x08, r24	; 8
 37c:	8f ec       	ldi	r24, 0xCF	; 207
 37e:	97 e0       	ldi	r25, 0x07	; 7
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <DynamicDrive+0x32>
 384:	00 c0       	rjmp	.+0      	; 0x386 <DynamicDrive+0x38>
 386:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 388:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[2]);
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DisplaySegment>
	PORTB ^= 1 << PORTB7;    //Turn on the DP.
 390:	85 b1       	in	r24, 0x05	; 5
 392:	80 58       	subi	r24, 0x80	; 128
 394:	85 b9       	out	0x05, r24	; 5
	PORTC = DISPLAY_DIG2;
 396:	8b e0       	ldi	r24, 0x0B	; 11
 398:	88 b9       	out	0x08, r24	; 8
 39a:	8f ec       	ldi	r24, 0xCF	; 207
 39c:	97 e0       	ldi	r25, 0x07	; 7
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <DynamicDrive+0x50>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <DynamicDrive+0x56>
 3a4:	00 00       	nop
	_delay_ms(LIGHT_TIME);
	
	PORTB = OFF;
 3a6:	15 b9       	out	0x05, r17	; 5
	DisplaySegment(disp[3]);
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DisplaySegment>
	PORTC = DISPLAY_DIG1;
 3ae:	87 e0       	ldi	r24, 0x07	; 7
 3b0:	88 b9       	out	0x08, r24	; 8
 3b2:	8f ec       	ldi	r24, 0xCF	; 207
 3b4:	97 e0       	ldi	r25, 0x07	; 7
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <DynamicDrive+0x68>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <DynamicDrive+0x6e>
 3bc:	00 00       	nop
	_delay_ms(LIGHT_TIME);
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	08 95       	ret

000003c6 <main>:
#include "Display.h"
#include "Count.h"


int main(void)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <main+0x6>
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <main+0x8>
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8_t display_num[4] = {0,0,0,0};
 3d2:	19 82       	std	Y+1, r1	; 0x01
 3d4:	1a 82       	std	Y+2, r1	; 0x02
 3d6:	1b 82       	std	Y+3, r1	; 0x03
 3d8:	1c 82       	std	Y+4, r1	; 0x04
		
		
	DDRB = 0b11111111;
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00101111;
 3de:	8f e2       	ldi	r24, 0x2F	; 47
 3e0:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00000000;
 3e2:	1a b8       	out	0x0a, r1	; 10
	

	TCCR1A = 0b00000000;
 3e4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0b00001100;
 3e8:	8c e0       	ldi	r24, 0x0C	; 12
 3ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIMSK1 = 0b00000010;
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1A = 31249;
 3f4:	81 e1       	ldi	r24, 0x11	; 17
 3f6:	9a e7       	ldi	r25, 0x7A	; 122
 3f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 15624;
 400:	88 e0       	ldi	r24, 0x08	; 8
 402:	9d e3       	ldi	r25, 0x3D	; 61
 404:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 408:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	cli();
 40c:	f8 94       	cli

	for(;;)
	{
		if(PIND & (1 << PIND2)){
 40e:	4a 9b       	sbis	0x09, 2	; 9
 410:	0f c0       	rjmp	.+30     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			TCCR1B ^= 1 << WGM12;
 412:	01 e8       	ldi	r16, 0x81	; 129
 414:	10 e0       	ldi	r17, 0x00	; 0
 416:	f8 01       	movw	r30, r16
 418:	90 81       	ld	r25, Z
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	89 27       	eor	r24, r25
 41e:	80 83       	st	Z, r24
			SetMinutes(display_num);
 420:	ce 01       	movw	r24, r28
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	0e 94 42 02 	call	0x484	; 0x484 <SetMinutes>
			TCCR1B |= 1 << WGM12;
 428:	f8 01       	movw	r30, r16
 42a:	80 81       	ld	r24, Z
 42c:	88 60       	ori	r24, 0x08	; 8
 42e:	80 83       	st	Z, r24
		}
		
		if(PIND & (1 << PIND3)){
 430:	4b 9b       	sbis	0x09, 3	; 9
 432:	04 c0       	rjmp	.+8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			SetSeconds(display_num);
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	0e 94 ae 02 	call	0x55c	; 0x55c <SetSeconds>
		}
		
		if(PIND & (1 << PIND4)){
 43c:	4c 9b       	sbis	0x09, 4	; 9
 43e:	04 c0       	rjmp	.+8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			CountDown(display_num);
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	0e 94 b5 00 	call	0x16a	; 0x16a <CountDown>
		}
		
		DynamicDrive(display_num);
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
	}
 450:	de cf       	rjmp	.-68     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>

00000452 <MinutesCounter>:
 *  Author: Kazu-SK
 */ 

#include "SetTimer.h"

void MinutesCounter(uint8_t d_num[]){
 452:	fc 01       	movw	r30, r24
	
	if(d_num[2] != 9)
 454:	92 81       	ldd	r25, Z+2	; 0x02
 456:	99 30       	cpi	r25, 0x09	; 9
 458:	19 f0       	breq	.+6      	; 0x460 <MinutesCounter+0xe>
		d_num[2]++;
 45a:	9f 5f       	subi	r25, 0xFF	; 255
 45c:	92 83       	std	Z+2, r25	; 0x02
 45e:	08 95       	ret
	else{
		d_num[2] = 0;
 460:	12 82       	std	Z+2, r1	; 0x02
		
		if(d_num[3] != 9)
 462:	83 81       	ldd	r24, Z+3	; 0x03
 464:	89 30       	cpi	r24, 0x09	; 9
 466:	19 f0       	breq	.+6      	; 0x46e <MinutesCounter+0x1c>
			d_num[3]++;
 468:	8f 5f       	subi	r24, 0xFF	; 255
 46a:	83 83       	std	Z+3, r24	; 0x03
 46c:	08 95       	ret
		else
			d_num[3] = 0;
 46e:	13 82       	std	Z+3, r1	; 0x03
 470:	08 95       	ret

00000472 <SecondsCounter>:
	}
}

void SecondsCounter(uint8_t d_num[]){
 472:	fc 01       	movw	r30, r24

	if(d_num[1] != 5)
 474:	91 81       	ldd	r25, Z+1	; 0x01
 476:	95 30       	cpi	r25, 0x05	; 5
 478:	19 f0       	breq	.+6      	; 0x480 <SecondsCounter+0xe>
		d_num[1]++;
 47a:	9f 5f       	subi	r25, 0xFF	; 255
 47c:	91 83       	std	Z+1, r25	; 0x01
 47e:	08 95       	ret
	else
		d_num[1] = 0;
 480:	11 82       	std	Z+1, r1	; 0x01
 482:	08 95       	ret

00000484 <SetMinutes>:
}


void SetMinutes(uint8_t d_num[]){
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	ec 01       	movw	r28, r24
	float pulse_count = 0.0;
	float push_time = 0.0;
	


	MinutesCounter(d_num);
 48a:	0e 94 29 02 	call	0x452	; 0x452 <MinutesCounter>

	TCNT1 = 0;
 48e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 492:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(PIND & MINUTE_SWITCH){
 496:	5d c0       	rjmp	.+186    	; 0x552 <SetMinutes+0xce>
		DynamicDrive(d_num);
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
		
		pulse_count = TCNT1;
 49e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4a2:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 3d 03 	call	0x67a	; 0x67a <__floatunsisf>
		push_time = pulse_count * M_CYCLE / F;
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	40 e8       	ldi	r20, 0x80	; 128
 4b4:	53 e4       	ldi	r21, 0x43	; 67
 4b6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__mulsf3>
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	34 e2       	ldi	r19, 0x24	; 36
 4be:	44 ef       	ldi	r20, 0xF4	; 244
 4c0:	5a e4       	ldi	r21, 0x4A	; 74
 4c2:	0e 94 cb 02 	call	0x596	; 0x596 <__divsf3>
		
		if(push_time >= 1){
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	40 e8       	ldi	r20, 0x80	; 128
 4cc:	5f e3       	ldi	r21, 0x3F	; 63
 4ce:	0e 94 cb 03 	call	0x796	; 0x796 <__gesf2>
 4d2:	88 23       	and	r24, r24
 4d4:	7c f1       	brlt	.+94     	; 0x534 <SetMinutes+0xb0>
			
			TCNT1 = 0;
 4d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 4de:	26 c0       	rjmp	.+76     	; 0x52c <SetMinutes+0xa8>
				
				pulse_count = TCNT1;
 4e0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4e4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 3d 03 	call	0x67a	; 0x67a <__floatunsisf>
				push_time = pulse_count * M_CYCLE / F;
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e8       	ldi	r20, 0x80	; 128
 4f6:	53 e4       	ldi	r21, 0x43	; 67
 4f8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__mulsf3>
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	34 e2       	ldi	r19, 0x24	; 36
 500:	44 ef       	ldi	r20, 0xF4	; 244
 502:	5a e4       	ldi	r21, 0x4A	; 74
 504:	0e 94 cb 02 	call	0x596	; 0x596 <__divsf3>
				
				if (push_time >= LONG_PLESS )
 508:	2d ec       	ldi	r18, 0xCD	; 205
 50a:	3c ec       	ldi	r19, 0xCC	; 204
 50c:	4c ec       	ldi	r20, 0xCC	; 204
 50e:	5d e3       	ldi	r21, 0x3D	; 61
 510:	0e 94 cb 03 	call	0x796	; 0x796 <__gesf2>
 514:	88 23       	and	r24, r24
 516:	3c f0       	brlt	.+14     	; 0x526 <SetMinutes+0xa2>
				{
					MinutesCounter(d_num);
 518:	ce 01       	movw	r24, r28
 51a:	0e 94 29 02 	call	0x452	; 0x452 <MinutesCounter>
					TCNT1 = 0;
 51e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 522:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				}
				
				DynamicDrive(d_num);
 526:	ce 01       	movw	r24, r28
 528:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
		
		if(push_time >= 1){
			
			TCNT1 = 0;
			
			while(PIND & MINUTE_SWITCH && !(PIND & SECONDS_SWITCH)){
 52c:	4a 9b       	sbis	0x09, 2	; 9
 52e:	02 c0       	rjmp	.+4      	; 0x534 <SetMinutes+0xb0>
 530:	4b 9b       	sbis	0x09, 3	; 9
 532:	d6 cf       	rjmp	.-84     	; 0x4e0 <SetMinutes+0x5c>
				
				DynamicDrive(d_num);
			}
		}
		
		if(PIND & SECONDS_SWITCH){
 534:	4b 9b       	sbis	0x09, 3	; 9
 536:	0d c0       	rjmp	.+26     	; 0x552 <SetMinutes+0xce>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 538:	18 82       	st	Y, r1
 53a:	19 82       	std	Y+1, r1	; 0x01
 53c:	1a 82       	std	Y+2, r1	; 0x02
 53e:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 540:	03 c0       	rjmp	.+6      	; 0x548 <SetMinutes+0xc4>
				DynamicDrive(d_num);
 542:	ce 01       	movw	r24, r28
 544:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
		
		if(PIND & SECONDS_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 548:	4b 99       	sbic	0x09, 3	; 9
 54a:	fb cf       	rjmp	.-10     	; 0x542 <SetMinutes+0xbe>
 54c:	4a 99       	sbic	0x09, 2	; 9
 54e:	f9 cf       	rjmp	.-14     	; 0x542 <SetMinutes+0xbe>
 550:	02 c0       	rjmp	.+4      	; 0x556 <SetMinutes+0xd2>


	MinutesCounter(d_num);

	TCNT1 = 0;
	while(PIND & MINUTE_SWITCH){
 552:	4a 99       	sbic	0x09, 2	; 9
 554:	a1 cf       	rjmp	.-190    	; 0x498 <SetMinutes+0x14>
			
			break;
		}
	}
	
}
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <SetSeconds>:

void SetSeconds(uint8_t d_num[]){
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	ec 01       	movw	r28, r24
	
	uint32_t *p;
	
	
	SecondsCounter(d_num);
 562:	0e 94 39 02 	call	0x472	; 0x472 <SecondsCounter>
	
	while(PIND & SECONDS_SWITCH){
 566:	12 c0       	rjmp	.+36     	; 0x58c <SetSeconds+0x30>
		DynamicDrive(d_num);
 568:	ce 01       	movw	r24, r28
 56a:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
 56e:	4a 9b       	sbis	0x09, 2	; 9
 570:	0d c0       	rjmp	.+26     	; 0x58c <SetSeconds+0x30>
			p = (uint32_t *)d_num;
			*p = 0x00000000;
 572:	18 82       	st	Y, r1
 574:	19 82       	std	Y+1, r1	; 0x01
 576:	1a 82       	std	Y+2, r1	; 0x02
 578:	1b 82       	std	Y+3, r1	; 0x03
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 57a:	03 c0       	rjmp	.+6      	; 0x582 <SetSeconds+0x26>
				DynamicDrive(d_num);
 57c:	ce 01       	movw	r24, r28
 57e:	0e 94 a7 01 	call	0x34e	; 0x34e <DynamicDrive>
		
		if(PIND & MINUTE_SWITCH){
			p = (uint32_t *)d_num;
			*p = 0x00000000;
			
			while(PIND & SECONDS_SWITCH || PIND & MINUTE_SWITCH){
 582:	4b 99       	sbic	0x09, 3	; 9
 584:	fb cf       	rjmp	.-10     	; 0x57c <SetSeconds+0x20>
 586:	4a 99       	sbic	0x09, 2	; 9
 588:	f9 cf       	rjmp	.-14     	; 0x57c <SetSeconds+0x20>
 58a:	02 c0       	rjmp	.+4      	; 0x590 <SetSeconds+0x34>
	uint32_t *p;
	
	
	SecondsCounter(d_num);
	
	while(PIND & SECONDS_SWITCH){
 58c:	4b 99       	sbic	0x09, 3	; 9
 58e:	ec cf       	rjmp	.-40     	; 0x568 <SetSeconds+0xc>
			
			break;
		}
	}
	
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <__divsf3>:
 596:	0e 94 df 02 	call	0x5be	; 0x5be <__divsf3x>
 59a:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>
 59e:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscB>
 5a2:	58 f0       	brcs	.+22     	; 0x5ba <__divsf3+0x24>
 5a4:	0e 94 83 03 	call	0x706	; 0x706 <__fp_pscA>
 5a8:	40 f0       	brcs	.+16     	; 0x5ba <__divsf3+0x24>
 5aa:	29 f4       	brne	.+10     	; 0x5b6 <__divsf3+0x20>
 5ac:	5f 3f       	cpi	r21, 0xFF	; 255
 5ae:	29 f0       	breq	.+10     	; 0x5ba <__divsf3+0x24>
 5b0:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 5b4:	51 11       	cpse	r21, r1
 5b6:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 5ba:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>

000005be <__divsf3x>:
 5be:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 5c2:	68 f3       	brcs	.-38     	; 0x59e <__divsf3+0x8>

000005c4 <__divsf3_pse>:
 5c4:	99 23       	and	r25, r25
 5c6:	b1 f3       	breq	.-20     	; 0x5b4 <__divsf3+0x1e>
 5c8:	55 23       	and	r21, r21
 5ca:	91 f3       	breq	.-28     	; 0x5b0 <__divsf3+0x1a>
 5cc:	95 1b       	sub	r25, r21
 5ce:	55 0b       	sbc	r21, r21
 5d0:	bb 27       	eor	r27, r27
 5d2:	aa 27       	eor	r26, r26
 5d4:	62 17       	cp	r22, r18
 5d6:	73 07       	cpc	r23, r19
 5d8:	84 07       	cpc	r24, r20
 5da:	38 f0       	brcs	.+14     	; 0x5ea <__divsf3_pse+0x26>
 5dc:	9f 5f       	subi	r25, 0xFF	; 255
 5de:	5f 4f       	sbci	r21, 0xFF	; 255
 5e0:	22 0f       	add	r18, r18
 5e2:	33 1f       	adc	r19, r19
 5e4:	44 1f       	adc	r20, r20
 5e6:	aa 1f       	adc	r26, r26
 5e8:	a9 f3       	breq	.-22     	; 0x5d4 <__divsf3_pse+0x10>
 5ea:	35 d0       	rcall	.+106    	; 0x656 <__divsf3_pse+0x92>
 5ec:	0e 2e       	mov	r0, r30
 5ee:	3a f0       	brmi	.+14     	; 0x5fe <__divsf3_pse+0x3a>
 5f0:	e0 e8       	ldi	r30, 0x80	; 128
 5f2:	32 d0       	rcall	.+100    	; 0x658 <__divsf3_pse+0x94>
 5f4:	91 50       	subi	r25, 0x01	; 1
 5f6:	50 40       	sbci	r21, 0x00	; 0
 5f8:	e6 95       	lsr	r30
 5fa:	00 1c       	adc	r0, r0
 5fc:	ca f7       	brpl	.-14     	; 0x5f0 <__divsf3_pse+0x2c>
 5fe:	2b d0       	rcall	.+86     	; 0x656 <__divsf3_pse+0x92>
 600:	fe 2f       	mov	r31, r30
 602:	29 d0       	rcall	.+82     	; 0x656 <__divsf3_pse+0x92>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	88 1f       	adc	r24, r24
 60a:	bb 1f       	adc	r27, r27
 60c:	26 17       	cp	r18, r22
 60e:	37 07       	cpc	r19, r23
 610:	48 07       	cpc	r20, r24
 612:	ab 07       	cpc	r26, r27
 614:	b0 e8       	ldi	r27, 0x80	; 128
 616:	09 f0       	breq	.+2      	; 0x61a <__divsf3_pse+0x56>
 618:	bb 0b       	sbc	r27, r27
 61a:	80 2d       	mov	r24, r0
 61c:	bf 01       	movw	r22, r30
 61e:	ff 27       	eor	r31, r31
 620:	93 58       	subi	r25, 0x83	; 131
 622:	5f 4f       	sbci	r21, 0xFF	; 255
 624:	3a f0       	brmi	.+14     	; 0x634 <__divsf3_pse+0x70>
 626:	9e 3f       	cpi	r25, 0xFE	; 254
 628:	51 05       	cpc	r21, r1
 62a:	78 f0       	brcs	.+30     	; 0x64a <__divsf3_pse+0x86>
 62c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 630:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	e4 f3       	brlt	.-8      	; 0x630 <__divsf3_pse+0x6c>
 638:	98 3e       	cpi	r25, 0xE8	; 232
 63a:	d4 f3       	brlt	.-12     	; 0x630 <__divsf3_pse+0x6c>
 63c:	86 95       	lsr	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b7 95       	ror	r27
 644:	f7 95       	ror	r31
 646:	9f 5f       	subi	r25, 0xFF	; 255
 648:	c9 f7       	brne	.-14     	; 0x63c <__divsf3_pse+0x78>
 64a:	88 0f       	add	r24, r24
 64c:	91 1d       	adc	r25, r1
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret
 656:	e1 e0       	ldi	r30, 0x01	; 1
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	bb 1f       	adc	r27, r27
 660:	62 17       	cp	r22, r18
 662:	73 07       	cpc	r23, r19
 664:	84 07       	cpc	r24, r20
 666:	ba 07       	cpc	r27, r26
 668:	20 f0       	brcs	.+8      	; 0x672 <__divsf3_pse+0xae>
 66a:	62 1b       	sub	r22, r18
 66c:	73 0b       	sbc	r23, r19
 66e:	84 0b       	sbc	r24, r20
 670:	ba 0b       	sbc	r27, r26
 672:	ee 1f       	adc	r30, r30
 674:	88 f7       	brcc	.-30     	; 0x658 <__divsf3_pse+0x94>
 676:	e0 95       	com	r30
 678:	08 95       	ret

0000067a <__floatunsisf>:
 67a:	e8 94       	clt
 67c:	09 c0       	rjmp	.+18     	; 0x690 <__floatsisf+0x12>

0000067e <__floatsisf>:
 67e:	97 fb       	bst	r25, 7
 680:	3e f4       	brtc	.+14     	; 0x690 <__floatsisf+0x12>
 682:	90 95       	com	r25
 684:	80 95       	com	r24
 686:	70 95       	com	r23
 688:	61 95       	neg	r22
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	99 23       	and	r25, r25
 692:	a9 f0       	breq	.+42     	; 0x6be <__floatsisf+0x40>
 694:	f9 2f       	mov	r31, r25
 696:	96 e9       	ldi	r25, 0x96	; 150
 698:	bb 27       	eor	r27, r27
 69a:	93 95       	inc	r25
 69c:	f6 95       	lsr	r31
 69e:	87 95       	ror	r24
 6a0:	77 95       	ror	r23
 6a2:	67 95       	ror	r22
 6a4:	b7 95       	ror	r27
 6a6:	f1 11       	cpse	r31, r1
 6a8:	f8 cf       	rjmp	.-16     	; 0x69a <__floatsisf+0x1c>
 6aa:	fa f4       	brpl	.+62     	; 0x6ea <__floatsisf+0x6c>
 6ac:	bb 0f       	add	r27, r27
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <__floatsisf+0x36>
 6b0:	60 ff       	sbrs	r22, 0
 6b2:	1b c0       	rjmp	.+54     	; 0x6ea <__floatsisf+0x6c>
 6b4:	6f 5f       	subi	r22, 0xFF	; 255
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	16 c0       	rjmp	.+44     	; 0x6ea <__floatsisf+0x6c>
 6be:	88 23       	and	r24, r24
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <__floatsisf+0x48>
 6c2:	96 e9       	ldi	r25, 0x96	; 150
 6c4:	11 c0       	rjmp	.+34     	; 0x6e8 <__floatsisf+0x6a>
 6c6:	77 23       	and	r23, r23
 6c8:	21 f0       	breq	.+8      	; 0x6d2 <__floatsisf+0x54>
 6ca:	9e e8       	ldi	r25, 0x8E	; 142
 6cc:	87 2f       	mov	r24, r23
 6ce:	76 2f       	mov	r23, r22
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <__floatsisf+0x5e>
 6d2:	66 23       	and	r22, r22
 6d4:	71 f0       	breq	.+28     	; 0x6f2 <__floatsisf+0x74>
 6d6:	96 e8       	ldi	r25, 0x86	; 134
 6d8:	86 2f       	mov	r24, r22
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	2a f0       	brmi	.+10     	; 0x6ea <__floatsisf+0x6c>
 6e0:	9a 95       	dec	r25
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	da f7       	brpl	.-10     	; 0x6e0 <__floatsisf+0x62>
 6ea:	88 0f       	add	r24, r24
 6ec:	96 95       	lsr	r25
 6ee:	87 95       	ror	r24
 6f0:	97 f9       	bld	r25, 7
 6f2:	08 95       	ret

000006f4 <__fp_inf>:
 6f4:	97 f9       	bld	r25, 7
 6f6:	9f 67       	ori	r25, 0x7F	; 127
 6f8:	80 e8       	ldi	r24, 0x80	; 128
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	08 95       	ret

00000700 <__fp_nan>:
 700:	9f ef       	ldi	r25, 0xFF	; 255
 702:	80 ec       	ldi	r24, 0xC0	; 192
 704:	08 95       	ret

00000706 <__fp_pscA>:
 706:	00 24       	eor	r0, r0
 708:	0a 94       	dec	r0
 70a:	16 16       	cp	r1, r22
 70c:	17 06       	cpc	r1, r23
 70e:	18 06       	cpc	r1, r24
 710:	09 06       	cpc	r0, r25
 712:	08 95       	ret

00000714 <__fp_pscB>:
 714:	00 24       	eor	r0, r0
 716:	0a 94       	dec	r0
 718:	12 16       	cp	r1, r18
 71a:	13 06       	cpc	r1, r19
 71c:	14 06       	cpc	r1, r20
 71e:	05 06       	cpc	r0, r21
 720:	08 95       	ret

00000722 <__fp_round>:
 722:	09 2e       	mov	r0, r25
 724:	03 94       	inc	r0
 726:	00 0c       	add	r0, r0
 728:	11 f4       	brne	.+4      	; 0x72e <__fp_round+0xc>
 72a:	88 23       	and	r24, r24
 72c:	52 f0       	brmi	.+20     	; 0x742 <__fp_round+0x20>
 72e:	bb 0f       	add	r27, r27
 730:	40 f4       	brcc	.+16     	; 0x742 <__fp_round+0x20>
 732:	bf 2b       	or	r27, r31
 734:	11 f4       	brne	.+4      	; 0x73a <__fp_round+0x18>
 736:	60 ff       	sbrs	r22, 0
 738:	04 c0       	rjmp	.+8      	; 0x742 <__fp_round+0x20>
 73a:	6f 5f       	subi	r22, 0xFF	; 255
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__fp_split3>:
 744:	57 fd       	sbrc	r21, 7
 746:	90 58       	subi	r25, 0x80	; 128
 748:	44 0f       	add	r20, r20
 74a:	55 1f       	adc	r21, r21
 74c:	59 f0       	breq	.+22     	; 0x764 <__fp_splitA+0x10>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	71 f0       	breq	.+28     	; 0x76e <__fp_splitA+0x1a>
 752:	47 95       	ror	r20

00000754 <__fp_splitA>:
 754:	88 0f       	add	r24, r24
 756:	97 fb       	bst	r25, 7
 758:	99 1f       	adc	r25, r25
 75a:	61 f0       	breq	.+24     	; 0x774 <__fp_splitA+0x20>
 75c:	9f 3f       	cpi	r25, 0xFF	; 255
 75e:	79 f0       	breq	.+30     	; 0x77e <__fp_splitA+0x2a>
 760:	87 95       	ror	r24
 762:	08 95       	ret
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	55 1f       	adc	r21, r21
 76c:	f2 cf       	rjmp	.-28     	; 0x752 <__fp_split3+0xe>
 76e:	46 95       	lsr	r20
 770:	f1 df       	rcall	.-30     	; 0x754 <__fp_splitA>
 772:	08 c0       	rjmp	.+16     	; 0x784 <__fp_splitA+0x30>
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	99 1f       	adc	r25, r25
 77c:	f1 cf       	rjmp	.-30     	; 0x760 <__fp_splitA+0xc>
 77e:	86 95       	lsr	r24
 780:	71 05       	cpc	r23, r1
 782:	61 05       	cpc	r22, r1
 784:	08 94       	sec
 786:	08 95       	ret

00000788 <__fp_zero>:
 788:	e8 94       	clt

0000078a <__fp_szero>:
 78a:	bb 27       	eor	r27, r27
 78c:	66 27       	eor	r22, r22
 78e:	77 27       	eor	r23, r23
 790:	cb 01       	movw	r24, r22
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <__gesf2>:
 796:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_cmp>
 79a:	08 f4       	brcc	.+2      	; 0x79e <__gesf2+0x8>
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	08 95       	ret

000007a0 <__mulsf3>:
 7a0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3x>
 7a4:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>
 7a8:	0e 94 83 03 	call	0x706	; 0x706 <__fp_pscA>
 7ac:	38 f0       	brcs	.+14     	; 0x7bc <__mulsf3+0x1c>
 7ae:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscB>
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__mulsf3+0x1c>
 7b4:	95 23       	and	r25, r21
 7b6:	11 f0       	breq	.+4      	; 0x7bc <__mulsf3+0x1c>
 7b8:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 7bc:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>
 7c0:	11 24       	eor	r1, r1
 7c2:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>

000007c6 <__mulsf3x>:
 7c6:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 7ca:	70 f3       	brcs	.-36     	; 0x7a8 <__mulsf3+0x8>

000007cc <__mulsf3_pse>:
 7cc:	95 9f       	mul	r25, r21
 7ce:	c1 f3       	breq	.-16     	; 0x7c0 <__mulsf3+0x20>
 7d0:	95 0f       	add	r25, r21
 7d2:	50 e0       	ldi	r21, 0x00	; 0
 7d4:	55 1f       	adc	r21, r21
 7d6:	62 9f       	mul	r22, r18
 7d8:	f0 01       	movw	r30, r0
 7da:	72 9f       	mul	r23, r18
 7dc:	bb 27       	eor	r27, r27
 7de:	f0 0d       	add	r31, r0
 7e0:	b1 1d       	adc	r27, r1
 7e2:	63 9f       	mul	r22, r19
 7e4:	aa 27       	eor	r26, r26
 7e6:	f0 0d       	add	r31, r0
 7e8:	b1 1d       	adc	r27, r1
 7ea:	aa 1f       	adc	r26, r26
 7ec:	64 9f       	mul	r22, r20
 7ee:	66 27       	eor	r22, r22
 7f0:	b0 0d       	add	r27, r0
 7f2:	a1 1d       	adc	r26, r1
 7f4:	66 1f       	adc	r22, r22
 7f6:	82 9f       	mul	r24, r18
 7f8:	22 27       	eor	r18, r18
 7fa:	b0 0d       	add	r27, r0
 7fc:	a1 1d       	adc	r26, r1
 7fe:	62 1f       	adc	r22, r18
 800:	73 9f       	mul	r23, r19
 802:	b0 0d       	add	r27, r0
 804:	a1 1d       	adc	r26, r1
 806:	62 1f       	adc	r22, r18
 808:	83 9f       	mul	r24, r19
 80a:	a0 0d       	add	r26, r0
 80c:	61 1d       	adc	r22, r1
 80e:	22 1f       	adc	r18, r18
 810:	74 9f       	mul	r23, r20
 812:	33 27       	eor	r19, r19
 814:	a0 0d       	add	r26, r0
 816:	61 1d       	adc	r22, r1
 818:	23 1f       	adc	r18, r19
 81a:	84 9f       	mul	r24, r20
 81c:	60 0d       	add	r22, r0
 81e:	21 1d       	adc	r18, r1
 820:	82 2f       	mov	r24, r18
 822:	76 2f       	mov	r23, r22
 824:	6a 2f       	mov	r22, r26
 826:	11 24       	eor	r1, r1
 828:	9f 57       	subi	r25, 0x7F	; 127
 82a:	50 40       	sbci	r21, 0x00	; 0
 82c:	9a f0       	brmi	.+38     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 82e:	f1 f0       	breq	.+60     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 830:	88 23       	and	r24, r24
 832:	4a f0       	brmi	.+18     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	bb 1f       	adc	r27, r27
 83a:	66 1f       	adc	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	91 50       	subi	r25, 0x01	; 1
 842:	50 40       	sbci	r21, 0x00	; 0
 844:	a9 f7       	brne	.-22     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 846:	9e 3f       	cpi	r25, 0xFE	; 254
 848:	51 05       	cpc	r21, r1
 84a:	80 f0       	brcs	.+32     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 84c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 850:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	e4 f3       	brlt	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 858:	98 3e       	cpi	r25, 0xE8	; 232
 85a:	d4 f3       	brlt	.-12     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 85c:	86 95       	lsr	r24
 85e:	77 95       	ror	r23
 860:	67 95       	ror	r22
 862:	b7 95       	ror	r27
 864:	f7 95       	ror	r31
 866:	e7 95       	ror	r30
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	c1 f7       	brne	.-16     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 86c:	fe 2b       	or	r31, r30
 86e:	88 0f       	add	r24, r24
 870:	91 1d       	adc	r25, r1
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__fp_cmp>:
 87a:	99 0f       	add	r25, r25
 87c:	00 08       	sbc	r0, r0
 87e:	55 0f       	add	r21, r21
 880:	aa 0b       	sbc	r26, r26
 882:	e0 e8       	ldi	r30, 0x80	; 128
 884:	fe ef       	ldi	r31, 0xFE	; 254
 886:	16 16       	cp	r1, r22
 888:	17 06       	cpc	r1, r23
 88a:	e8 07       	cpc	r30, r24
 88c:	f9 07       	cpc	r31, r25
 88e:	c0 f0       	brcs	.+48     	; 0x8c0 <__fp_cmp+0x46>
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	e4 07       	cpc	r30, r20
 896:	f5 07       	cpc	r31, r21
 898:	98 f0       	brcs	.+38     	; 0x8c0 <__fp_cmp+0x46>
 89a:	62 1b       	sub	r22, r18
 89c:	73 0b       	sbc	r23, r19
 89e:	84 0b       	sbc	r24, r20
 8a0:	95 0b       	sbc	r25, r21
 8a2:	39 f4       	brne	.+14     	; 0x8b2 <__fp_cmp+0x38>
 8a4:	0a 26       	eor	r0, r26
 8a6:	61 f0       	breq	.+24     	; 0x8c0 <__fp_cmp+0x46>
 8a8:	23 2b       	or	r18, r19
 8aa:	24 2b       	or	r18, r20
 8ac:	25 2b       	or	r18, r21
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <__fp_cmp+0x3e>
 8b0:	08 95       	ret
 8b2:	0a 26       	eor	r0, r26
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <__fp_cmp+0x3e>
 8b6:	a1 40       	sbci	r26, 0x01	; 1
 8b8:	a6 95       	lsr	r26
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	81 1d       	adc	r24, r1
 8be:	81 1d       	adc	r24, r1
 8c0:	08 95       	ret

000008c2 <__tablejump2__>:
 8c2:	ee 0f       	add	r30, r30
 8c4:	ff 1f       	adc	r31, r31
 8c6:	05 90       	lpm	r0, Z+
 8c8:	f4 91       	lpm	r31, Z
 8ca:	e0 2d       	mov	r30, r0
 8cc:	09 94       	ijmp

000008ce <_exit>:
 8ce:	f8 94       	cli

000008d0 <__stop_program>:
 8d0:	ff cf       	rjmp	.-2      	; 0x8d0 <__stop_program>
